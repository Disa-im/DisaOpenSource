<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Managed.AndroidDebugBridge</name>
    </assembly>
    <members>
        <member name="T:Managed.Adb.AdbHelper">
            <summary>
            The ADB Helper class
            </summary>
            <seealso cref="!:https://github.com/android/platform_system_core/blob/master/adb/SERVICES.TXT">SERVICES.TXT</seealso>
            <seealso cref="!:https://github.com/android/platform_system_core/blob/master/adb/adb_client.c">adb_client.c</seealso>
            <seealso cref="!:https://github.com/android/platform_system_core/blob/master/adb/adb.c">adb.c</seealso>
        </member>
        <member name="F:Managed.Adb.AdbHelper.TAG">
            <summary>
            Logging tag
            </summary>
        </member>
        <member name="F:Managed.Adb.AdbHelper.WAIT_TIME">
            <summary>
            The time to wait
            </summary>
        </member>
        <member name="F:Managed.Adb.AdbHelper.DEFAULT_ENCODING">
            <summary>
            The default encoding
            </summary>
        </member>
        <member name="M:Managed.Adb.AdbHelper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Managed.Adb.AdbHelper"/> class from being created.
            </summary>
        </member>
        <member name="F:Managed.Adb.AdbHelper._instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Managed.Adb.AdbHelper.Instance">
            <summary>
            Gets an instance of the AdbHelper.
            </summary>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Open(System.Net.IPAddress,Managed.Adb.IDevice,System.Int32)">
            <summary>
            Opens the specified address on the device on the specified port.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
            <param name="port">The port.</param>
            <returns>The open socket</returns>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            failed submitting request to ADB
            or
            connection request rejected
            </exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.KillAdb(System.Net.IPEndPoint)">
            <summary>
            Kills the running adb server.
            </summary>
            <param name="address">The address.</param>
            <returns>0 for success; -1 for failure.</returns>
            <exception cref="T:System.IO.IOException">failed asking to kill adb</exception>
            <gist id="cbacc7b384ec7a4c27f7" />
        </member>
        <member name="M:Managed.Adb.AdbHelper.Backup(System.Net.IPEndPoint)">
            <summary>
            Backups the specified address.
            </summary>
            <param name="address">The address.</param>
            <exception cref="T:System.IO.IOException">failed asking to backup device</exception>
            <seealso cref="!:https://github.com/android/platform_system_core/blob/master/adb/backup_service.c">backup_service.c</seealso>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Restore">
            <summary>
            Restores this instance.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
            <seealso cref="!:https://github.com/android/platform_system_core/blob/master/adb/backup_service.c">backup_service.c</seealso>
        </member>
        <member name="M:Managed.Adb.AdbHelper.GetAdbVersion(System.Net.IPEndPoint)">
            <summary>
            Gets the adb version of the server.
            </summary>
            <param name="address">The address.</param>
            <returns>The version number; or -1 if failure.</returns>
            <exception cref="T:System.IO.IOException">failed asking for adb version</exception>
            <gist id="3a130af63ca1f94d0152" />
        </member>
        <member name="M:Managed.Adb.AdbHelper.CreatePassThroughConnection(System.Net.IPEndPoint,Managed.Adb.Device,System.Int32)">
            <summary>
            Creates and connects a new pass-through socket, from the host to a port on the device.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <param name="device">the device to connect to. Can be null in which case the connection will be
            to the first available device.</param>
            <param name="pid">the process pid to connect to.</param>
            <returns>
            The Socket
            </returns>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            failed submitting request to ADB
            or
            connection request rejected:  + resp.Message
            </exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.CreateAdbForwardRequest(System.String,System.Int32)">
            <summary>
            Creates the adb forward request.
            </summary>
            <param name="address">The address.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.FormAdbRequest(System.String)">
            <summary>
            Forms the adb request.
            </summary>
            <param name="req">The req.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Write(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Writes the specified data to the specified socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Write(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified data to the specified socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data.</param>
            <param name="length">The length.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            channel EOF
            or
            timeout
            </exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ReadAdbResponse(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Reads the adb response.
            </summary>
            <param name="socket">The socket.</param>
            <param name="readDiagString">if set to <c>true</c> [read diag string].</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Read(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Reads the data from specified socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Read(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from specified socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data.</param>
            <param name="length">The length.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            EOF 
            or 
            No Data to read: exception.Message
            </exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.CreateJdwpForwardRequest(System.Int32)">
            <summary>
            Creates the JDWP forward request.
            </summary>
            <param name="pid">The pid.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.CreateForward(System.Net.IPEndPoint,Managed.Adb.Device,System.Int32,System.Int32)">
            <summary>
            Creates the forward.
            </summary>
            <param name="adbSockAddr">The adb sock addr.</param>
            <param name="device">The device.</param>
            <param name="localPort">The local port.</param>
            <param name="remotePort">The remote port.</param>
            <returns></returns>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            failed to submit the forward command.
            or
            Device rejected command:  + resp.Message
            </exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ListForward(System.Net.IPEndPoint,Managed.Adb.Device)">
            <summary>
            Lists the forward.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.RemoveForward(System.Net.IPEndPoint,Managed.Adb.Device,System.Int32)">
            <summary>
            Removes the forward.
            </summary>
            <param name="address">The adb socket address.</param>
            <param name="device">The device.</param>
            <param name="localPort">The local port.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.RemoveAllForward(System.Net.IPEndPoint,Managed.Adb.Device)">
            <summary>
            Removes all forwards.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.IsOkay(System.Byte[])">
            <summary>
            Determines whether the specified reply is okay.
            </summary>
            <param name="reply">The reply.</param>
            <returns>
              <c>true</c> if the specified reply is okay; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ReplyToString(System.Byte[])">
            <summary>
            Replies to string.
            </summary>
            <param name="reply">The reply.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.GetDevices(System.Net.IPEndPoint)">
            <summary>
            Gets the devices that are available for communication.
            </summary>
            <param name="address">The address.</param>
            <returns>A list of devices that are connected.</returns>
            <gist id="a8acf10d48370d138247" />
        </member>
        <member name="M:Managed.Adb.AdbHelper.GetFrameBuffer(System.Net.IPEndPoint,Managed.Adb.IDevice)">
            <summary>
            Gets the frame buffer from the specified end point.
            </summary>
            <param name="adbSockAddr">The adb sock addr.</param>
            <param name="device">The device.</param>
            <returns>Returns the RawImage.</returns>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            failed asking for frame buffer
            or
            failed nudging
            </exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRemoteRootCommand(System.Net.IPEndPoint,System.String,Managed.Adb.Device,Managed.Adb.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the remote device
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="command">The command.</param>
            <param name="device">The device.</param>
            <param name="rcvr">The RCVR.</param>
            <remarks>
            Should check if you CanSU before calling this.
            </remarks>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRemoteRootCommand(System.Net.IPEndPoint,System.String,Managed.Adb.Device,Managed.Adb.IShellOutputReceiver,System.Int32)">
            <summary>
            Executes a shell command on the remote device
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="command">The command.</param>
            <param name="device">The device.</param>
            <param name="rcvr">The RCVR.</param>
            <param name="maxTimeToOutputResponse">The max time to output response.</param>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRemoteCommand(System.Net.IPEndPoint,System.String,Managed.Adb.Device,Managed.Adb.IShellOutputReceiver,System.Int32)">
            <summary>
            Executes the remote command.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="command">The command.</param>
            <param name="device">The device.</param>
            <param name="rcvr">The RCVR.</param>
            <param name="maxTimeToOutputResponse">The max time to output response.</param>
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:System.IO.FileNotFoundException">
            </exception>
            <exception cref="T:Managed.Adb.Exceptions.UnknownOptionException"></exception>
            <exception cref="T:Managed.Adb.Exceptions.CommandAbortingException"></exception>
            <exception cref="T:Managed.Adb.Exceptions.PermissionDeniedException"></exception>
            <exception cref="T:Managed.Adb.Exceptions.ShellCommandUnresponsiveException"></exception>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">failed submitting shell command</exception>
            <exception cref="T:Managed.Adb.Exceptions.UnknownOptionException"></exception>
            <exception cref="T:Managed.Adb.Exceptions.CommandAbortingException"></exception>
            <exception cref="T:Managed.Adb.Exceptions.PermissionDeniedException"></exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRemoteCommand(System.Net.IPEndPoint,System.String,Managed.Adb.Device,Managed.Adb.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the remote device
            </summary>
            <param name="endPoint">The socket end point</param>
            <param name="command">The command to execute</param>
            <param name="device">The device to execute on</param>
            <param name="rcvr">The shell output receiver</param>
            <exception cref="T:System.IO.FileNotFoundException">Throws if the result is 'command': not found</exception>
            <exception cref="T:System.IO.IOException">Throws if there is a problem reading / writing to the socket</exception>
            <exception cref="T:System.OperationCanceledException">Throws if the execution was canceled</exception>
            <exception cref="T:System.IO.EndOfStreamException">Throws if the Socket.Receice ever returns -1</exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.SetDevice(System.Net.Sockets.Socket,Managed.Adb.IDevice)">
            <summary>
            Sets the device.
            </summary>
            <param name="adbChan">The adb chan.</param>
            <param name="device">The device.</param>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            failed submitting device ( + device + ) request to ADB
            or
            device ( + device + ) request rejected:  + resp.Message
            </exception>
            <exception cref="T:Managed.Adb.Exceptions.DeviceNotFoundException"></exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.RunEventLogService(System.Net.IPEndPoint,Managed.Adb.Device,Managed.Adb.Logs.LogReceiver)">
            <summary>
            Runs the Event log service on the Device, and provides its output to the LogReceiver.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
            <param name="rcvr">The RCVR.</param>
        </member>
        <member name="M:Managed.Adb.AdbHelper.RunLogService(System.Net.IPEndPoint,Managed.Adb.Device,System.String,Managed.Adb.Logs.LogReceiver)">
            <summary>
            Runs the Event log service on the Device, and provides its output to the LogReceiver.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
            <param name="logName">Name of the log.</param>
            <param name="rcvr">The RCVR.</param>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">failed asking for log</exception>
            <exception cref="T:Managed.Adb.Exceptions.AdbCommandRejectedException"></exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Reboot(System.Net.IPEndPoint,Managed.Adb.Device)">
            <summary>
            Reboots the specified adb socket address.
            </summary>
            <param name="adbSocketAddress">The adb socket address.</param>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.AdbHelper.Reboot(System.String,System.Net.IPEndPoint,Managed.Adb.Device)">
            <summary>
            Reboots the specified device in to the specified mode.
            </summary>
            <param name="into">The into.</param>
            <param name="adbSockAddr">The adb sock addr.</param>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRawSocketCommand(System.Net.IPEndPoint,Managed.Adb.Device,System.String)">
            <summary>
            Executes a raw socket command.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
            <param name="command">The command.</param>
            <returns></returns>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">failed to submit the command: {0}.With(command)
            or
            Device rejected command: {0}.With(resp.Message)</exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRawSocketCommand(System.Net.IPEndPoint,System.String)">
            <summary>
            Executes the raw socket command.
            </summary>
            <param name="address">The address.</param>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRawSocketCommand(System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Executes the raw socket command.
            </summary>
            <param name="address">The address.</param>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AdbHelper.ExecuteRawSocketCommand(System.Net.IPEndPoint,Managed.Adb.Device,System.Byte[])">
            <summary>
            Executes the raw socket command.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
            <param name="command">The command. Should call FormAdbRequest on the string to create the byte array.</param>
            <returns></returns>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">
            Device is offline
            or
            failed to submit the command: {0}..With(command.GetString().Trim())
            or
            Device rejected command: {0}.With(resp.Message)
            </exception>
            <exception cref="T:Managed.Adb.Exceptions.AdbException">Device is offline.
            or
            failed to submit the command: {0}.With(command)
            or
            Device rejected command: {0}.With(resp.Message)</exception>
        </member>
        <member name="M:Managed.Adb.AdbHelper.HostPrefixFromDevice(Managed.Adb.IDevice)">
            <summary>
            
            </summary>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="T:Managed.Adb.AdbResponse">
            <summary>
            An Adb Communication Response
            </summary>
        </member>
        <member name="M:Managed.Adb.AdbResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.AdbResponse"/> class.
            </summary>
        </member>
        <member name="P:Managed.Adb.AdbResponse.IOSuccess">
            <summary>
            Gets or sets a value indicating whether the IO communication was a success.
            </summary>
            <value>
              <c>true</c> if successful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.AdbResponse.Okay">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Managed.Adb.AdbResponse"/> is okay.
            </summary>
            <value>
              <c>true</c> if okay; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.AdbResponse.Timeout">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Managed.Adb.AdbResponse"/> is timeout.
            </summary>
            <value>
              <c>true</c> if timeout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.AdbResponse.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:Managed.Adb.AllocationInfo">
            <summary>
             Holds Allocation information.
            </summary>
        </member>
        <member name="M:Managed.Adb.AllocationInfo.#ctor(System.String,System.Int32,System.Int16,System.Diagnostics.StackTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.AllocationInfo"/> class.
            </summary>
            <param name="allocatedClass">The allocated class.</param>
            <param name="allocationSize">Size of the allocation.</param>
            <param name="threadId">The thread id.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="P:Managed.Adb.AllocationInfo.AllocatedClass">
            <summary>
            Gets the allocated class.
            </summary>
            <value>The allocated class.</value>
        </member>
        <member name="P:Managed.Adb.AllocationInfo.AllocationSize">
            <summary>
            Gets the size of the allocation.
            </summary>
            <value>The size of the allocation.</value>
        </member>
        <member name="P:Managed.Adb.AllocationInfo.ThreadId">
            <summary>
            Gets the thread id.
            </summary>
            <value>The thread id.</value>
        </member>
        <member name="P:Managed.Adb.AllocationInfo.StackTrace">
            <summary>
            Gets the stack trace.
            </summary>
            <value>The stack trace.</value>
        </member>
        <member name="M:Managed.Adb.AllocationInfo.CompareTo(Managed.Adb.AllocationInfo)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="T:Managed.Adb.AndroidDebugBridge">
            <summary>
            The android debug bridge
            </summary>
        </member>
        <member name="E:Managed.Adb.AndroidDebugBridge.BridgeChanged">
            <summary>
            Occurs when [bridge changed].
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="E:Managed.Adb.AndroidDebugBridge.DeviceChanged">
            <summary>
            Occurs when [device changed].
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="E:Managed.Adb.AndroidDebugBridge.DeviceConnected">
            <summary>
            Occurs when [device connected].
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="E:Managed.Adb.AndroidDebugBridge.DeviceDisconnected">
            <summary>
            Occurs when [device disconnected].
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="E:Managed.Adb.AndroidDebugBridge.ClientChanged">
            <summary>
            Occurs when [client changed].
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.ADB_VERSION_MICRO_MIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.ADB_VERSION_MICRO_MAX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.ADB_VERSION_PATTERN">
            <summary>
            The regex pattern for getting the adb version
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.ADB">
            <summary>
            The ADB executive
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.DDMS">
            <summary>
            The DDMS executive
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.HIERARCHYVIEWER">
            <summary>
            The hierarchy viewer
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.AAPT">
            <summary>
            The AAPT executive
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge.ADB_PORT">
            <summary>
            The default ADB bridge port
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge._instance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.AndroidDebugBridge._clientSupport">
            <summary>
            
            </summary>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.SocketAddress">
            <summary>
            Gets or sets the socket address.
            </summary>
            <value>The socket address.</value>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.HostAddress">
            <summary>
            Gets or sets the host address.
            </summary>
            <value>The host address.</value>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.#cctor">
            <summary>
            Initializes the <see cref="T:Managed.Adb.AndroidDebugBridge"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.Initialize(System.Boolean)">
            <summary>
            Initializes the <code>ddm</code> library.
            <para>This must be called once <b>before</b> any call to CreateBridge.</para>
            </summary>
            <param name="clientSupport">if set to <c>true</c> [client support].</param>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.Terminate">
            <summary>
            Terminates the ddm library. This must be called upon application termination.
            </summary>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.Instance">
            <summary>
            Gets an instance of <see cref="T:Managed.Adb.AndroidDebugBridge"/>.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.Bridge">
            <summary>
            Gets an instance of <see cref="T:Managed.Adb.AndroidDebugBridge"/>.
            </summary>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.ClientSupport">
            <summary>
            Gets a value indicating whether there is client support.
            </summary>
            <value>
              <c>true</c> if there is client support; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.CreateBridge">
            <summary>
            Creates a {@link AndroidDebugBridge} that is not linked to any particular executable.
            This bridge will expect adb to be running. It will not be able to start/stop/restart</summary>
            adb.
            If a bridge has already been started, it is directly returned with no changes
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.CreateBridge(System.String,System.Boolean)">
            <summary>
            Creates a new debug bridge from the location of the command line tool.
            </summary>
            <param name="osLocation">the location of the command line tool 'adb'</param>
            <param name="forceNewBridge">force creation of a new bridge even if one with the same location
            already exists.</param>
            <returns>a connected bridge.</returns>
            <remarks>Any existing server will be disconnected, unless the location is the same and
            <code>forceNewBridge</code> is set to false.
            </remarks>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.DisconnectBridge">
            <summary>
            Disconnects the current debug bridge, and destroy the object.
            </summary>
            <remarks>This also stops the current adb host server.</remarks>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.GetLock">
            <summary>
            Gets the lock.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.#ctor(System.String)">
            <summary>
            Creates a new bridge.
            </summary>
            <param name="osLocation">the location of the command line tool</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.#ctor">
            <summary>
            Creates a new bridge not linked to any particular adb executable.
            </summary>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.OnBridgeChanged(Managed.Adb.AndroidDebugBridgeEventArgs)">
            <summary>
            Raises the <see cref="E:BridgeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Managed.Adb.AndroidDebugBridgeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.OnClientChanged(Managed.Adb.ClientEventArgs)">
            <summary>
            Raises the <see cref="E:ClientChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Managed.Adb.ClientEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.OnDeviceChanged(Managed.Adb.DeviceEventArgs)">
            <summary>
            Raises the <see cref="E:DeviceChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Managed.Adb.DeviceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.OnDeviceConnected(Managed.Adb.DeviceEventArgs)">
            <summary>
            Raises the <see cref="E:DeviceConnected"/> event.
            </summary>
            <param name="e">The <see cref="T:Managed.Adb.DeviceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.OnDeviceDisconnected(Managed.Adb.DeviceEventArgs)">
            <summary>
            Raises the <see cref="E:DeviceDisconnected"/> event.
            </summary>
            <param name="e">The <see cref="T:Managed.Adb.DeviceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.Start">
            <summary>
            Starts the debug bridge.
            </summary>
            <returns><c>true</c> if success.</returns>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.Stop">
            <summary>
            Kills the debug bridge, and the adb host server.
            </summary>
            <returns><c>true</c> if success.</returns>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.Restart">
            <summary>
            Restarts adb, but not the services around it.
            </summary>
            <returns><c>true</c> if success.</returns>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.AdbOsLocation">
            <summary>
            Gets or Sets the adb location on the OS.
            </summary>
            <value>The adb location on the OS.</value>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.Devices">
            <summary>
            Gets the devices.
            </summary>
            <value>The devices.</value>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.HasInitialDeviceList">
            <summary>
            Returns whether the bridge has acquired the initial list from adb after being created.
            </summary>
            <remarks>
            <p/>Calling getDevices() right after createBridge(String, boolean) will
            generally result in an empty list. This is due to the internal asynchronous communication
            mechanism with <code>adb</code> that does not guarantee that the IDevice list has been
            built before the call to getDevices().
            <p/>The recommended way to get the list of IDevice objects is to create a
            IDeviceChangeListener object.
            </remarks>
            <returns>
            	<c>true</c> if [has initial device list]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.SelectedClient">
            <summary>
            Gets or sets the client to accept debugger connection on the custom "Selected debug port".
            </summary>
            <remarks>Not Yet Implemented</remarks>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.IsConnected">
            <summary>
            Returns whether the AndroidDebugBridge object is still connected to the adb daemon.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.ConnectionAttemptCount">
            <summary>
            Returns the number of times the AndroidDebugBridge object attempted to connect
            </summary>
            <value>The connection attempt count.</value>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.RestartAttemptCount">
            <summary>
            Returns the number of times the AndroidDebugBridge object attempted to restart
            the adb daemon.
            </summary>
            <value>The restart attempt count.</value>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.DeviceMonitor">
            <summary>
            Gets the device monitor
            </summary>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.Started">
            <summary>
            Gets if the adb host has started
            </summary>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridge.VersionCheck">
            <summary>
            Gets the result of the version check
            </summary>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.CheckAdbVersion">
            <summary>
            Queries adb for its version number and checks it against #MIN_VERSION_NUMBER and MAX_VERSION_NUMBER
            </summary>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.ScanVersionLine(System.String)">
            <summary>
            Scans a line resulting from 'adb version' for a potential version number.
            </summary>
            <param name="line">The line to scan.</param>
            <returns><c>true</c> if a version number was found (whether it is acceptable or not).</returns>
            <remarks>If a version number is found, it checks the version number against what is expected
            by this version of ddms.</remarks>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.StartAdb">
            <summary>
            Starts the adb host side server.
            </summary>
            <returns>true if success</returns>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.StopAdb">
            <summary>
            Stops the adb host side server.
            </summary>
            <returns>true if success</returns>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridge.GrabProcessOutput(System.Diagnostics.Process,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Get the stderr/stdout outputs of a process and return when the process is done.
            Both <b>must</b> be read or the process will block on windows.
            </summary>
            <param name="process">The process to get the ouput from</param>
            <param name="errorOutput">The array to store the stderr output. cannot be null.</param>
            <param name="stdOutput">The array to store the stdout output. cannot be null.</param>
            <param name="waitforReaders">if true, this will wait for the reader threads.</param>
            <returns>the process return code.</returns>
        </member>
        <member name="T:Managed.Adb.AndroidDebugBridgeEventArgs">
            <summary>
            
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="M:Managed.Adb.AndroidDebugBridgeEventArgs.#ctor(Managed.Adb.AndroidDebugBridge)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.AndroidDebugBridgeEventArgs"/> class.
            </summary>
            <param name="bridge">The bridge.</param>
        </member>
        <member name="P:Managed.Adb.AndroidDebugBridgeEventArgs.Bridge">
            <summary>
            Gets the bridge.
            </summary>
            <value>The bridge.</value>
        </member>
        <member name="T:Managed.Adb.BatteryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Managed.Adb.BatteryInfo.StatusTypes">
            <summary>
            Battery Status Types
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.StatusTypes.Unknown">
            <summary>
            Unknown Status
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.StatusTypes.Charging">
            <summary>
            Charging
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.StatusTypes.Discharging">
            <summary>
            Discharging
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.StatusTypes.NotCharging">
            <summary>
            Discharging
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.StatusTypes.Full">
            <summary>
            Battery Full
            </summary>
        </member>
        <member name="T:Managed.Adb.BatteryInfo.HealthTypes">
            <summary>
            Battery Health Types
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.HealthTypes.Unknown">
            <summary>
            Unknown Health
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.HealthTypes.Good">
            <summary>
            Good
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.HealthTypes.Overheat">
            <summary>
            Overheating
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.HealthTypes.Cold">
            <summary>
            Cold
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.HealthTypes.OverVoltage">
            <summary>
            Over voltage
            </summary>
        </member>
        <member name="F:Managed.Adb.BatteryInfo.HealthTypes.UnspecifiedFailure">
            <summary>
            Unspecified Failure
            </summary>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.ACPowered">
            <summary>
            Gets or sets a value indicating whether AC powered.
            </summary>
            <value>
              <c>true</c> if AC powered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.UsbPowered">
            <summary>
            Gets or sets a value indicating whether usb powered.
            </summary>
            <value>
              <c>true</c> if usb powered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Health">
            <summary>
            Gets or sets the health.
            </summary>
            <value>
            The health.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Present">
            <summary>
            Gets or sets a value indicating whether a battery is present.
            </summary>
            <value>
              <c>true</c> if present; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Voltage">
            <summary>
            Gets or sets the voltage.
            </summary>
            <value>
            The voltage.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Temperature">
            <summary>
            Gets or sets the temperature.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Managed.Adb.BatteryInfo.CalculatedLevel">
            <summary>
            Gets the calculated battery level.
            </summary>
            <value>
            The calculated level.
            </value>
        </member>
        <member name="M:Managed.Adb.BatteryInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Managed.Adb.BusyBox">
            <summary>
            A class to help with working with BusyBox
            </summary>
        </member>
        <member name="F:Managed.Adb.BusyBox.BUSYBOX_BIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.BusyBox.BUSYBOX_COMMAND">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.BusyBox.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.BusyBox"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.BusyBox.Install(System.String)">
            <summary>
            Attempts to install on the device
            </summary>
            <param name="busybox">The path to the busybox binary to install.</param>
            <returns><c>true</c>, if successful; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Managed.Adb.BusyBox.CheckForBusyBox">
            <summary>
            Checks for busy box.
            </summary>
        </member>
        <member name="M:Managed.Adb.BusyBox.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Object[])">
            <summary>
            Executes a busybox command on the device
            </summary>
            <param name="command"></param>
            <param name="receiver"></param>
            <param name="commandArgs"></param>
        </member>
        <member name="M:Managed.Adb.BusyBox.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Object[])">
            <summary>
            Executes a busybox command on the device as root
            </summary>
            <param name="command">The command.</param>
            <param name="receiver">The receiver.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="P:Managed.Adb.BusyBox.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="P:Managed.Adb.BusyBox.Available">
            <summary>
            Gets if busybox is available on this device.
            </summary>
        </member>
        <member name="P:Managed.Adb.BusyBox.Version">
            <summary>
            Gets the version of busybox
            </summary>
        </member>
        <member name="P:Managed.Adb.BusyBox.Commands">
            <summary>
            Gets a collection of the supported commands
            </summary>
        </member>
        <member name="M:Managed.Adb.BusyBox.Supports(System.String)">
            <summary>
            Gets if the specified command name is supported by this version of busybox
            </summary>
            <param name="command">The command name to check</param>
            <returns><c>true</c>, if supported; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Managed.Adb.BusyBox.BusyBoxCommandsReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.BusyBox.BusyBoxCommandsReceiver.BB_VERSION_PATTERN">
            <summary>
            The busybox version regex pattern
            </summary>
        </member>
        <member name="F:Managed.Adb.BusyBox.BusyBoxCommandsReceiver.BB_FUNCTIONS_PATTERN">
            <summary>
            the busybox commands list regex pattern
            </summary>
        </member>
        <member name="P:Managed.Adb.BusyBox.BusyBoxCommandsReceiver.BusyBox">
            <summary>
            Gets or sets the busy box.
            </summary>
            <value>
            The busy box.
            </value>
        </member>
        <member name="M:Managed.Adb.BusyBox.BusyBoxCommandsReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
            <workitem id="16000">Issues w/ BusyBox.cs/ProcessNewLines()</workitem>
        </member>
        <member name="T:Managed.Adb.Client">
            <summary>
            A debug client
            </summary>
        </member>
        <member name="F:Managed.Adb.Client.SERVER_PROTOCOL_VERSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Client.INITIAL_BUF_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Client.MAX_BUF_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Client.WRITE_BUF_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.#ctor(Managed.Adb.Device,System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Client"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="channel">The channel.</param>
            <param name="pid">The pid.</param>
        </member>
        <member name="P:Managed.Adb.Client.ChangeState">
            <summary>
            Gets the state of the change.
            </summary>
            <value>
            The state of the change.
            </value>
        </member>
        <member name="P:Managed.Adb.Client.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>
            The channel.
            </value>
        </member>
        <member name="P:Managed.Adb.Client.ConnectionState">
            <summary>
            Gets the state of the connection.
            </summary>
            <value>
            The state of the connection.
            </value>
        </member>
        <member name="P:Managed.Adb.Client.Device">
            <summary>
            Gets the device.
            </summary>
        </member>
        <member name="P:Managed.Adb.Client.DeviceImplementation">
            <summary>
            Gets the device implementation.
            </summary>
        </member>
        <member name="P:Managed.Adb.Client.DebuggerListenPort">
            <summary>
            Gets the debugger listen port.
            </summary>
        </member>
        <member name="P:Managed.Adb.Client.IsDdmAware">
            <summary>
            Returns <code>true</code> if the client VM is DDM-aware.
            </summary>
            <remarks>Calling here is only allowed after the connection has been established.</remarks>
        </member>
        <member name="P:Managed.Adb.Client.IsDebuggerAttached">
            <summary>
            Gets a value indicating whether this instance is debugger attached.
            </summary>
            <value>
            	<c>true</c> if this instance is debugger attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.Client.Debugger">
            <summary>
            Gets the debugger.
            </summary>
        </member>
        <member name="P:Managed.Adb.Client.ClientData">
            <summary>
            Gets the client data.
            </summary>
        </member>
        <member name="P:Managed.Adb.Client.IsThreadUpdateEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is thread update enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is thread update enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.Client.IsHeapUpdateEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is heap update enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is heap update enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.Client.IsSelectedClient">
            <summary>
            Gets or sets a value indicating whether this instance is selected client.
            </summary>
            <value>
            	<c>true</c> if this instance is selected client; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.Client.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.Client.ExecuteGarbageCollector">
            <summary>
            Executes the garbage collector.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.DumpHprof">
            <summary>
            Dumps the hprof.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.ToggleMethodProfiling">
            <summary>
            Toggles the method profiling.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.RequestMethodProfilingStatus">
            <summary>
            Requests the method profiling status.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.RequestThreadUpdate">
            <summary>
            Requests the thread update.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.RequestThreadStackTrace(System.Int32)">
            <summary>
            Requests the thread stack trace.
            </summary>
            <param name="threadID">The thread ID.</param>
        </member>
        <member name="M:Managed.Adb.Client.RequestNativeHeapInformation">
            <summary>
            Requests the native heap information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Client.EnableAllocationTracker(System.Boolean)">
            <summary>
            Enables the allocation tracker.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:Managed.Adb.Client.RequestAllocationStatus">
            <summary>
            Requests the allocation status.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.RequestAllocationDetails">
            <summary>
            Requests the allocation details.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.Kill">
            <summary>
            Kills this instance.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.Register(System.Object)">
            <summary>
            Registers the specified selector.
            </summary>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Managed.Adb.Client.ListenForDebugger(System.Int32)">
            <summary>
            Listens for debugger.
            </summary>
            <param name="listenPort">The listen port.</param>
        </member>
        <member name="M:Managed.Adb.Client.SendAndConsume(System.Object,Managed.Adb.ChunkHandler)">
            <summary>
            Sends the and consume.
            </summary>
            <param name="packet">The packet.</param>
            <param name="replyHandler">The reply handler.</param>
        </member>
        <member name="M:Managed.Adb.Client.AddRequestId(System.Int32,Managed.Adb.ChunkHandler)">
            <summary>
            Adds the request id.
            </summary>
            <param name="id">The id.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Managed.Adb.Client.RemoveRequestId(System.Int32)">
            <summary>
            Removes the request id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Managed.Adb.Client.IsResponseToUs(System.Int32)">
            <summary>
            Determines whether [is response to us] [the specified id].
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Client.PacketFailed(System.Object)">
            <summary>
            Packets the failed.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Managed.Adb.Client.DdmSeen">
            <summary>
            DDMs the seen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Client.Close(System.Boolean)">
            <summary>
            Closes the specified notify.
            </summary>
            <param name="notify">if set to <c>true</c> [notify].</param>
        </member>
        <member name="M:Managed.Adb.Client.Update(Managed.Adb.ClientChangeMask)">
            <summary>
            Updates the specified change mask.
            </summary>
            <param name="changeMask">The change mask.</param>
        </member>
        <member name="M:Managed.Adb.Client.Read">
            <summary>
            Reads this instance.
            </summary>
        </member>
        <member name="M:Managed.Adb.Client.GetJdwpPacket">
            <summary>
            Gets the JDWP packet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Client.ForwardPacketToClient(System.Object)">
            <summary>
            Forwards the packet to client.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Managed.Adb.Client.SendHandshake">
            <summary>
            Sends the handshake.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Client.SendAndConsume(System.Object)">
            <summary>
            Sends the and consume.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Managed.Adb.Client.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Managed.Adb.ClientData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.PRE_INITIALIZED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.DebuggerStatus.DEFAULT">
            <summary>
            Debugger connection status: not waiting on one, not connected to one, but accepting
            new connections. This is the default value.
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.DebuggerStatus.WAITING">
            <summary>
            Debugger connection status: the application's VM is paused, waiting for a debugger to connect to it before resuming.
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.DebuggerStatus.ATTACHED">
            <summary>
            Debugger connection status : Debugger is connected
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.DebuggerStatus.ERROR">
            <summary>
            Debugger connection status: The listening port for debugger connection failed to listen.
            No debugger will be able to connect. 
            </summary>
        </member>
        <member name="T:Managed.Adb.ClientData.AllocationTrackingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.AllocationTrackingStatus.UNKNOWN">
            <summary>
            Allocation tracking status: unknown.
            This happens right after a {@link Client} is discovered
            by the {@link AndroidDebugBridge}, and before the {@link Client} answered the query
            regarding its allocation tracking status.
            @see Client#requestAllocationStatus()
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.AllocationTrackingStatus.OFF">
            <summary>
            Allocation tracking status: the {@link Client} is not tracking allocations.
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.AllocationTrackingStatus.ON">
            <summary>
            Allocation tracking status: the {@link Client} is tracking allocations.
            </summary>
        </member>
        <member name="T:Managed.Adb.ClientData.MethodProfilingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.MethodProfilingStatus.UNKNOWN">
            <summary>
            Method profiling status: unknown.
            This happens right after a {@link Client} is discovered
            by the {@link AndroidDebugBridge}, and before the {@link Client} answered the query
            regarding its method profiling status.
            @see Client#requestMethodProfilingStatus()
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.MethodProfilingStatus.OFF">
            <summary>
             Method profiling status: the {@link Client} is not profiling method calls.
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.MethodProfilingStatus.ON">
            <summary>
            Method profiling status: the {@link Client} is profiling method calls.
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.HEAP_MAX_SIZE_BYTES">
            <summary>
            Name of the value representing the max size of the heap, in the Map returned by
            GetVmHeapInfo(int)
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.HEAP_SIZE_BYTES">
            <summary>
            Name of the value representing the size of the heap, in the {@link Map} returned by
            {@link #getVmHeapInfo(int)}
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.HEAP_BYTES_ALLOCATED">
            <summary>
            Name of the value representing the number of allocated bytes of the heap, in the
            {@link Map} returned by {@link #getVmHeapInfo(int)}
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.HEAP_OBJECTS_ALLOCATED">
            <summary>
            Name of the value representing the number of objects in the heap, in the {@link Map}
            returned by {@link #getVmHeapInfo(int)}
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.FEATURE_PROFILING">
            <summary>
            String for feature enabling starting/stopping method profiling
            @see #hasFeature(String)
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.FEATURE_PROFILING_STREAMING">
            <summary>
            String for feature enabling direct streaming of method profiling data
            @see #hasFeature(String)
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.FEATURE_HPROF">
            <summary>
            String for feature allowing to dump hprof files
            @see #hasFeature(String)
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientData.FEATURE_HPROF_STREAMING">
            <summary>
            String for feature allowing direct streaming of hprof dumps
            @see #hasFeature(String)		/// </summary>
        </member>
        <member name="M:Managed.Adb.ClientData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.ClientData"/> class.
            </summary>
            <param name="pid">The pid.</param>
        </member>
        <member name="P:Managed.Adb.ClientData.Pid">
            <summary>
            Gets the pid.
            </summary>
        </member>
        <member name="P:Managed.Adb.ClientData.DebuggerInterest">
            <summary>
            Gets or sets the debugger interest.
            </summary>
            <value>
            The debugger interest.
            </value>
        </member>
        <member name="P:Managed.Adb.ClientData.IsDdmAware">
            <summary>
            Gets or sets a value indicating whether this instance is DDM aware.
            </summary>
            <value>
            	<c>true</c> if this instance is DDM aware; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.ClientData.VmIdentifier">
            <summary>
            Gets or sets the vm identifier.
            </summary>
            <value>
            The vm identifier.
            </value>
        </member>
        <member name="P:Managed.Adb.ClientData.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Managed.Adb.ClientData.DebuggerConnectionStatus">
            <summary>
            Gets or sets the debugger connection status.
            </summary>
            <value>
            The debugger connection status.
            </value>
        </member>
        <member name="T:Managed.Adb.ColorData">
            <summary>
            
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="P:Managed.Adb.ColorData.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Managed.Adb.ColorData.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="T:Managed.Adb.Conversion.BigEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from big-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Managed.Adb.Conversion.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Managed.Adb.Conversion.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:Managed.Adb.Conversion.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal">
            <summary>
            Private class used for manipulating sequences of decimal digits.
            </summary>
        </member>
        <member name="F:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal.digits">
            <summary>Digits in the decimal expansion, one byte per digit</summary>
        </member>
        <member name="F:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:Managed.Adb.Conversion.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Managed.Adb.Conversion.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:Managed.Adb.Conversion.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:Managed.Adb.Conversion.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:Managed.Adb.Conversion.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:Managed.Adb.Conversion.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:Managed.Adb.Conversion.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:Managed.Adb.Conversion.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:Managed.Adb.Conversion.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:Managed.Adb.Conversion.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="T:Managed.Adb.Conversion.Endianness">
            <summary>
            Endianness of a converter
            </summary>
        </member>
        <member name="F:Managed.Adb.Conversion.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:Managed.Adb.Conversion.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:Managed.Adb.Conversion.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Managed.Adb.Conversion.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Conversion.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Managed.Adb.Conversion.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:Managed.Adb.Exceptions.AdbCommandRejectedException">
            <summary>
            Exception thrown when adb refuses a command.
            </summary>
        </member>
        <member name="T:Managed.Adb.Exceptions.CommandAbortingException">
            <summary>
            Thrown when an executed command identifies that it is being aborted.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.CommandAbortingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.CommandAbortingException"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.CommandAbortingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.CommandAbortingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.CommandAbortingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.CommandAbortingException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.CommandAbortingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.CommandAbortingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Managed.Adb.Exceptions.UnknownOptionException">
            <summary>
            Thrown when a command has an unknown option passed
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.UnknownOptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.UnknownOptionException"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.UnknownOptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.UnknownOptionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.UnknownOptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.UnknownOptionException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.UnknownOptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.UnknownOptionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Managed.Adb.Exceptions.AdbException">
            <summary>
            Represents an exception with communicating with ADB
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.AdbException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.AdbException"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.AdbException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.AdbException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.AdbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.AdbException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.AdbException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.AdbException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Managed.Adb.Exceptions.DeviceNotFoundException">
            <summary>
            Unable to connect to the device because it was not found in the list of available devices.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.DeviceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.DeviceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.DeviceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.DeviceNotFoundException"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Managed.Adb.Exceptions.PackageInstallationException">
            <summary>
            An exception while installing a package on the device
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.PackageInstallationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PackageInstallationException"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.PackageInstallationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PackageInstallationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.PackageInstallationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PackageInstallationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.PackageInstallationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PackageInstallationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="M:Managed.Adb.Exceptions.PermissionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PermissionDeniedException"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.PermissionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PermissionDeniedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.PermissionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PermissionDeniedException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Managed.Adb.Exceptions.PermissionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.PermissionDeniedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Managed.Adb.Exceptions.BadPacketException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.BadPacketException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.BadPacketException"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Exceptions.BadPacketException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Exceptions.BadPacketException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="T:Managed.Adb.ManagedAdbExtenstions">
            <ignore>true</ignore>
            <ignore>true</ignore>
            <ignore>true</ignore>
            <ignore>true</ignore>
            <ignore>true</ignore>
            <ignore>true</ignore>
            <ignore>true</ignore>
            <ignore>true</ignore>
            <ignore>true</ignore>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ReverseBytes(System.UInt16)">
            <summary>
            Reverses the bytes.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ReverseBytes(System.UInt32)">
            <summary>
            Reverses the bytes.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ReverseBytes(System.UInt64)">
            <summary>
            Reverses the bytes.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IntReverseForRawImage(System.Byte[],System.Action{System.Byte[]})">
            <summary>
            Ints the reverse for raw image.
            </summary>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.BitShiftRight(System.Int32,System.Int32)">
            <summary>
            Bits the shift right.
            </summary>
            <param name="value">The value.</param>
            <param name="bits">The bits.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.BitShiftRight(System.Int16,System.Int32)">
            <summary>
            Bits the shift right.
            </summary>
            <param name="value">The value.</param>
            <param name="bits">The bits.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.BitShiftRight(System.Int64,System.Int32)">
            <summary>
            Bits the shift right.
            </summary>
            <param name="value">The value.</param>
            <param name="bits">The bits.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.Int32)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.UInt32)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.Int16)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.UInt16)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.Int64)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.UInt64)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.Byte)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToEnum``1(System.SByte)">
            <summary>
            Converts the value to enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ReverseByteArray(System.Byte[])">
            <summary>
            Reverses the byte array.
            </summary>
            <param name="inArray">The in array.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttributes``1(System.Type)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttributes``1(System.Reflection.Module)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="module">The module.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttributes``1(System.Reflection.MethodInfo)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttributes``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pi">The pi.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pi">The pi.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttributes``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fi">The fi.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttribute``1(System.Type)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttribute``1(System.Reflection.Module)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="module">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mi">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mi">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pi">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pi">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetCustomAttribute``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fi">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Gets member info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="members">The members.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Gets field info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Module})">
            <summary>
            Gets module info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="modules">The modules.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Gets method info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methods">The methods.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Gets parameter info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Gets property info that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets types that have the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetMethodsOfReturnType``1(System.Type)">
            <summary>
            Gets the methods that have the specified return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetMethodsOfReturnType``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the methods that have the specified return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.Swap32bitsToArray(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Swaps an unsigned value around, and puts the result in an array that can be sent to a device.
            </summary>
            <param name="value">The value to swap.</param>
            <param name="dest">the destination array</param>
            <param name="offset">offset the offset in the array where to put the swapped value.</param>
            <remarks>Array length must be at least offset + 4</remarks>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.Swap32bitFromArray(System.Byte[],System.Int32)">
            <summary>
            Reads a signed 32 bit integer from an array coming from a device.
            </summary>
            <param name="value">the array containing the int</param>
            <param name="offset">the offset in the array at which the int starts</param>
            <returns>the integer read from the array</returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.SwapU16bitFromArray(System.Byte[],System.Int32)">
            <summary>
            Reads an unsigned 16 bit integer from an array coming from a device,
            and returns it as an 'int'
            </summary>
            <param name="value">the array containing the 16 bit int (2 byte).</param>
            <param name="offset">the offset in the array at which the int starts</param>
            <remarks>Array length must be at least offset + 2</remarks>
            <returns>the integer read from the array.</returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.Swap64bitFromArray(System.Byte[],System.Int32)">
            <summary>
            Reads a signed 64 bit integer from an array coming from a device.
            </summary>
            <param name="value">the array containing the int</param>
            <param name="offset">the offset in the array at which the int starts</param>
            <remarks>Array length must be at least offset + 8</remarks>
            <returns>the integer read from the array</returns>
        </member>
        <member name="F:Managed.Adb.ManagedAdbExtenstions.Epoch">
            <summary>
            Gets EPOCH time
            </summary>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetEpoch(System.DateTime)">
            <summary>
            Gets epoch time.
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.CurrentTimeMillis(System.DateTime)">
            <summary>
            Currents the time millis.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToUnixEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to Unix Epoch
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromUnixEpoch(System.Int32)">
            <summary>
            Creates a DateTime from the seconds since Epoch
            </summary>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromString(System.String)">
            <summary>
            Creates a DateTime from a string
            </summary>
            <param name="dateString">The date string.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromString(System.String,System.IFormatProvider)">
            <summary>
            Creates a DateTime from a string
            </summary>
            <param name="dateString">The date string.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromString(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Creates a DateTime from a string
            </summary>
            <param name="dateString">The date string.</param>
            <param name="format">The format.</param>
            <param name="styles">The styles.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromBinary(System.Int64)">
            <summary>
            Creates a DateTime from a binary value
            </summary>
            <param name="dateData">The date data.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromFileTime(System.Int64)">
            <summary>
            Creates a DateTime from a file time
            </summary>
            <param name="fileTime">The file time.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromFileTimeUtc(System.Int64)">
            <summary>
            Creates a DateTime from a file time UTC
            </summary>
            <param name="fileTime">The file time.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToDateTimeFromOADate(System.Double)">
            <summary>
            Creates a DateTime from an OA Date
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsDirectory(System.String)">
            <summary>
            Determines whether the specified path is directory.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is directory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsDirectory(System.IO.FileSystemInfo)">
            <summary>
            Determines whether the specified fsi is directory.
            </summary>
            <param name="fsi">The fsi.</param>
            <returns>
              <c>true</c> if the specified fsi is directory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsFile(System.String)">
            <summary>
            Determines whether the specified path is file.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is file; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsFile(System.IO.FileSystemInfo)">
            <summary>
            Determines whether the specified fsi is file.
            </summary>
            <param name="fsi">The fsi.</param>
            <returns>
              <c>true</c> if the specified fsi is file; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetFileSystemInfo(System.String)">
            <summary>
            Gets the file system info.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.Combine(System.String[])">
            <summary>
            Combines the specified paths.
            </summary>
            <remarks>This wraps the normal System.IO.Path.Combine to allow for an unlimited list of paths to combine</remarks>
            <param name="paths">The paths.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.With(System.String,System.Object[])">
            <summary>
            Formats the string with the specified arguments
            </summary>
            <param name="s">The string.</param>
            <param name="args">The arguments.</param>
            <returns>The newly formatted string.</returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetBytes(System.String)">
            <summary>
            Gets the bytes from a string.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Gets the bytes from a string.
            </summary>
            <param name="str">The string.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetBytes(System.String,System.String)">
            <summary>
            Gets the bytes from a string.
            </summary>
            <param name="str">The string.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToHex(System.Byte)">
            <summary>
            Converts a byte to the Hex value
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.ToHex(System.Byte[])">
            <summary>
            Converts a byte to the Hex value
            </summary>
            <param name="byteArray">The byte array.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetString(System.Byte[])">
            <summary>
            Gets the string from a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Gets the string from a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetString(System.Byte[],System.String)">
            <summary>
            Gets the string from a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the string from a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Gets the string from a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.GetString(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Gets the string from a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether [is null or white space] [the specified source].
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is null or white space] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.Match(System.String,System.String)">
            <summary>
            Matches the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Matches the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="pattern">The pattern.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsMatch(System.String,System.String)">
            <summary>
            Determines whether the specified source is match.
            </summary>
            <param name="source">The source.</param>
            <param name="pattern">The pattern.</param>
            <returns>
              <c>true</c> if the specified source is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.ManagedAdbExtenstions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Determines whether the specified source is match.
            </summary>
            <param name="source">The source.</param>
            <param name="pattern">The pattern.</param>
            <param name="options">The options.</param>
            <returns>
              <c>true</c> if the specified source is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Managed.Adb.IO.BEBinaryReader">
            <summary> 
            Big-Endian Binary Reader 
            </summary> 
            <ignore>true</ignore>
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryReader.ReadInt16">
            <summary> 
            Reads a 2-byte signed integer from the current stream and advances the  
            current position of the stream by two bytes. 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryReader.ReadInt32">
            <summary> 
            Reads a 4-byte signed integer from the current stream and advances the  
            current position of the stream by four bytes. 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryReader.ReadInt64">
            <summary> 
            Reads an 8-byte signed integer from the current stream and advances  
            the current position of the stream by four bytes. 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryReader.ReadSingle">
            <summary> 
            Reads a 4-byte floating point value from the current stream and  
            advances the current position of the stream by four bytes. 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryReader.ReadDouble">
            <summary> 
            Reads an 8-byte floating point value from the current stream and  
            advances the current position of the stream by eight bytes. 
            </summary> 
            <returns></returns> 
        </member>
        <member name="T:Managed.Adb.IO.BEBinaryWriter">
            <summary> 
            Big-Endian Binary Writer 
            </summary> 
            <ignore>true</ignore>
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryWriter.Write(System.Int16)">
            <summary> 
            Writes a two-byte signed integer to the current stream and advances the stream  
            position by two bytes. 
            </summary> 
            <param name="value"></param> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryWriter.Write(System.Int32)">
            <summary> 
            Writes a four-byte signed integer to the current stream and advances the stream  
            position by four bytes. 
            </summary> 
            <param name="value"></param> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryWriter.Write(System.Int64)">
            <summary> 
            Writes an eight-byte signed integer to the current stream and advances the stream  
            position by eight bytes. 
            </summary> 
            <param name="value"></param> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryWriter.Write(System.Single)">
            <summary> 
            Writes a four-byte floating-point value to the current stream and advances the  
            stream position by four bytes. 
            </summary> 
            <param name="value"></param> 
        </member>
        <member name="M:Managed.Adb.IO.BEBinaryWriter.Write(System.Double)">
            <summary> 
            Writes an eight-byte floating-point value to the current stream and advances  
            the stream position by eight bytes. 
            </summary> 
            <param name="value"></param> 
        </member>
        <member name="T:Managed.Adb.IO.ByteBuffer">
            <summary>
            Summary description for ByteBuffer.
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.#ctor(System.Byte[],Managed.Adb.IO.ByteOrder)">
            Constructor
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.length">
            <summary>
            Return length as int, o/w, we can use Length (long) directly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Skip(System.Int32)">
            <summary>
            Skip bytes
            </summary>
            <param name="count">How many bytes to skip</param>
            <returns>Actual bytes skipped</returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Skip">
            <summary>
            Skip one byte
            </summary>
            <returns>Actual bytes skipped</returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(Managed.Adb.IO.ByteBuffer)">
            <summary>
            ByteBuffer
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Byte)">
            <summary>
            Byte
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Byte[])">
            <summary>
            Bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Int16)">
            <summary>
            Short
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Int32)">
            <summary>
            Int
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Int64)">
            <summary>
            Long
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Single)">
            <summary>
            Float
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Double)">
            <summary>
            Double
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.String)">
            <summary>
            String
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Write(System.Boolean)">
            <summary>
            Boolean
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.ByteBuffer.Wrap(System.Byte[])">
            Public Class Methods
        </member>
        <member name="T:Managed.Adb.IO.ByteOrder">
            <summary>
            
            </summary>
            <ignore>true</ignore>
        </member>
        <member name="F:Managed.Adb.IO.ByteOrder.BIG_ENDIAN">
            <summary>
            The big endian
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.ByteOrder.LITTLE_ENDIAN">
            <summary>
            The little endian
            </summary>
        </member>
        <member name="P:Managed.Adb.IO.ByteOrder.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Managed.Adb.IO.ByteOrder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Managed.Adb.IO.LinuxPath">
            <summary>
            Just like System.IO.Path, except it is geared for Linux
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.ESCAPEPATTERN">
            <summary>
            Pattern to escape filenames for shell command consumption.
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.DirectorySeparatorChar">
            <summary>
            The directory separator character
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.AltDirectorySeparatorChar">
            <summary>
            The directory separator alternate character
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.InvalidFileNameChars">
            <summary>
            Invalid characters for a file name
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.MAX_DIRECTORY_PATH">
            <summary>
            The max length of a directory path
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.MAX_PATH">
            <summary>
            the max length of a file path
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.MaxPath">
            <summary>
            the max length of a file path
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.PathSeparator">
            <summary>
            The character used to separate multiple paths
            </summary>
        </member>
        <member name="F:Managed.Adb.IO.LinuxPath.RealInvalidPathChars">
            <summary>
            Invalid characters for a file/directory path
            </summary>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.CanPathCircumventSecurityNative(System.String)">
            <summary>
            Determines whether this instance [can path circumvent security native] the specified part of path.
            </summary>
            <param name="partOfPath">The part of path.</param>
            <returns>
              <c>true</c> if this instance [can path circumvent security native] the specified part of path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.ChangeExtension(System.String,System.String)">
            <summary>Changes the extension of a path string.</summary>
            <returns>A string containing the modified path information.On Windows-based desktop platforms, if path is null or an empty string (""), the path information is returned unmodified. If extension is null, the returned string contains the specified path with its extension removed. If path has no extension, and extension is not null, the returned path string contains extension appended to the end of path.</returns>
            <param name="extension">The new extension (with a leading period). Specify null to remove an existing extension from path. </param>
            <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>. </param>
            <exception cref="T:System.ArgumentException">The path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.CharArrayStartsWithOrdinal(System.Char*,System.Int32,System.String,System.Boolean)">
            <summary>
            Checks if the char array starts with ordinal
            </summary>
            <param name="array">The array.</param>
            <param name="numChars">The num chars.</param>
            <param name="compareTo">The compare to.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.CharArrayStartsWithOrdinal(System.Char[],System.Int32,System.String,System.Boolean)">
            <summary>
            Checks if the char array starts with ordinal
            </summary>
            <param name="array">The array.</param>
            <param name="numChars">The num chars.</param>
            <param name="compareTo">The compare to.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.CheckInvalidPathChars(System.String)">
            <summary>
            Checks the invalid path chars.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.Combine(System.String,System.String)">
            <summary>Combines two path strings.</summary>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
            <param name="path2">The second path. </param>
            <param name="path1">The first path. </param>
            <exception cref="T:System.ArgumentNullException">path1 or path2 is null. </exception>
            <exception cref="T:System.ArgumentException">path1 or path2 contain one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character. </exception>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.Combine(System.String,System.String,System.String)">
            <summary>
            Combine the specified paths to form one path
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <param name="path3">The path3.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.Combine(System.String,System.String,System.String,System.String)">
            <summary>
            Combine the specified paths to form one path
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <param name="path3">The path3.</param>
            <param name="path4">The path4.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.Combine(System.String[])">
            <summary>
            Combine the specified paths to form one path
            </summary>
            <param name="paths">The paths.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.CombineNoChecks(System.String,System.String)">
            <summary>
            Combines the path with no checks.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path string.</summary>
            <returns>A <see cref="T:System.String"></see> containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns <see cref="F:System.String.Empty"></see> if path does not contain directory information.</returns>
            <param name="path">The path of a file or directory. </param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetPathWithoutFile(System.String)">
            <summary>
            Gets the path without file name.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.FixupPath(System.String)">
            <summary>
            Fixups the path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetExtension(System.String)">
            <summary>Returns the extension of the specified path string.</summary>
            <returns>A <see cref="T:System.String"></see> containing the extension of the specified path (including the "."), null, or <see cref="F:System.String.Empty"></see>. If path is null, GetExtension returns null. If path does not have extension information, GetExtension returns Empty.</returns>
            <param name="path">The path string from which to get the extension. </param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetFileName(System.String)">
            <summary>Returns the file name and extension of the specified path string.</summary>
            <returns>A <see cref="T:System.String"></see> consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns <see cref="F:System.String.Empty"></see>. If path is null, this method returns null.</returns>
            <param name="path">The path string from which to obtain the file name and extension. </param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetFileNameWithoutExtension(System.String)">
            <summary>Returns the file name of the specified path string without the extension.</summary>
            <returns>A <see cref="T:System.String"></see> containing the string returned by <see cref="M:System.IO.Path.GetFileName(System.String)"></see>, minus the last period (.) and all characters following it.</returns>
            <param name="path">The path of the file. </param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetInvalidFileNameChars">
            <summary>Gets an array containing the characters that are not allowed in file names.</summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetInvalidPathChars">
            <summary>Gets an array containing the characters that are not allowed in path names.</summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetPathRoot(System.String)">
            <summary>Gets the root directory information of the specified path.</summary>
            <returns>A string containing the root directory of path, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.</returns>
            <param name="path">The path from which to obtain root directory information. </param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character.-or- <see cref="F:System.String.Empty"></see> was passed to path. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.GetRootLength(System.String)">
            <summary>
            Gets the length of the root.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.HasExtension(System.String)">
            <summary>Determines whether a path includes a file name extension.</summary>
            <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
            <param name="path">The path to search for an extension. </param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.InternalCombine(System.String,System.String)">
            <summary>
            Combine the specified paths to form one path
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.IsPathRooted(System.String)">
            <summary>Gets a value indicating whether the specified path string contains absolute or relative path information.</summary>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
            <param name="path">The path to test. </param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"></see>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.Escape(System.String)">
            <summary>
            Returns an escaped version of the entry name.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.LinuxPath.Quote(System.String)">
            <summary>
            Quotes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:Managed.Adb.IO.Rgb565">
            <summary>
            A class that represents Rgb565 Image information
            </summary>
        </member>
        <member name="M:Managed.Adb.IO.Rgb565.ToImage(System.Drawing.Imaging.PixelFormat,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the Image from the raw image data
            </summary>
            <param name="format">The format.</param>
            <param name="data">The data.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.Rgb565.ToImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the data to an image
            </summary>
            <param name="data">The data.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.Rgb565.ToRgb565(System.Drawing.Image,System.String)">
            <summary>
            Saves the image as an Rgb565 bitmap to disk
            </summary>
            <param name="image">The image.</param>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.IO.Rgb565.ToRgb565(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Saves the image as an Rgb565 bitmap to the specified stream
            </summary>
            <param name="image">The image.</param>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Logs.ILogListener.NewEntry(Managed.Adb.Logs.LogEntry)">
            <summary>
            Sent when a new LogEntry has been parsed by the LogReceiver.
            </summary>
            <param name="entry">entry the new log entry.</param>
        </member>
        <member name="M:Managed.Adb.Logs.ILogListener.NewData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sent when new raw data is coming from the log service.
            </summary>
            <param name="data">the raw data buffer.</param>
            <param name="offset">the offset into the buffer signaling the beginning of the new data.</param>
            <param name="length">the length of the new data.</param>
        </member>
        <member name="T:Managed.Adb.RawImage">
            <summary>
            Data representing an image taken from a device frame buffer.
            </summary>
        </member>
        <member name="M:Managed.Adb.RawImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.RawImage"/> class.
            </summary>
        </member>
        <member name="P:Managed.Adb.RawImage.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Bpp">
            <summary>
            Gets or sets the BPP.
            </summary>
            <value>
            The BPP.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Red">
            <summary>
            Gets or sets the red.
            </summary>
            <value>
            The red.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Blue">
            <summary>
            Gets or sets the blue.
            </summary>
            <value>
            The blue.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Green">
            <summary>
            Gets or sets the green.
            </summary>
            <value>
            The green.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>
            The alpha.
            </value>
        </member>
        <member name="P:Managed.Adb.RawImage.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="M:Managed.Adb.RawImage.ReadHeader(System.Int32,System.IO.BinaryReader)">
            Reads the header of a RawImage from a {@link ByteBuffer}.
            <p/>The way the data is sent over adb is defined in system/core/adb/framebuffer_service.c
            @param version the version of the protocol.
            @param buf the buffer to read from.
            @return true if success
        </member>
        <member name="M:Managed.Adb.RawImage.GetHeaderSize(System.Int32)">
            Returns the size of the header for a specific version of the framebuffer adb protocol.
            @param version the version of the protocol
            @return the number of int that makes up the header.
        </member>
        <member name="M:Managed.Adb.RawImage.GetRotated">
            Returns a rotated version of the image
            The image is rotated counter-clockwise.
        </member>
        <member name="M:Managed.Adb.RawImage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Managed.Adb.RawImage.ToImage(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts this raw image to an Image
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.RawImage.ToImage">
            <summary>
            Converts this raw image to an Image
            </summary>
            <returns></returns>
        </member>
        <member name="T:Managed.Adb.BatteryReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="P:Managed.Adb.BatteryReceiver.BatteryInfo">
            <summary>
            Gets or sets the battery info.
            </summary>
            <value>
            The battery info.
            </value>
        </member>
        <member name="M:Managed.Adb.BatteryReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="M:Managed.Adb.CommandErrorReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.CommandErrorReceiver" /> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.CommandErrorReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="P:Managed.Adb.CommandErrorReceiver.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="T:Managed.Adb.CommandResultReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.CommandResultReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="P:Managed.Adb.CommandResultReceiver.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Managed.Adb.ConsoleOutputReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="P:Managed.Adb.ConsoleOutputReceiver.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Managed.Adb.ConsoleOutputReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="F:Managed.Adb.DdmPreferences.DEFAULT_INITIAL_THREAD_UPDATE">
            Default value for thread update flag upon client connection. 
        </member>
        <member name="F:Managed.Adb.DdmPreferences.DEFAULT_INITIAL_HEAP_UPDATE">
            Default value for heap update flag upon client connection. 
        </member>
        <member name="F:Managed.Adb.DdmPreferences.DEFAULT_SELECTED_DEBUG_PORT">
            Default value for the selected client debug port 
        </member>
        <member name="F:Managed.Adb.DdmPreferences.DEFAULT_DEBUG_PORT_BASE">
            Default value for the debug port base 
        </member>
        <member name="F:Managed.Adb.DdmPreferences.DEFAULT_LOG_LEVEL">
            Default value for the logcat {@link LogLevel} 
        </member>
        <member name="F:Managed.Adb.DdmPreferences.DEFAULT_TIMEOUT">
            Default timeout values for adb connection (milliseconds) 
        </member>
        <member name="T:Managed.Adb.DebugPortManager">
            <summary>
            Centralized point to provide a IDebugPortProvider to ddmlib.
            </summary>
        </member>
        <member name="P:Managed.Adb.DebugPortManager.Provider">
            <summary>
            Gets or sets the IDebugPortProvider that will be used when a new Client requests
            </summary>
        </member>
        <member name="P:Managed.Adb.DebugPortManager.Instance">
            <summary>
            Returns an instance of the debug port manager
            </summary>
        </member>
        <member name="T:Managed.Adb.DeviceMonitor">
            <summary>
            A Device monitor. This connects to the Android Debug Bridge and get device and
            debuggable process information from it.
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceMonitor.TAG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceMonitor.LengthBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceMonitor.LengthBuffer2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.#ctor(Managed.Adb.AndroidDebugBridge)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.DeviceMonitor"/> class.
            </summary>
            <param name="bridge">The bridge.</param>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.Devices">
            <summary>
            Gets the devices.
            </summary>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.DebuggerPorts">
            <summary>
            Gets the debugger ports.
            </summary>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.ClientsToReopen">
            <summary>
            Gets the clients to reopen.
            </summary>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.Server">
            <summary>
            Gets the server.
            </summary>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.IsMonitoring">
            <summary>
            Gets a value indicating whether this instance is monitoring.
            </summary>
            <value>
            	<c>true</c> if this instance is monitoring; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.ConnectionAttemptCount">
            <summary>
            Gets the connection attempt count.
            </summary>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.RestartAttemptCount">
            <summary>
            Gets the restart attempt count.
            </summary>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.HasInitialDeviceList">
            <summary>
            Gets a value indicating whether this instance has initial device list.
            </summary>
            <value>
            	<c>true</c> if this instance has initial device list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.DeviceMonitor.MainAdbConnection">
            <summary>
            Gets or sets the main adb connection.
            </summary>
            <value>
            The main adb connection.
            </value>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.AddClientToDropAndReopen(Managed.Adb.IClient,System.Int32)">
            <summary>
            Adds the client to drop and reopen.
            </summary>
            <param name="client">The client.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.Start">
            <summary>
            Starts the monitoring
            </summary>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.Stop">
            <summary>
            Stops the monitoring
            </summary>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.DeviceMonitorLoop">
            <summary>
            Monitors the devices. This connects to the Debug Bridge
            </summary>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.WaitBeforeContinue">
            <summary>
            Waits before continuing.
            </summary>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.SendDeviceListMonitoringRequest">
            <summary>
            Sends the device list monitoring request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.ProcessIncomingDeviceData(System.Int32)">
            <summary>
            Processes the incoming device data.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.RemoveDevice(Managed.Adb.Device)">
            <summary>
            Removes the device.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.SendDeviceMonitoringRequest(System.Net.Sockets.Socket,Managed.Adb.Device)">
            <summary>
            Sends the device monitoring request.
            </summary>
            <param name="socket">The socket.</param>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.OpenClient(Managed.Adb.Device,System.Int32,System.Int32,Managed.Adb.MonitorThread)">
            <summary>
            Opens the client.
            </summary>
            <param name="device">The device.</param>
            <param name="pid">The pid.</param>
            <param name="port">The port.</param>
            <param name="monitorThread">The monitor thread.</param>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.CreateClient(Managed.Adb.Device,System.Int32,System.Net.Sockets.Socket,System.Int32,Managed.Adb.MonitorThread)">
            <summary>
            Creates the client.
            </summary>
            <param name="device">The device.</param>
            <param name="pid">The pid.</param>
            <param name="socket">The socket.</param>
            <param name="debuggerPort">The debugger port.</param>
            <param name="monitorThread">The monitor thread.</param>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.GetNextDebuggerPort">
            <summary>
            Gets the next debugger port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.AddPortToAvailableList(System.Int32)">
            <summary>
            Adds the port to available list.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.ReadLength(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Reads the length of the next message from a socket.
            </summary>
            <param name="socket">The Socket to read from.</param>
            <param name="buffer"></param>
            <returns>the length, or 0 (zero) if no data is available from the socket.</returns>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.Read(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Reads the specified socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.DeviceMonitor.OpenAdbConnection">
            <summary>
            Attempts to connect to the debug bridge server.
            </summary>
            <returns>a connect socket if success, null otherwise</returns>
        </member>
        <member name="T:Managed.Adb.EnvironmentVariablesReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.EnvironmentVariablesReceiver.ENV_COMMAND">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.EnvironmentVariablesReceiver.ENV_PATTERN">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.EnvironmentVariablesReceiver.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.EnvironmentVariablesReceiver"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Managed.Adb.EnvironmentVariablesReceiver.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="M:Managed.Adb.EnvironmentVariablesReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="M:Managed.Adb.EnvironmentVariablesReceiver.Done">
            <summary>
            Finishes the receiver
            </summary>
        </member>
        <member name="T:Managed.Adb.ChunkHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Managed.Adb.ChunkHandler.ByteOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ChunkHandler.ByteOrder.LittleEndian">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ChunkHandler.ByteOrder.BigEndian">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ChunkHandler.CHUNK_HEADER_LEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ChunkHandler.CHUNK_ORDER">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ChunkHandler.CHUNK_FAIL">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.ChunkHandler.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Managed.Adb.ChunkHandler"/> class from being created.
            </summary>
        </member>
        <member name="M:Managed.Adb.ChunkHandler.ClientReady(Managed.Adb.IClient)">
             Client is ready.  The monitor thread calls this method on all
             handlers when the client is determined to be DDM-aware (usually
             after receiving a HELO response.)
            
             The handler can use this opportunity to initialize client-side
             activity.  Because there's a fair chance we'll want to send a
             message to the client, this method can throw an IOException.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.ClientDisconnected(Managed.Adb.IClient)">
            Client has gone away.  Can be used to clean up any resources
            associated with this client connection.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.HandleChunk(Managed.Adb.IClient,System.Int32,System.Byte[],System.Boolean,System.Int32)">
             Handle an incoming chunk.  The data, of chunk type "type", begins
             at the start of "data" and continues to data.limit().
            
             If "isReply" is set, then "msgId" will be the ID of the request
             we sent to the client.  Otherwise, it's the ID generated by the
             client for this event.  Note that it's possible to receive chunks
             in reply packets for which we are not registered.
            
             The handler may not modify the contents of "data".
        </member>
        <member name="M:Managed.Adb.ChunkHandler.handleUnknownChunk(Managed.Adb.IClient,System.Int32,System.IO.MemoryStream,System.Boolean,System.Int32)">
            Handle chunks not recognized by handlers.  The handleChunk() method
            in sub-classes should call this if the chunk type isn't recognized.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.GetString(System.IO.MemoryStream,System.Int32)">
             Utility function to copy a String out of a ByteBuffer.
            
             This is here because multiple chunk handlers can make use of it,
             and there's nowhere better to put it.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.PutString(System.IO.MemoryStream,System.String)">
            Utility function to copy a String into a ByteBuffer.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.type(System.String)">
            Convert a 4-character string to a 32-bit type.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.name(System.Int32)">
            Convert an integer type to a 4-character string.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.allocBuffer(System.Int32)">
             Allocate a ByteBuffer with enough space to hold the JDWP packet
             header and one chunk header in addition to the demands of the
             chunk being created.
            
             "maxChunkLen" indicates the size of the chunk contents only.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.GetChunkDataBuf(System.IO.MemoryStream)">
            Return the slice of the JDWP packet buffer that holds just the
            chunk data.
        </member>
        <member name="M:Managed.Adb.ChunkHandler.finishChunkPacket(System.Object,System.Int32,System.Int32)">
             Write the chunk header at the start of the chunk.
            
             Pass in the byte buffer returned by JdwpPacket.getPayload().
        </member>
        <member name="M:Managed.Adb.ChunkHandler.checkDebuggerPortForAppName(Managed.Adb.IClient,System.String)">
            Check that the client is opened with the proper debugger port for the
            specified application name, and if not, reopen it.
            @param client
            @param uiThread
            @param appName
            @return
        </member>
        <member name="T:Managed.Adb.ClientChangeMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientChangeMask.ChangeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientChangeMask.ChangeDebuggerStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientChangeMask.ChangeThreadMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientChangeMask.ChangeThreadData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientChangeMask.ChangeHeapMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientChangeMask.ChangeHeapData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ClientChangeMask.ChangeNatvieHeapData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Managed.Adb.ClientEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.ClientEventArgs.#ctor(Managed.Adb.IClient,Managed.Adb.ClientChangeMask)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.ClientEventArgs"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="changeMask">The change mask.</param>
        </member>
        <member name="P:Managed.Adb.ClientEventArgs.ChangeMask">
            <summary>
            Gets the change mask.
            </summary>
            <value>The change mask.</value>
        </member>
        <member name="P:Managed.Adb.ClientEventArgs.Client">
            <summary>
            Gets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="T:Managed.Adb.DeviceState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceState.Recovery">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceState.BootLoader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceState.Offline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceState.Online">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceState.Download">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.DeviceState.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="T:Managed.Adb.Device">
            <summary>
            
            </summary>
        </member>
        <member name="E:Managed.Adb.Device.StateChanged">
            <summary>
            Occurs when [state changed].
            </summary>
        </member>
        <member name="E:Managed.Adb.Device.BuildInfoChanged">
            <summary>
            Occurs when [build info changed].
            </summary>
        </member>
        <member name="E:Managed.Adb.Device.ClientListChanged">
            <summary>
            Occurs when [client list changed].
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.TEMP_DIRECTORY_FOR_INSTALL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.PROP_BUILD_VERSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.PROP_BUILD_API_LEVEL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.PROP_BUILD_CODENAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.PROP_DEBUGGABLE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.FIRST_EMULATOR_SN">
            <summary>
            Serial number of the first connected emulator. 
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.PROP_BUILD_VERSION_NUMBER">
            @deprecated Use {@link #PROP_BUILD_API_LEVEL}. 
        </member>
        <member name="F:Managed.Adb.Device.RE_EMULATOR_SN">
            <summary>
             Emulator Serial Number regexp.
            </summary>
        </member>
        <member name="F:Managed.Adb.Device.RE_DEVICELIST_INFO">
            <summary>
            Device list info regex
            </summary>
            <workitem>21136</workitem>
        </member>
        <member name="F:Managed.Adb.Device.LOG_TAG">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:Managed.Adb.Device._avdName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.Device.#ctor(System.String,Managed.Adb.DeviceState,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.Device"/> class.
            </summary>
            <param name="serial">The serial.</param>
            <param name="state">The state.</param>
            <param name="model">The model.</param>
            <param name="product">The product.</param>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.Device.RetrieveDeviceInfo">
            <summary>
            Retrieves the device info.
            </summary>
        </member>
        <member name="M:Managed.Adb.Device.GetStateFromString(System.String)">
            <summary>
            Get the device state from the string value
            </summary>
            <param name="state">The device state string</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Device.CreateFromAdbData(System.String)">
            <summary>
            Create a device from Adb Device list data
            </summary>
            <param name="data">the line data for the device</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Device.CanBackup">
            <summary>
            Determines whether this device can perform a backup.
            </summary>
            <returns>
              <c>true</c> if this device can perform a backup; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Managed.Adb.Device.Backup">
            <summary>
            Backups this device.
            </summary>
        </member>
        <member name="M:Managed.Adb.Device.CanSU">
            <summary>
            Determines whether this instance can use the SU shell.
            </summary>
            <returns>
              <c>true</c> if this instance can use the SU shell; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Managed.Adb.Device.ClientMonitoringSocket">
            <summary>
            Gets or sets the client monitoring socket.
            </summary>
            <value>
            The client monitoring socket.
            </value>
        </member>
        <member name="P:Managed.Adb.Device.SerialNumber">
            <summary>
            Gets the device serial number
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.Endpoint">
            <summary>
            Gets the TCP endpoint defined when the transport is TCP.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Managed.Adb.Device.AvdName">
            <summary>
            Gets or sets the Avd name.
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.Product">
            <summary>
            Gets the product.
            </summary>
            <value>
            The product.
            </value>
        </member>
        <member name="P:Managed.Adb.Device.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:Managed.Adb.Device.DeviceProperty">
            <summary>
            Gets the device.
            </summary>
            <value>
            The device identifier.
            </value>
        </member>
        <member name="P:Managed.Adb.Device.State">
            <summary>
            Gets the device state
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.MountPoints">
            <summary>
            Gets the device mount points.
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.Properties">
            <summary>
            Returns the device properties. It contains the whole output of 'getprop'
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Managed.Adb.Device.EnvironmentVariables">
            <summary>
            Gets the environment variables.
            </summary>
            <value>The environment variables.</value>
        </member>
        <member name="M:Managed.Adb.Device.GetProperty(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>
            the value or <code>null</code> if the property does not exist.
            </returns>
        </member>
        <member name="M:Managed.Adb.Device.GetProperty(System.String[])">
            <summary>
            Gets the first property that exists in the array of property names.
            </summary>
            <param name="name">The array of property names.</param>
            <returns></returns>
        </member>
        <member name="P:Managed.Adb.Device.FileSystem">
            <summary>
            Gets the file system for this device.
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.BusyBox">
            <summary>
            Gets the busy box object for this device.
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.IsOnline">
            <summary>
            Gets a value indicating whether the device is online.
            </summary>
            <value><c>true</c> if the device is online; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.Device.IsEmulator">
            <summary>
            Gets a value indicating whether this device is emulator.
            </summary>
            <value><c>true</c> if this device is emulator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.Device.IsOffline">
            <summary>
            Gets a value indicating whether this device is offline.
            </summary>
            <value><c>true</c> if this device is offline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.Device.IsBootLoader">
            <summary>
            Gets a value indicating whether this device is in boot loader mode.
            </summary>
            <value>
            	<c>true</c> if this device is in boot loader mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.Device.IsRecovery">
            <summary>
            Gets a value indicating whether this instance is recovery.
            </summary>
            <value>
            	<c>true</c> if this instance is recovery; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.Device.RemountMountPoint(Managed.Adb.MountPoint,System.Boolean)">
            <summary>
            Remounts the mount point.
            </summary>
            <param name="mnt">The mount point.</param>
            <param name="readOnly">if set to <c>true</c> the mount poine will be set to read-only.</param>
        </member>
        <member name="M:Managed.Adb.Device.RemountMountPoint(System.String,System.Boolean)">
            <summary>
            Remounts the mount point.
            </summary>
            <param name="mountPoint">the mount point</param>
            <param name="readOnly">if set to <c>true</c> the mount poine will be set to read-only.</param>
            <exception cref="T:System.IO.IOException">Throws if the mount point does not exist.</exception>
        </member>
        <member name="M:Managed.Adb.Device.RefreshMountPoints">
            <summary>
            Refreshes the mount points.
            </summary>
        </member>
        <member name="M:Managed.Adb.Device.RefreshEnvironmentVariables">
            <summary>
            Refreshes the environment variables.
            </summary>
        </member>
        <member name="M:Managed.Adb.Device.RefreshProperties">
            <summary>
            Refreshes the properties.
            </summary>
        </member>
        <member name="M:Managed.Adb.Device.Reboot(System.String)">
            <summary>
            Reboots the device in to the specified state
            </summary>
            <param name="into">The reboot state</param>
        </member>
        <member name="M:Managed.Adb.Device.Reboot">
            <summary>
            Reboots the device in to the specified state
            </summary>
        </member>
        <member name="M:Managed.Adb.Device.GetBatteryInfo">
            <summary>
            Gets the battery level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.Device.GetBatteryInfo(System.Int64)">
            <summary>
            Gets the battery level.
            </summary>
            <param name="freshness">The freshness.</param>
            <returns></returns>
        </member>
        <member name="P:Managed.Adb.Device.HasClients">
            <summary>
            Gets a value indicating whether this instance has clients.
            </summary>
            <value>
            	<c>true</c> if this instance has clients; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.Device.Clients">
            <summary>
            Gets the list of clients
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.SyncService">
            <summary>
            Returns a <see cref="P:Managed.Adb.Device.SyncService"/> object to push / pull files to and from the device.
            </summary>
            <value></value>
            <remarks>
            	<code>null</code> if the SyncService couldn't be created. This can happen if adb
            refuse to open the connection because the {@link IDevice} is invalid (or got disconnected).
            </remarks>
            <exception cref="T:System.IO.IOException">Throws IOException if the connection with adb failed.</exception>
        </member>
        <member name="P:Managed.Adb.Device.PackageManager">
            <summary>
            Returns a <see cref="P:Managed.Adb.Device.PackageManager"/> for this device.
            </summary>
        </member>
        <member name="P:Managed.Adb.Device.FileListingService">
            <summary>
            Returns a <see cref="P:Managed.Adb.Device.FileListingService"/> for this device.
            </summary>
            <value></value>
        </member>
        <member name="P:Managed.Adb.Device.Screenshot">
            <summary>
            Takes a screen shot of the device and returns it as a <see cref="T:Managed.Adb.RawImage"/>
            </summary>
            <value>The screenshot.</value>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32)">
            <summary>
            Executes a shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command.</param>
            <param name="receiver">The receiver.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Object[])">
            <summary>
            Executes a shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command.</param>
            <param name="receiver">The receiver.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32,System.Object[])">
            <summary>
            Executes a shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command.</param>
            <param name="receiver">The receiver.</param>
            <param name="timeout">The timeout.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32)">
            <summary>
            Executes a shell command on the device as root, and sends the result to a receiver.
            </summary>
            <param name="command">The command.</param>
            <param name="receiver">The receiver.</param>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the device as root, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Object[])">
            <summary>
            Executes a root shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command.</param>
            <param name="receiver">The receiver.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.Device.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32,System.Object[])">
            <summary>
            Executes a root shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command.</param>
            <param name="receiver">The receiver.</param>
            <param name="timeout">The timeout.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.Device.RunEventLogService(Managed.Adb.Logs.LogReceiver)">
            <summary>
            Runs the event log service.
            </summary>
            <param name="receiver">The receiver.</param>
        </member>
        <member name="M:Managed.Adb.Device.RunLogService(System.String,Managed.Adb.Logs.LogReceiver)">
            <summary>
            Runs the log service.
            </summary>
            <param name="logname">The logname.</param>
            <param name="receiver">The receiver.</param>
        </member>
        <member name="M:Managed.Adb.Device.CreateForward(System.Int32,System.Int32)">
            <summary>
            Creates a port forwarding between a local and a remote port.
            </summary>
            <param name="localPort">the local port to forward</param>
            <param name="remotePort">the remote port.</param>
            <returns><code>true</code> if success.</returns>
        </member>
        <member name="M:Managed.Adb.Device.RemoveForward(System.Int32)">
            <summary>
            Removes a port forwarding between a local and a remote port.
            </summary>
            <param name="localPort">the local port to forward</param>
            <param name="remotePort">the remote port.</param>
            <returns><code>true</code> if success.</returns>
        </member>
        <member name="M:Managed.Adb.Device.InstallPackage(System.String,System.Boolean)">
            <summary>
            Installs an Android application on device.
            This is a helper method that combines the syncPackageToDevice, installRemotePackage,
            and removePackage steps
            </summary>
            <param name="packageFilePath">the absolute file system path to file on local host to install</param>
            <param name="reinstall">set to <code>true</code>if re-install of app should be performed</param>
        </member>
        <member name="M:Managed.Adb.Device.SyncPackageToDevice(System.String)">
            <summary>
            Pushes a file to device
            </summary>
            <param name="localFilePath">the absolute path to file on local host</param>
            <returns>destination path on device for file</returns>
            <exception cref="T:System.IO.IOException">if fatal error occurred when pushing file</exception>
        </member>
        <member name="M:Managed.Adb.Device.InstallRemotePackage(System.String,System.Boolean)">
            <summary>
            Installs the application package that was pushed to a temporary location on the device.
            </summary>
            <param name="remoteFilePath">absolute file path to package file on device</param>
            <param name="reinstall">set to <code>true</code> if re-install of app should be performed</param>
        </member>
        <member name="M:Managed.Adb.Device.RemoveRemotePackage(System.String)">
            <summary>
            Remove a file from device
            </summary>
            <param name="remoteFilePath">path on device of file to remove</param>
            <exception cref="T:System.IO.IOException">if file removal failed</exception>
        </member>
        <member name="M:Managed.Adb.Device.UninstallPackage(System.String)">
            <summary>
            Uninstall an package from the device.
            </summary>
            <param name="packageName">Name of the package.</param>
            <exception cref="T:System.IO.IOException"></exception>
              
            <exception cref="!:PackageInstallException"></exception>
        </member>
        <member name="M:Managed.Adb.Device.OnStateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:StateChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.Device.OnBuildInfoChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BuildInfoChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.Device.OnClientListChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ClientListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Managed.Adb.DeviceEventArgs.#ctor(Managed.Adb.IDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.DeviceEventArgs"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Managed.Adb.DeviceEventArgs.Device">
            <summary>
            Gets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_OK">
            Result code for transfer success. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_CANCELED">
            Result code for canceled transfer 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_UNKNOWN_ERROR">
            Result code for unknown error 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_CONNECTION_ERROR">
            Result code for network connection error 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_NO_REMOTE_OBJECT">
            Result code for unknown remote object during a pull 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_TARGET_IS_FILE">
            Result code when attempting to pull multiple files into a file 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_NO_DIR_TARGET">
            Result code when attempting to pull multiple into a directory that does not exist. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_REMOTE_PATH_ENCODING">
            Result code for wrong encoding on the remote path. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_REMOTE_PATH_LENGTH">
            Result code for remote path that is too long. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_FILE_WRITE_ERROR">
            Result code for error while writing local file. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_FILE_READ_ERROR">
            Result code for error while reading local file. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_NO_LOCAL_FILE">
            Result code for attempting to push a file that does not exist. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_LOCAL_IS_DIRECTORY">
            Result code for attempting to push a directory. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_REMOTE_IS_FILE">
            Result code for when the target path of a multi file push is a file. 
        </member>
        <member name="F:Managed.Adb.ErrorCodeHelper.RESULT_BUFFER_OVERRUN">
            Result code for receiving too much data from the remove device at once 
        </member>
        <member name="T:Managed.Adb.FileEntry">
            <summary>
            Represents a file entry on a device
            </summary>
        </member>
        <member name="M:Managed.Adb.FileEntry.FindOrCreate(Managed.Adb.Device,System.String)">
            <summary>
            Finds the file entry, or creates an empty FileEntry if it does not exist.
            </summary>
            <param name="device">The device.</param>
            <param name="path">The path.</param>
            <remarks>This does not create the FileEntry on disk. It only creates the FileEntry object.</remarks>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.FileEntry.Find(Managed.Adb.Device,System.String)">
            <summary>
            Gets a file entry from the specified path on the device.
            </summary>
            <param name="device">The device to check</param>
            <param name="path">the path to check</param>
            <exception cref="T:System.IO.IOException">If the device is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">If the device or path is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the entrty is not found.</exception>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.FileEntry.#ctor(Managed.Adb.Device,Managed.Adb.FileEntry,System.String,Managed.Adb.FileListingService.FileTypes,System.Boolean)">
            <summary>
            Creates a new file entry.
            </summary>
            <param name="device">The device.</param>
            <param name="parent">parent entry or null if entry is root</param>
            <param name="name">name of the entry.</param>
            <param name="type">entry type.</param>
            <param name="isRoot">if set to <c>true</c> [is root].</param>
        </member>
        <member name="M:Managed.Adb.FileEntry.#ctor(Managed.Adb.Device,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.FileEntry"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="path">The path.</param>
        </member>
        <member name="P:Managed.Adb.FileEntry.Device">
            <summary>
            Gets the device associated with this file entry.
            </summary>
        </member>
        <member name="P:Managed.Adb.FileEntry.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:Managed.Adb.FileEntry.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Managed.Adb.FileEntry.LinkName">
            <summary>
            Gets or sets the name of the link.
            </summary>
            <value>
            The name of the link.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Info">
            <summary>
            Gets or sets the info.
            </summary>
            <value>
            The info.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>
            The permissions.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Managed.Adb.FileEntry.IsApplicationPackage">
            <summary>
            Gets a value indicating whether this instance is application package.
            </summary>
            <value>
            	<c>true</c> if this instance is application package; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.IsRoot">
            <summary>
            Gets a value indicating whether this instance is root.
            </summary>
            <value>
              <c>true</c> if this instance is root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.IsExecutable">
            <summary>
            Gets a value indicating whether this instance is executable.
            </summary>
            <value>
            	<c>true</c> if this instance is executable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <remarks>Note that this is not populated by default. Use the FileListingService.GetChildren to populate it.</remarks>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.IsLink">
            <summary>
            Gets a value indicating whether this instance is link.
            </summary>
            <value>
              <c>true</c> if this instance is link; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:Managed.Adb.FileEntry"/> is exists.
            </summary>
            <value>
              <c>true</c> if exists; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.FetchTime">
            <summary>
            Indicates whether the entry content has been fetched yet, or not.
            </summary>
        </member>
        <member name="M:Managed.Adb.FileEntry.Create">
            <summary>
            Creates the file entry, if it does not exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.FileEntry.Delete">
            <summary>
            Deletes the file entry from the file system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.FileEntry.AddChild(Managed.Adb.FileEntry)">
            <summary>
            Adds a child file entry
            </summary>
            <param name="child">The child file entry</param>
        </member>
        <member name="M:Managed.Adb.FileEntry.FindChild(System.String)">
            <summary>
            Returns the child FileEntry matching the name.
            This uses the cached children list.
            </summary>
            <param name="name">the name of the child to return.</param>
            <return>the FileEntry matching the name or null.</return>
        </member>
        <member name="P:Managed.Adb.FileEntry.IsDirectory">
            <summary>
            Gets a value indicating whether this instance is directory.
            </summary>
            <value>
            	<c>true</c> if this instance is directory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.IsApplicationFileName">
            <summary>
            Gets a value indicating whether this instance is application file name.
            </summary>
            <value>
            	<c>true</c> if this instance is application file name; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FileEntry.FullPath">
            <summary>
            Gets the full path of the entry.
            </summary>
        </member>
        <member name="P:Managed.Adb.FileEntry.FullResolvedPath">
            <summary>
            Gets the full resolved path.
            </summary>
        </member>
        <member name="P:Managed.Adb.FileEntry.FullEscapedPath">
            <summary>
            Gets the fully escaped path of the entry. This path is safe to use in a shell command line.
            </summary>
        </member>
        <member name="P:Managed.Adb.FileEntry.PathSegments">
            <summary>
            Gets the path as a list of segments.
            </summary>
        </member>
        <member name="M:Managed.Adb.FileEntry.CheckAppPackageStatus">
            <summary>
            Sets the internal app package status flag. This checks whether the entry is in an app
            directory like /data/app or /system/app or /sd/app or /sd-ext/app. The last two are common for
            apps2sd on rooted phones
            </summary>
        </member>
        <member name="M:Managed.Adb.FileEntry.FillPathSegments(System.Collections.Generic.List{System.String})">
            <summary>
            Recursively fills the segment list with the full path.
            </summary>
            <param name="list">The list of segments to fill.</param>
        </member>
        <member name="M:Managed.Adb.FileEntry.FillPathBuilder(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Recursively fills the pathBuilder with the full path
            </summary>
            <param name="pathBuilder">a StringBuilder used to create the path.</param>
            <param name="escapePath">Whether the path need to be escaped for consumption by a shell command line.</param>
            <param name="resolveLinks">if set to <c>true</c> [resolve links].</param>
        </member>
        <member name="M:Managed.Adb.FileEntry.FillPathBuilder(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Fills the path builder.
            </summary>
            <param name="pathBuilder">The path builder.</param>
            <param name="escapePath">if set to <c>true</c> [escape path].</param>
        </member>
        <member name="M:Managed.Adb.FileEntry.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Managed.Adb.FileEntry.FileEntryComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.FileEntry.FileEntryComparer.Compare(Managed.Adb.FileEntry,Managed.Adb.FileEntry)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Managed.Adb.FileListingService">
            <summary>
            Provides Device side file listing service.
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.APK_FILE_PATTERN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.PM_FULL_LISTING">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.LS_PATTERN_EX">
            <summary>
            This is the pattern that supports busybox ls and toolbox ls.
            Groups
            <ol>
            	<li>Permissions</li>
            	<li>Group</li>
            	<li>Owner</li>
            	<li>Size, if empty or whitespace use 0</li>
            	<li>Month Name (or year in toolbox ls)</li>
            	<li>Date (or month number in toolbox ls)</li>
            	<li>Year, if empty, use current year (or date number in toolbox ls)</li>
            	<li>Time, if empty, use 00:00</li>
            	<li>Name</li>
            	<li>File types (or empty in toolbox ls)</li>
            </ol>
            
            </summary>
            <remarks>
            added non-capture "(?:\d{1,},\s+)?" for "blocks"
            </remarks>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_DATA">
            <summary>
             Top level data folder.
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_SDCARD">
            <summary>
            Top level sdcard folder.
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_MNT">
            <summary>
            Top level mount folder.
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_SYSTEM">
            <summary>
            Top level system folder.
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_TEMP">
            <summary>
            Top level temp folder.
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_APP">
            <summary>
            Application folder. 
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_SD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.DIRECTORY_SDEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.REFRESH_RATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.REFRESH_TEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FILE_SEPARATOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FILE_ROOT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.BUSYBOX_LS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.TOOLBOX_LS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.RootLevelApprovedItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:Managed.Adb.FileListingService.FileTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.File">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.Directory">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.DirectoryLink">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.Block">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.Character">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.Link">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.Socket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.FIFO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.FileTypes.Other">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService._root">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.FileListingService.#ctor(Managed.Adb.Device,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.FileListingService"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="forceBusyBox">if set to <c>true</c> [force busy box].</param>
        </member>
        <member name="M:Managed.Adb.FileListingService.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.FileListingService"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Managed.Adb.FileListingService.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="P:Managed.Adb.FileListingService.Root">
            <summary>
            Gets or sets the root.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:Managed.Adb.FileListingService.ForceBusyBox">
            <summary>
            Gets or sets a value indicating whether [force busy box].
            </summary>
            <value><c>true</c> if [force busy box]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Managed.Adb.FileListingService.GetChildren(Managed.Adb.FileEntry,System.Boolean,Managed.Adb.IListingReceiver)">
            <summary>
            Gets the children.
            </summary>
            <param name="entry">The entry.</param>
            <param name="useCache">if set to <c>true</c> [use cache].</param>
            <param name="receiver">The receiver.</param>
            <returns></returns>
        </member>
        <member name="P:Managed.Adb.FileListingService.Threads">
            <summary>
            Gets or sets the threads.
            </summary>
            <value>The threads.</value>
        </member>
        <member name="M:Managed.Adb.FileListingService.DoLS(Managed.Adb.FileEntry)">
            <summary>
            Does the LS.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="T:Managed.Adb.FileListingService.ThreadState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.ThreadState.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FileListingService.ThreadState.Entry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.FileListingService.FindFileEntry(System.String)">
            <summary>
            Finds an entry from the path.
            </summary>
            <param name="path">The file path of</param>
            <returns>The FileEntry</returns>
            <exception cref="T:System.IO.FileNotFoundException">Throws if unable to locate the file or directory</exception>
        </member>
        <member name="M:Managed.Adb.FileListingService.FindFileEntry(Managed.Adb.FileEntry,System.String)">
            <summary>
            Finds the file entry.
            </summary>
            <param name="parent">The parent.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:Managed.Adb.FilePermission">
            <summary>
            
            </summary>
        </member>
        <member name="T:Managed.Adb.FilePermission.Modes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FilePermission.Modes.NoAccess">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FilePermission.Modes.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FilePermission.Modes.Write">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.FilePermission.Modes.Read">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.FilePermission.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:Permission"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.FilePermission.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:Permission"/> class.
            </summary>
            <param name="linuxPermissions">The linux permissions.</param>
        </member>
        <member name="P:Managed.Adb.FilePermission.CanExecute">
            <summary>
            Gets or sets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.FilePermission.CanWrite">
            <summary>
            Gets or sets a value indicating whether this instance can write.
            </summary>
            <value><c>true</c> if this instance can write; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.FilePermission.CanRead">
            <summary>
            Gets or sets a value indicating whether this instance can read.
            </summary>
            <value><c>true</c> if this instance can read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.FilePermission.CanDelete">
            <summary>
            Gets or sets a value indicating whether this instance can delete.
            </summary>
            <value>
            	<c>true</c> if this instance can delete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.FilePermission.ToChmod">
            <summary>
            Converts the permissions to bit value that can be casted to an integer and used for calling chmod
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.FileSystem.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.FileSystem"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Create(System.String)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.FileSystem.Create(Managed.Adb.FileEntry)">
            <summary>
            Creates the specified file entry.
            </summary>
            <param name="fileEntry">The file entry.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.FileSystem.Exists(System.String)">
            <summary>
            Gets if the specified path exists on the device.
            </summary>
            <param name="path">the path to check</param>
            <returns><c>true</c>, if the path exists; otherwise, <c>false</c></returns>
            <exception cref="T:System.IO.IOException">If the device is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">If the device or path is null.</exception>
        </member>
        <member name="P:Managed.Adb.FileSystem.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="M:Managed.Adb.FileSystem.MakeDirectory(System.String)">
            <summary>
            Makes the directory from the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.MakeDirectory(System.String,System.Boolean)">
            <summary>
            Makes the directory.
            </summary>
            <param name="path">The path.</param>
            <param name="forceDeviceMethod">if set to <c>true</c> forces the use of the "non-busybox" method.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.MakeDirectoryFallbackInternal(System.String,Managed.Adb.CommandErrorReceiver)">
            <summary>
            this is a fallback if the mkdir -p fails for somereason
            </summary>
            <param name="path"></param>
            <param name="cer"></param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Copy(System.String,System.String)">
            <summary>
            Copies the specified source to the specified destination.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Move(System.String,System.String)">
            <summary>
            Moves the specified source to the specified destination.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Chmod(System.String,System.String)">
            <summary>
            Chmods the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="permissions">The permissions.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Chmod(System.String,Managed.Adb.FilePermissions)">
            <summary>
            Chmods the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="permissions">The permissions.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.IsMountPointReadOnly(System.String)">
            <summary>
            Gets if the specified mount point is read-only
            </summary>
            <param name="mount"></param>
            <returns><code>true</code>, if read-only; otherwise, <code>false</code></returns>
            <exception cref="T:System.IO.IOException">If mount point doesnt exist</exception>
        </member>
        <member name="M:Managed.Adb.FileSystem.Delete(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException">
            If device is null
            or
            If path is null or empty.
            </exception>
            <gist id="adee6a11c5441da61af8" />
            <exception cref="T:System.IO.IOException">If the command fails.</exception>
        </member>
        <member name="M:Managed.Adb.FileSystem.Delete(Managed.Adb.FileEntry)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="fileEntry">The file entry.</param>
            <exception cref="T:System.IO.IOException">If the command fails.</exception>
        </member>
        <member name="P:Managed.Adb.FileSystem.DeviceBlocks">
            <summary>
            Gets the dev blocks for the device.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">Throws if unable to locate /dev/block </exception>
        </member>
        <member name="M:Managed.Adb.FileSystem.Mount(Managed.Adb.MountPoint,System.String)">
            <summary>
            Mounts the specified device.
            </summary>
            <param name="mountPoint">The mp.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Mount(System.String)">
            <summary>
            Attempts to mount the mount point to the associated device without knowing the device or the type.
            Some devices may not support this method.
            </summary>
            <param name="mountPoint"></param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Mount(Managed.Adb.MountPoint)">
            <summary>
            Mounts the specified mount point.
            </summary>
            <param name="mountPoint">The mountPoint.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Mount(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Mounts the specified devices to the specified directory.
            </summary>
            <param name="directory">The directory.</param>
            <param name="device">The device.</param>
            <param name="fileSytemType">Type of the file sytem.</param>
            <param name="isReadOnly">if set to <c>true</c> is read only.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Mount(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Mounts the specified devices to the specified directory.
            </summary>
            <param name="directory">The directory.</param>
            <param name="device">The device.</param>
            <param name="fileSytemType">Type of the file sytem.</param>
            <param name="isReadOnly">if set to <c>true</c> is read only.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Unmount(Managed.Adb.MountPoint)">
            <summary>
            Unmounts the specified mount point.
            </summary>
            <param name="mountPoint">The mountPoint.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Unmount(Managed.Adb.MountPoint,System.String)">
            <summary>
            Unmounts the specified mount point.
            </summary>
            <param name="mountPoint">The mountPoint.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Unmount(System.String)">
            <summary>
            Unmounts the specified mount point.
            </summary>
            <param name="mountPoint">The mount point.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.Unmount(System.String,System.String)">
            <summary>
            Unmounts the specified mount point.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Managed.Adb.FileSystem.ResolveLink(System.String)">
            <summary>
            Resolves the link to the true path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <workitem id="19712">Uses "ls -l" to resolve links</workitem>
        </member>
        <member name="T:Managed.Adb.GetPropReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.GetPropReceiver.GETPROP_COMMAND">
            <summary>
            The getprop command
            </summary>
        </member>
        <member name="M:Managed.Adb.GetPropReceiver.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.GetPropReceiver"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Managed.Adb.GetPropReceiver.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="M:Managed.Adb.GetPropReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="M:Managed.Adb.GetPropReceiver.Done">
            <summary>
            Finishes the receiver
            </summary>
        </member>
        <member name="M:Managed.Adb.IDebugPortProvider.getPort(Managed.Adb.IDevice,System.String)">
            <summary>
            Returns a non-random debugger port for the specified application running on the specified Device.
            </summary>
            <param name="device">The device the application is running on.</param>
            <param name="appName">The application name, as defined in the <code>AndroidManifest.xml</code> 
            <var>package</var> attribute of the <var>manifest</var> node.</param>
            <returns>The non-random debugger port or NO_STATIC_PORT if the Client
            should use the automatic debugger port provider.</returns>
        </member>
        <member name="T:Managed.Adb.IDevice">
            <summary>
            
            </summary>
        </member>
        <member name="E:Managed.Adb.IDevice.StateChanged">
            <summary>
            Occurs when device state changed.
            </summary>
        </member>
        <member name="E:Managed.Adb.IDevice.BuildInfoChanged">
            <summary>
            Occurs when build info changed.
            </summary>
        </member>
        <member name="E:Managed.Adb.IDevice.ClientListChanged">
            <summary>
            Occurs when client list changed.
            </summary>
        </member>
        <member name="P:Managed.Adb.IDevice.FileSystem">
            <summary>
            Gets the file system.
            </summary>
            <value>
            The file system.
            </value>
        </member>
        <member name="P:Managed.Adb.IDevice.BusyBox">
            <summary>
            Gets the busy box.
            </summary>
            <value>
            The busy box.
            </value>
        </member>
        <member name="P:Managed.Adb.IDevice.SerialNumber">
            <summary>
            Gets the serial number of the device.
            </summary>
            <value>The serial number.</value>
        </member>
        <member name="P:Managed.Adb.IDevice.Endpoint">
            <summary>
            Gets the TCP endpoint defined when the transport is TCP.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:Managed.Adb.IDevice.TransportType">
            <summary>
            Gets the type of the transport used to connect to this device.
            </summary>
            <value>
            The type of the transport.
            </value>
        </member>
        <member name="P:Managed.Adb.IDevice.AvdName">
            <summary>
            Returns the name of the AVD the emulator is running.
            <p/>
            This is only valid if {@link #isEmulator()} returns true.
            <p/>
            If the emulator is not running any AVD (for instance it's running from an Android source
            tree build), this method will return "<code>&lt;build&gt;</code>"
            @return the name of the AVD or  <code>null</code>
             if there isn't any.
            </summary>
            <value>The name of the avd.</value>
        </member>
        <member name="P:Managed.Adb.IDevice.EnvironmentVariables">
            <summary>
            Gets the environment variables.
            </summary>
            <value>The environment variables.</value>
        </member>
        <member name="P:Managed.Adb.IDevice.MountPoints">
            <summary>
            Gets the mount points.
            </summary>
            <value>The mount points.</value>
        </member>
        <member name="P:Managed.Adb.IDevice.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
            Returns the state of the device.
        </member>
        <member name="P:Managed.Adb.IDevice.Properties">
            <summary>
            Returns the device properties. It contains the whole output of 'getprop'
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:Managed.Adb.IDevice.GetProperty(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>
            the value or <code>null</code> if the property does not exist.
            </returns>
        </member>
        <member name="M:Managed.Adb.IDevice.GetProperty(System.String[])">
            <summary>
            Gets the first property that exists in the array of property names.
            </summary>
            <param name="name">The array of property names.</param>
            <returns>
            the value or <code>null</code> if the property does not exist.
            </returns>
        </member>
        <member name="P:Managed.Adb.IDevice.IsOnline">
            <summary>
            Gets a value indicating whether the device is online.
            </summary>
            <value><c>true</c> if the device is online; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.IDevice.IsEmulator">
            <summary>
            Gets a value indicating whether this device is emulator.
            </summary>
            <value>
            	<c>true</c> if this device is emulator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.IDevice.IsOffline">
            <summary>
            Gets a value indicating whether this device is offline.
            </summary>
            <value>
            	<c>true</c> if this device is offline; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.IDevice.IsBootLoader">
            <summary>
            Gets a value indicating whether this device is in boot loader mode.
            </summary>
            <value>
            	<c>true</c> if this device is in boot loader mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Managed.Adb.IDevice.Clients">
            <summary>
            Gets the list of clients
            </summary>
        </member>
        <member name="P:Managed.Adb.IDevice.SyncService">
            <summary>
            Returns a <see cref="P:Managed.Adb.IDevice.SyncService"/> object to push / pull files to and from the device.
            </summary>
            <remarks>
            <code>null</code> if the SyncService couldn't be created. This can happen if adb
            refuse to open the connection because the {@link IDevice} is invalid (or got disconnected).
            </remarks>
            <exception cref="!:IOException">Throws IOException if the connection with adb failed.</exception>
        </member>
        <member name="P:Managed.Adb.IDevice.FileListingService">
            <summary>
            Returns a <see cref="P:Managed.Adb.IDevice.FileListingService"/> for this device.
            </summary>
        </member>
        <member name="P:Managed.Adb.IDevice.Screenshot">
            <summary>
            Takes a screen shot of the device and returns it as a <see cref="T:Managed.Adb.RawImage"/>
            </summary>
            <value>The screenshot.</value>
        </member>
        <member name="M:Managed.Adb.IDevice.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Managed.Adb.IDevice.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32)" -->
        <member name="M:Managed.Adb.IDevice.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Object[])">
            <summary>
            Executes a shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.IDevice.ExecuteShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32,System.Object[])">
            <summary>
            Executes a shell command on the device, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
            <param name="maxTimeToOutputResponse">The max time to output response.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.IDevice.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Object[])">
            <summary>
            Executes a shell command on the device as root, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.IDevice.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32,System.Object[])">
            <summary>
            Executes a shell command on the device as root, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
            <param name="maxTimeToOutputResponse">The max time to output response.</param>
            <param name="commandArgs">The command args.</param>
        </member>
        <member name="M:Managed.Adb.IDevice.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the device as root, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
        </member>
        <member name="M:Managed.Adb.IDevice.ExecuteRootShellCommand(System.String,Managed.Adb.IShellOutputReceiver,System.Int32)">
            <summary>
            Executes a shell command on the device as root, and sends the result to a receiver.
            </summary>
            <param name="command">The command to execute</param>
            <param name="receiver">The receiver object getting the result from the command.</param>
            <param name="maxTimeToOutputResponse">The max time to output response.</param>
        </member>
        <member name="M:Managed.Adb.IDevice.CreateForward(System.Int32,System.Int32)">
            <summary>
            Creates a port forwarding between a local and a remote port.
            </summary>
            <param name="localPort">the local port to forward</param>
            <param name="remotePort">the remote port.</param>
            <returns><code>true</code> if success.</returns>
        </member>
        <member name="M:Managed.Adb.IDevice.RemoveForward(System.Int32)">
            <summary>
            Removes a port forwarding between a local and a remote port.
            </summary>
            <param name="localPort"> the local port to forward</param>
            <returns><code>true</code> if success.</returns>
        </member>
        <member name="M:Managed.Adb.IDevice.InstallPackage(System.String,System.Boolean)">
            <summary>
            Installs an Android application on device.
            This is a helper method that combines the syncPackageToDevice, installRemotePackage,
            and removePackage steps
            </summary>
            <param name="packageFilePath">the absolute file system path to file on local host to install</param>
            <param name="reinstall">set to <code>true</code>if re-install of app should be performed</param>
        </member>
        <member name="M:Managed.Adb.IDevice.SyncPackageToDevice(System.String)">
            <summary>
            Pushes a file to device
            </summary>
            <param name="localFilePath">the absolute path to file on local host</param>
            <returns>destination path on device for file</returns>
            <exception cref="!:IOException">if fatal error occurred when pushing file</exception>
        </member>
        <member name="M:Managed.Adb.IDevice.InstallRemotePackage(System.String,System.Boolean)">
            <summary>
            Installs the application package that was pushed to a temporary location on the device.
            </summary>
            <param name="remoteFilePath">absolute file path to package file on device</param>
            <param name="reinstall">set to <code>true</code> if re-install of app should be performed</param>
        </member>
        <member name="M:Managed.Adb.IDevice.RemoveRemotePackage(System.String)">
            <summary>
            Remove a file from device
            </summary>
            <param name="remoteFilePath">path on device of file to remove</param>
            <exception cref="!:IOException">if file removal failed</exception>
        </member>
        <member name="M:Managed.Adb.IDevice.UninstallPackage(System.String)">
            <summary>
            Uninstall an package from the device.
            </summary>
            <param name="packageName">Name of the package.</param>
            <exception cref="!:IOException"></exception>
            <exception cref="!:PackageInstallException"></exception>
        </member>
        <member name="M:Managed.Adb.IDevice.RefreshEnvironmentVariables">
            <summary>
            Refreshes the environment variables.
            </summary>
        </member>
        <member name="M:Managed.Adb.IDevice.RefreshMountPoints">
            <summary>
            Refreshes the mount points.
            </summary>
        </member>
        <member name="M:Managed.Adb.IDevice.RefreshProperties">
            <summary>
            Refreshes the properties.
            </summary>
        </member>
        <member name="T:Managed.Adb.IListingReceiver">
            <summary>
            Classes which implement this interface provide a method that deals with asynchronous 
            result from <code>ls</code> command on the device.
            </summary>
        </member>
        <member name="M:Managed.Adb.IListingReceiver.SetChildren(Managed.Adb.FileEntry,Managed.Adb.FileEntry[])">
            <summary>
            Sets the children.
            </summary>
            <param name="entry">The entry.</param>
            <param name="children">The children.</param>
        </member>
        <member name="M:Managed.Adb.IListingReceiver.RefreshEntry(Managed.Adb.FileEntry)">
            <summary>
            Refreshes the entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="T:Managed.Adb.ILogOutput">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.ILogOutput.Write(Managed.Adb.LogLevel.LogLevelInfo,System.String,System.String)">
            <summary>
            Writes the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="tag">The tag.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Managed.Adb.ILogOutput.WriteAndPromptLog(Managed.Adb.LogLevel.LogLevelInfo,System.String,System.String)">
            <summary>
            Writes the and prompt log.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="tag">The tag.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Managed.Adb.InstallReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.InstallReceiver.SUCCESS_OUTPUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.InstallReceiver.FAILURE_PATTERN">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.InstallReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="P:Managed.Adb.InstallReceiver.ErrorMessage">
            <summary>
            Gets the error message if the install was unsuccessful.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Managed.Adb.InstallReceiver.Success">
            <summary>
            Gets a value indicating whether the install was a success.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Managed.Adb.IPacketConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.IPacketConsumer.Read">
            <summary>
            Reads this instance.
            </summary>
        </member>
        <member name="M:Managed.Adb.IPacketConsumer.ForwardPacketToClient(System.Object)">
            <summary>
            Forwards the packet to client.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Managed.Adb.IPacketConsumer.SendHandshake">
            <summary>
            Sends the handshake.
            </summary>
        </member>
        <member name="M:Managed.Adb.IPacketConsumer.SendAndConsume(System.Object)">
            <summary>
            Sends the and consume.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="T:Managed.Adb.IShellOutputReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.IShellOutputReceiver.AddOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the output.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Managed.Adb.IShellOutputReceiver.Flush">
            <summary>
            Flushes the output. 
            </summary>
            <remarks>This should always be called at the end of the "process" in order to indicate that the data is ready to be processed further if needed.</remarks>
        </member>
        <member name="P:Managed.Adb.IShellOutputReceiver.IsCancelled">
            <summary>
            Gets a value indicating whether this instance is cancelled.
            </summary>
            <value>
            	<c>true</c> if this instance is cancelled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Managed.Adb.ISyncProgressMonitor">
            <summary>
            Classes which implement this interface provide methods that deal with displaying transfer progress.
            </summary>
        </member>
        <member name="M:Managed.Adb.ISyncProgressMonitor.Start(System.Int64)">
            <summary>
            Sent when the transfer starts
            </summary>
            <param name="totalWork">the total amount of work.</param>
        </member>
        <member name="M:Managed.Adb.ISyncProgressMonitor.Stop">
            <summary>
            Sent when the transfer is finished or interrupted.
            </summary>
        </member>
        <member name="P:Managed.Adb.ISyncProgressMonitor.IsCanceled">
            <summary>
            Sent to query for possible cancellation.
            </summary>
            <returns><c>true</c> if the transfer should be stopped; otherwise, false</returns>
        </member>
        <member name="M:Managed.Adb.ISyncProgressMonitor.StartSubTask(System.String,System.String)">
            <summary>
            Sent when a sub task is started.
            </summary>
            <param name="destination">the destination.</param>
        </member>
        <member name="M:Managed.Adb.ISyncProgressMonitor.Advance(System.Int64)">
            <summary>
            Sent when some progress have been made.
            </summary>
            <param name="work">the amount of work done.</param>
        </member>
        <member name="T:Managed.Adb.ListingServiceReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.ListingServiceReceiver.LINK_FORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.ListingServiceReceiver.#ctor(Managed.Adb.FileEntry,System.Collections.Generic.List{Managed.Adb.FileEntry},System.Collections.Generic.List{System.String})">
            <summary>
            Create an ls receiver/parser.
            </summary>
            <param name="parent">The list of current children. To prevent collapse during update, reusing the same 
            FileEntry objects for files that were already there is paramount.</param>
            <param name="entries">the list of new children to be filled by the receiver.</param>
            <param name="links">the list of link path to compute post ls, to figure out if the link 
            pointed to a file or to a directory.</param>
        </member>
        <member name="P:Managed.Adb.ListingServiceReceiver.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
            <value>The entries.</value>
        </member>
        <member name="P:Managed.Adb.ListingServiceReceiver.Links">
            <summary>
            Gets or sets the links.
            </summary>
            <value>The links.</value>
        </member>
        <member name="P:Managed.Adb.ListingServiceReceiver.CurrentChildren">
            <summary>
            Gets or sets the current children.
            </summary>
            <value>The current children.</value>
        </member>
        <member name="P:Managed.Adb.ListingServiceReceiver.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Managed.Adb.ListingServiceReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="P:Managed.Adb.ListingServiceReceiver.IsCancelled">
            <summary>
            Gets a value indicating whether this instance is cancelled.
            </summary>
            <value>
            	<c>true</c> if this instance is cancelled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.ListingServiceReceiver.GetExistingEntry(System.String)">
            <summary>
            Queries for an already existing Entry per name
            </summary>
            <param name="name">the name of the entry</param>
            <returns>the existing FileEntry or null if no entry with a matching name exists.</returns>
        </member>
        <member name="M:Managed.Adb.ListingServiceReceiver.FinishLinks">
            <summary>
            Finishes the links.
            </summary>
        </member>
        <member name="T:Managed.Adb.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Managed.Adb.Log.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Managed.Adb.Log.LogOutput">
            <summary>
            Gets or sets the <see cref="T:Managed.Adb.ILogOutput">LogOutput</see>
            </summary>
        </member>
        <member name="F:Managed.Adb.Log.SpaceLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Log.HEXDIGIT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.Log.#cctor">
            <summary>
            Static Initializer for the <see cref="T:Managed.Adb.Log"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.Log.#ctor">
            <summary>
            Cerates a new Instance of <see cref="T:Managed.Adb.Log"/>
            </summary>
        </member>
        <member name="T:Managed.Adb.Log.Config">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.Log.Config.LOGV">
            <summary>
            Log Verbose
            </summary>
        </member>
        <member name="F:Managed.Adb.Log.Config.LOGD">
            <summary>
            Log Debug
            </summary>
        </member>
        <member name="M:Managed.Adb.Log.v(System.String,System.String)">
            <summary>
            Outputs a Verbose level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="message">The message to output</param>
        </member>
        <member name="M:Managed.Adb.Log.v(System.String,System.String,System.Object[])">
            <summary>
            Outputs a Verbose level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="format">The message to output format string.</param>
            <param name="args">The values for the format message</param>
        </member>
        <member name="M:Managed.Adb.Log.d(System.String,System.String)">
            <summary>
            Outputs a Debug level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="message">The message to output</param>
        </member>
        <member name="M:Managed.Adb.Log.d(System.String,System.String,System.Object[])">
            <summary>
            Outputs a Debug level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="format">The message to output format string.</param>
            <param name="args">The values for the format message</param>
        </member>
        <member name="M:Managed.Adb.Log.i(System.String,System.String)">
            <summary>
            Outputs a Info level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="format">The message to output.</param>
        </member>
        <member name="M:Managed.Adb.Log.i(System.String,System.String,System.Object[])">
            <summary>
            Outputs a Info level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="format">The message to output format string.</param>
            <param name="args">The values for the format message</param>
        </member>
        <member name="M:Managed.Adb.Log.w(System.String,System.String)">
            <summary>
            Outputs a Warn level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="message">The message to output.</param>
        </member>
        <member name="M:Managed.Adb.Log.w(System.String,System.String,System.Object[])">
            <summary>
            Outputs a Warn level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="format">The message to output format string.</param>
            <param name="args">The values for the format message</param>
        </member>
        <member name="M:Managed.Adb.Log.w(System.String,System.Exception)">
            <summary>
            Outputs a Warn level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="exception">The exception to warn</param>
        </member>
        <member name="M:Managed.Adb.Log.w(System.String,System.String,System.Exception)">
            <summary>
            Outputs a Warn level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="message">The message to output.</param>
            <param name="exception">The exception to warn</param>
        </member>
        <member name="M:Managed.Adb.Log.e(System.String,System.String)">
            <summary>
            Outputs a Error level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="message">The message to output.</param>
            <gist id="f4fa3525f899e5461d4e" />
        </member>
        <member name="M:Managed.Adb.Log.e(System.String,System.String,System.Object[])">
            <summary>
            Outputs a Error level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="format">The message to output format string.</param>
            <param name="args">The values for the format message</param>
            <gist id="16a731d7e4f074fca809" />
        </member>
        <member name="M:Managed.Adb.Log.e(System.String,System.Exception)">
            <summary>
            Outputs a Error level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="exception">The exception to warn</param>
            <gist id="4e0438f59a00d57af4ef"/>
        </member>
        <member name="M:Managed.Adb.Log.e(System.String,System.String,System.Exception)">
            <summary>
            Outputs a Error level message.
            </summary>
            <param name="tag">The tag associated with the message.</param>
            <param name="message">The message to output.</param>
            <param name="exception">The exception to warn</param>
            <gist id="90b6664f4dd84da50b27" />
        </member>
        <member name="M:Managed.Adb.Log.LogAndDisplay(Managed.Adb.LogLevel.LogLevelInfo,System.String,System.String)">
            <summary>
            Outputs a log message and attempts to display it in a dialog.
            </summary>
            <param name="logLevel">The log level</param>
            <param name="tag">The tag associated with the message.</param>
            <param name="message">The message to output.</param>
        </member>
        <member name="M:Managed.Adb.Log.HexDump(System.String,Managed.Adb.LogLevel.LogLevelInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Dump the entire contents of a byte array with DEBUG priority.
            </summary>
            <param name="tag"></param>
            <param name="level"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <remarks>
            Local addition.  Output looks like:
            1230- 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff  0123456789abcdef
            Uses no string concatenation; creates one String object per line.
            </remarks>
        </member>
        <member name="M:Managed.Adb.Log.HexDump(System.Byte[])">
            <summary>
            Dump the entire contents of a byte array with DEBUG priority.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Managed.Adb.Log.WriteLine(Managed.Adb.LogLevel.LogLevelInfo,System.String,System.String)">
            <summary>
            prints to stdout; could write to a log window
            </summary>
            <param name="logLevel"></param>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:Managed.Adb.Log.Write(Managed.Adb.LogLevel.LogLevelInfo,System.String,System.String)">
            <summary>
            Prints a log message.
            </summary>
            <param name="logLevel"></param>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:Managed.Adb.Log.GetLogFormatString(Managed.Adb.LogLevel.LogLevelInfo,System.String,System.String)">
            <summary>
            Formats a log message.
            </summary>
            <param name="logLevel"></param>
            <param name="tag"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Managed.Adb.LogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.LogLevel.#cctor">
            <summary>
            Initializes the <see cref="T:Managed.Adb.LogLevel"/> class.
            </summary>
        </member>
        <member name="P:Managed.Adb.LogLevel.Verbose">
            <summary>
            Gets or sets the verbose log level.
            </summary>
            <value>The verbose log level.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.Debug">
            <summary>
            Gets or sets the debug log level.
            </summary>
            <value>The debug log level.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.Info">
            <summary>
            Gets or sets the info log level.
            </summary>
            <value>The info log level.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.Warn">
            <summary>
            Gets or sets the warn log level.
            </summary>
            <value>The warn log level.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.Error">
            <summary>
            Gets or sets the error log level.
            </summary>
            <value>The error log level.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.Assert">
            <summary>
            Gets or sets the assert log level.
            </summary>
            <value>The assert log level.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.Levels">
            <summary>
            Gets or sets the levels.
            </summary>
            <value>The levels.</value>
        </member>
        <member name="M:Managed.Adb.LogLevel.GetByLetter(System.String)">
            <summary>
            Gets the by letter.
            </summary>
            <param name="letter">The letter.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.LogLevel.GetByLetter(System.Char)">
            <summary>
            Gets the by letter.
            </summary>
            <param name="letter">The letter.</param>
            <returns></returns>
        </member>
        <member name="P:Managed.Adb.LogLevel.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="T:Managed.Adb.LogLevel.LogLevelInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.LogLevel.LogLevelInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.LogLevel.LogLevelInfo"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.LogLevel.LogLevelInfo.#ctor(System.Int32,System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.LogLevel.LogLevelInfo"/> class.
            </summary>
            <param name="priority">The priority.</param>
            <param name="value">The value.</param>
            <param name="letter">The letter.</param>
        </member>
        <member name="P:Managed.Adb.LogLevel.LogLevelInfo.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.LogLevelInfo.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Managed.Adb.LogLevel.LogLevelInfo.Letter">
            <summary>
            Gets or sets the letter.
            </summary>
            <value>The letter.</value>
        </member>
        <member name="T:Managed.Adb.MonitorThread">
            <summary>
            
            </summary>
        </member>
        <member name="T:Managed.Adb.MonitorThread.ThreadState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.MonitorThread.ThreadState.UNKNOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.MonitorThread.ThreadState.Ready">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.MonitorThread.ThreadState.Disconnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.MonitorThread.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.MonitorThread"/> class.
            </summary>
        </member>
        <member name="F:Managed.Adb.MonitorThread._instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Managed.Adb.MonitorThread.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Managed.Adb.MonitorThread.Quit">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Managed.Adb.MonitorThread"/> is quit.
            </summary>
            <value><c>true</c> if quit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.MonitorThread.Clients">
            <summary>
            Gets or sets the clients.
            </summary>
            <value>The clients.</value>
        </member>
        <member name="M:Managed.Adb.MonitorThread.SetDebugSelectedPort(System.Int32)">
            <summary>
            Sets the debug selected port.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Managed.Adb.MountPoint">
            <summary>
            Represents a mount point.
            </summary>
        </member>
        <member name="M:Managed.Adb.MountPoint.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.MountPoint"/> class.
            </summary>
            <param name="block">The block.</param>
            <param name="name">The name.</param>
            <param name="fs">The fs.</param>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
        </member>
        <member name="P:Managed.Adb.MountPoint.Block">
            <summary>
            Gets the mount point block
            </summary>
            <value>The block.</value>
        </member>
        <member name="P:Managed.Adb.MountPoint.Name">
            <summary>
            Gets the mount point name
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Managed.Adb.MountPoint.FileSystem">
            <summary>
            Gets the mount point file system
            </summary>
            <value>The file system.</value>
        </member>
        <member name="P:Managed.Adb.MountPoint.IsReadOnly">
            <summary>
            Gets the mount point access
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.MountPoint.ToString">
            <summary>
            Returns a string representation of the mount point.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Managed.Adb.MountPoint.Clone">
            <summary>
            Creates a clone of this MountPoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.MountPoint.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Managed.Adb.MountPointReceiver">
            <summary>
            A dynamic mount point receiver.
            </summary>
            <remarks>Works on busybox and non-busybox devices</remarks>
        </member>
        <member name="F:Managed.Adb.MountPointReceiver.RE_MOUNTPOINT_PATTERN">
            <summary>
            The mount parsing pattern.
            </summary>
        </member>
        <member name="F:Managed.Adb.MountPointReceiver.MOUNT_COMMAND">
            <summary>
            The mount command
            </summary>
        </member>
        <member name="M:Managed.Adb.MountPointReceiver.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.MountPointReceiver"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.MountPointReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
            <workitem id="16001">Bug w/ MountPointReceiver.cs/ProcessNewLines()</workitem>
        </member>
        <member name="M:Managed.Adb.MountPointReceiver.Done">
            <summary>
            Finishes the receiver
            </summary>
        </member>
        <member name="P:Managed.Adb.MountPointReceiver.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="T:Managed.Adb.MultiLineReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.MultiLineReceiver.NEWLINE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.MultiLineReceiver.ENCODING">
            <summary>
            
            </summary>
        </member>
        <member name="P:Managed.Adb.MultiLineReceiver.TrimLines">
            <summary>
            Gets or sets a value indicating whether [trim lines].
            </summary>
            <value><c>true</c> if [trim lines]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Managed.Adb.MultiLineReceiver.UnfinishedLine">
            <summary>
            Gets or sets the unfinished line.
            </summary>
            <value>The unfinished line.</value>
        </member>
        <member name="P:Managed.Adb.MultiLineReceiver.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="M:Managed.Adb.MultiLineReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.MultiLineReceiver"/> class.
            </summary>
        </member>
        <member name="M:Managed.Adb.MultiLineReceiver.AddOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the output.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Managed.Adb.MultiLineReceiver.Flush">
            <summary>
            Flushes the output.
            </summary>
        </member>
        <member name="M:Managed.Adb.MultiLineReceiver.Done">
            <summary>
            Finishes the receiver
            </summary>
        </member>
        <member name="P:Managed.Adb.MultiLineReceiver.IsCancelled">
            <summary>
            Gets a value indicating whether this instance is canceled.
            </summary>
            <value>
            	<c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.MultiLineReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="T:Managed.Adb.NullOutputReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.NullOutputReceiver.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Managed.Adb.NullOutputReceiver" /> class from being created.
            </summary>
        </member>
        <member name="P:Managed.Adb.NullOutputReceiver.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Managed.Adb.NullOutputReceiver.AddOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the output.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Managed.Adb.NullOutputReceiver.Flush">
            <summary>
            Flushes the output.
            </summary>
            <remarks>
            This should always be called at the end of the "process" in order to indicate that the data is ready to be processed further if needed.
            </remarks>
        </member>
        <member name="P:Managed.Adb.NullOutputReceiver.IsCancelled">
            <summary>
            Gets a value indicating whether this instance is cancelled.
            </summary>
            <value>
            <c>true</c> if this instance is cancelled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Managed.Adb.NullSyncProgressMonitor">
            <summary>
            A Sync progress monitor that does nothing
            </summary>
        </member>
        <member name="M:Managed.Adb.NullSyncProgressMonitor.Start(System.Int64)">
            <summary>
            Sent when the transfer starts
            </summary>
            <param name="totalWork">the total amount of work.</param>
        </member>
        <member name="M:Managed.Adb.NullSyncProgressMonitor.Stop">
            <summary>
            Sent when the transfer is finished or interrupted.
            </summary>
        </member>
        <member name="P:Managed.Adb.NullSyncProgressMonitor.IsCanceled">
            <summary>
            Sent to query for possible cancellation.
            </summary>
            <returns><c>true</c> if the transfer should be stopped; otherwise, false</returns>
        </member>
        <member name="M:Managed.Adb.NullSyncProgressMonitor.StartSubTask(System.String,System.String)">
            <summary>
            Sent when a sub task is started.
            </summary>
            <param name="source"></param>
            <param name="destination">the destination.</param>
        </member>
        <member name="M:Managed.Adb.NullSyncProgressMonitor.Advance(System.Int64)">
            <summary>
            Sent when some progress have been made.
            </summary>
            <param name="work">the amount of work done.</param>
        </member>
        <member name="T:Managed.Adb.PackageManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.PackageManager.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.PackageManager"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Managed.Adb.PackageManager.Packages">
            <summary>
            Gets or sets the packages.
            </summary>
            <value>
            The packages.
            </value>
        </member>
        <member name="M:Managed.Adb.PackageManager.RefreshPackages">
            <summary>
            Refreshes the packages.
            </summary>
        </member>
        <member name="M:Managed.Adb.PackageManager.Exists(System.String)">
            <summary>
            Existses the specified package.
            </summary>
            <param name="package">The package.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.PackageManager.GetApkFileEntry(System.String)">
            <summary>
            Gets the apk file entry.
            </summary>
            <param name="package">The package.</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.PackageManager.GetApkPath(System.String)">
            <summary>
            Gets the apk path.
            </summary>
            <param name="package">The package.</param>
            <returns></returns>
        </member>
        <member name="P:Managed.Adb.PackageManager.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="T:Managed.Adb.PackageManager.PackageManagerPathReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.PackageManager.PackageManagerPathReceiver.PM_PATH_PATTERN">
            <summary>
            Pattern to parse the output of the 'pm path &lt;package&gt;' command.
            The output format looks like:
            /data/app/myapp.apk=com.mypackage.myapp
            </summary>
        </member>
        <member name="M:Managed.Adb.PackageManager.PackageManagerPathReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.PackageManager.PackageManagerPathReceiver"/> class.
            </summary>
        </member>
        <member name="P:Managed.Adb.PackageManager.PackageManagerPathReceiver.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="M:Managed.Adb.PackageManager.PackageManagerPathReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="T:Managed.Adb.PackageManagerReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Managed.Adb.PackageManagerReceiver.PM_PACKAGE_PATTERN">
            <summary>
            Pattern to parse the output of the 'pm -lf' command.
            The output format looks like:
            /data/app/myapp.apk=com.mypackage.myapp
            </summary>
        </member>
        <member name="M:Managed.Adb.PackageManagerReceiver.#ctor(Managed.Adb.Device,Managed.Adb.PackageManager)">
            <summary>
            Creates an instance of PackageManagerReceiver
            </summary>
            <param name="device"></param>
            <param name="pm"></param>
        </member>
        <member name="P:Managed.Adb.PackageManagerReceiver.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="P:Managed.Adb.PackageManagerReceiver.PackageManager">
            <summary>
            Gets or sets the package manager.
            </summary>
            <value>
            The package manager.
            </value>
        </member>
        <member name="M:Managed.Adb.PackageManagerReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="T:Managed.Adb.PackageManagerListingReceiver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.PackageManagerListingReceiver.#ctor(System.Collections.Generic.Dictionary{System.String,Managed.Adb.FileEntry},Managed.Adb.IListingReceiver)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.PackageManagerReceiver"/> class.
            </summary>
            <param name="entryMap">The entry map.</param>
            <param name="receiver">The receiver.</param>
        </member>
        <member name="P:Managed.Adb.PackageManagerListingReceiver.Map">
            <summary>
            Gets or sets the map.
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Managed.Adb.PackageManagerListingReceiver.Receiver">
            <summary>
            Gets or sets the receiver.
            </summary>
            <value>The receiver.</value>
        </member>
        <member name="M:Managed.Adb.PackageManagerListingReceiver.ProcessNewLines(System.String[])">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="T:Managed.Adb.SyncResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:Managed.Adb.SyncResult.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new SyncResult
            </summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Managed.Adb.SyncResult.#ctor(System.Int32,System.Exception)">
            <summary>
            Initializes a new SyncResult
            </summary>
            <param name="code">The error code</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Managed.Adb.SyncResult.#ctor(System.Int32)">
            <summary>
            Initializes a new SyncResult
            </summary>
            <param name="code">The error code</param>
        </member>
        <member name="P:Managed.Adb.SyncResult.Message">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="P:Managed.Adb.SyncResult.Code">
            <summary>
            Gets the error code
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.UNKNOWN">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.Socket">
            <summary>
            The socket
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.SymbolicLink">
            <summary>
            The symbolic link
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.Regular">
            <summary>
            The regular
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.Block">
            <summary>
            The block
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.Directory">
            <summary>
            The directory
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.Character">
            <summary>
            The character
            </summary>
        </member>
        <member name="F:Managed.Adb.SyncService.FileMode.FIFO">
            <summary>
            The fifo
            </summary>
        </member>
        <member name="P:Managed.Adb.SyncService.NullProgressMonitor">
            <summary>
            Gets the null progress monitor.
            </summary>
            <value>
            The null progress monitor.
            </value>
        </member>
        <member name="M:Managed.Adb.SyncService.CheckResult(System.Byte[],System.Byte[])">
            <summary>
            Checks the result array starts with the provided code
            </summary>
            <param name="result">The result array to check</param>
            <param name="code">The 4 byte code.</param>
            <returns>true if the code matches.</returns>
        </member>
        <member name="M:Managed.Adb.SyncService.GetFileType(Managed.Adb.SyncService.FileMode)">
            <summary>
            Gets the file type from the mode
            </summary>
            <param name="mode">the file mode flags</param>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.SyncService.CreateRequest(System.String,System.Int32)">
            <summary>
            Create a command with a code and an int values
            </summary>
            <param name="command">the 4 byte command (STAT, RECV, ...).</param>
            <param name="value"></param>
            <returns>the byte[] to send to the device through adb</returns>
        </member>
        <member name="M:Managed.Adb.SyncService.CreateRequest(System.Byte[],System.Int32)">
            <summary>
            Create a command with a code and an int values
            </summary>
            <param name="command">the 4 byte command (STAT, RECV, ...).</param>
            <param name="value"></param>
            <returns>the byte[] to send to the device through adb</returns>
        </member>
        <member name="M:Managed.Adb.SyncService.CreateFileRequest(System.String,System.String)">
            <summary>
            Creates the data array for a file request. This creates an array with a 4 byte command + the remote file name.
            </summary>
            <param name="command">the 4 byte command (STAT, RECV, ...).</param>
            <param name="path">The path, as a byte array, of the remote file on which to execute the command</param>
            <returns>the byte[] to send to the device through adb</returns>
        </member>
        <member name="M:Managed.Adb.SyncService.CreateFileRequest(System.Byte[],System.Byte[])">
            <summary>
            Creates the data array for a file request. This creates an array with a 4 byte command + the remote file name.
            </summary>
            <param name="command">the 4 byte command (STAT, RECV, ...).</param>
            <param name="path">he path, as a byte array, of the remote file on which to execute the command</param>
            <returns>the byte[] to send to the device through adb</returns>
        </member>
        <member name="M:Managed.Adb.SyncService.#ctor(Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.SyncService"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Managed.Adb.SyncService.#ctor(System.Net.IPEndPoint,Managed.Adb.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Managed.Adb.SyncService"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="device">The device.</param>
        </member>
        <member name="P:Managed.Adb.SyncService.Address">
            <summary>
            Gets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:Managed.Adb.SyncService.Device">
            <summary>
            Gets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="P:Managed.Adb.SyncService.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value>
              <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Managed.Adb.SyncService.Open">
            <summary>
            Opens this connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Managed.Adb.SyncService.Close">
            Closes the connection.
            <summary>
            Closes this connection.
            </summary>
        </member>
        <member name="M:Managed.Adb.SyncService.Pull(System.Collections.Generic.IEnumerable{Managed.Adb.FileEntry},System.String,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            Pulls file(s) or folder(s).
            </summary>
            <param name="entries">the remote item(s) to pull</param>
            <param name="localPath">The local destination. If the entries count is &gt; 1 or if the unique entry is a
            folder, this should be a folder.</param>
            <param name="monitor">The progress monitor. Cannot be null.</param>
            <returns>
            a SyncResult object with a code and an optional message.
            </returns>
            <exception cref="T:System.ArgumentNullException">monitor;Monitor cannot be null</exception>
            <gist id="c9ca09c0c0779d0a5fb8" />
        </member>
        <member name="M:Managed.Adb.SyncService.PullFile(Managed.Adb.FileEntry,System.String,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            Pulls a single file.
            </summary>
            <param name="remote">remote the remote file</param>
            <param name="localFilename">The local destination.</param>
            <param name="monitor">The progress monitor. Cannot be null.</param>
            <returns>
            a SyncResult object with a code and an optional message.
            </returns>
            <exception cref="T:System.ArgumentNullException">monitor;Monitor cannot be null</exception>
            <exception cref="T:System.ArgumentNullException">Throws if monitor is null</exception>
            <gist id="39fdc76b6f394b9bdf88" />
        </member>
        <member name="M:Managed.Adb.SyncService.PullFile(System.String,System.String,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            Pulls a single file.
            <para>Because this method just deals with a String for the remote file instead of FileEntry,
            the size of the file being pulled is unknown and the ISyncProgressMonitor will not properly
            show the progress</para>
            </summary>
            <param name="remoteFilepath">the full path to the remote file</param>
            <param name="localFilename">The local destination.</param>
            <param name="monitor">The progress monitor. Cannot be null.</param>
            <returns>
            a SyncResult object with a code and an optional message.
            </returns>
            <exception cref="T:System.ArgumentNullException">monitor;Monitor cannot be null</exception>
            <exception cref="T:System.ArgumentNullException">Throws if monitor is null</exception>
            <gist id="9021e6c39ee20a6e122b" />
        </member>
        <member name="M:Managed.Adb.SyncService.Push(System.Collections.Generic.IEnumerable{System.String},Managed.Adb.FileEntry,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            Push several files.
            </summary>
            <param name="local">An array of local files to push</param>
            <param name="remote">the remote FileEntry representing a directory.</param>
            <param name="monitor">The progress monitor. Cannot be null.</param>
            <returns>
            a SyncResult object with a code and an optional message.
            </returns>
            <exception cref="T:System.ArgumentNullException">Monitor cannot be null</exception>
            <gist id="380b3c149499bf31e49d" />
        </member>
        <member name="M:Managed.Adb.SyncService.PushFile(System.String,System.String,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            Push a single file.
            </summary>
            <param name="local">the local filepath.</param>
            <param name="remote">The remote filepath.</param>
            <param name="monitor">The progress monitor. Cannot be null.</param>
            <returns>
            a SyncResult object with a code and an optional message.
            </returns>
            <exception cref="T:System.ArgumentNullException">monitor;Monitor cannot be null</exception>
            <exception cref="T:System.ArgumentNullException">Throws if monitor is null</exception>
        </member>
        <member name="M:Managed.Adb.SyncService.DoPushFile(System.String,System.String,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            Push a single file
            </summary>
            <param name="local">the local file to push</param>
            <param name="remotePath">the remote file (length max is 1024)</param>
            <param name="monitor">the monitor. The monitor must be started already.</param>
            <returns>
            a SyncResult object with a code and an optional message.
            </returns>
            <exception cref="T:System.ArgumentNullException">monitor;Monitor cannot be null</exception>
            <exception cref="T:System.ArgumentNullException">Throws if monitor is null</exception>
        </member>
        <member name="M:Managed.Adb.SyncService.DoPullFile(System.String,System.String,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            Pulls a remote file
            </summary>
            <param name="remotePath">the remote file (length max is 1024)</param>
            <param name="localPath">the local destination</param>
            <param name="monitor">the monitor. The monitor must be started already.</param>
            <returns>a SyncResult object with a code and an optional message.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if monitor is null</exception>
        </member>
        <member name="M:Managed.Adb.SyncService.DoPull(System.Collections.Generic.IEnumerable{Managed.Adb.FileEntry},System.String,Managed.Adb.FileListingService,Managed.Adb.ISyncProgressMonitor)">
            <summary>
            
            </summary>
            <param name="entries"></param>
            <param name="localPath"></param>
            <param name="fls"></param>
            <param name="monitor"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">Throws if unable to create a file or folder</exception>
            <exception cref="T:System.ArgumentNullException">Throws if the ISyncProgressMonitor is null</exception>
        </member>
        <member name="M:Managed.Adb.SyncService.GetTotalRemoteFileSize(System.Collections.Generic.IEnumerable{Managed.Adb.FileEntry},Managed.Adb.FileListingService)">
            <summary>
            compute the recursive file size of all the files in the list. Folder have a weight of 1.
            </summary>
            <param name="entries">The remote files</param>
            <param name="fls">The FileListingService</param>
            <returns>The total number of bytes of the specified remote files</returns>
        </member>
        <member name="M:Managed.Adb.SyncService.GetTotalLocalFileSize(System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo})">
            <summary>
            compute the recursive file size of all the files in the list. Folders have a weight of 1.
            </summary>
            <param name="files">The local files / folders</param>
            <returns>The total number of bytes</returns>
            <remarks>This does not check for circular links.</remarks>
        </member>
        <member name="M:Managed.Adb.SyncService.ReadMode(System.String)">
            <summary>
            Returns the mode of the remote file.
            </summary>
            <param name="path">the remote file</param>
            <returns>the mode if all went well; otherwise, FileMode.UNKNOWN</returns>
        </member>
        <member name="M:Managed.Adb.SyncService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
