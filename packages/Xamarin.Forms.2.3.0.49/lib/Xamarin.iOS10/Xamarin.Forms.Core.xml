<doc>
    <assembly>
        <name>Xamarin.Forms.Core</name>
    </assembly>
    <members>
        <member name="T:Xamarin.Forms.AbsoluteLayout">
            <summary>Positions child elements at absolute positions.</summary>
            <remarks>
                <para>Application developers can control the placement of child elements by providing proportional coordinates, device coordinates, or a combination of both, depending on the <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> values that are passed to <see cref="M:Xamarin.Forms.AbsoluteLayout.SetLayoutFlags" /> method. When one of the proportional <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration values is provided, the corresponding X, or Y arguments that range between 0.0 and 1.0 will always cause the child to be displayed completely on screen. That is, you do not need to subtract or add the height or width of a child in order to display it flush with the left, right, top, or bottom of the <see cref="T:Xamarin.Forms.AbsoluteLayout" />. For width, height, X, or Y values that are not specified proportionally, application developers use device-dependent units to locate and size the child element.</para>
                <example>
                    <para>The following example shows how to use an <see cref="T:Xamarin.Forms.AbsoluteLayout" /> with proportional position arguments.</para>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace AbsoluteLayoutDemo
{
    class AbsoluteLayoutDemoPage : ContentPage
    {
        //Label topLeftText;
        Label topLeftLabel, centerLabel, bottomRightLabel;

        public AbsoluteLayoutDemoPage ()
        {
            Label header = new Label {
                Text = "AbsoluteLayout Demo",
                Font = Font.SystemFontOfSize (NamedSize.Large),
                HorizontalOptions = LayoutOptions.Center
            };

            AbsoluteLayout simpleLayout = new AbsoluteLayout {
                BackgroundColor = Color.Blue.WithLuminosity (0.9),
                VerticalOptions = LayoutOptions.FillAndExpand
            };

            topLeftLabel = new Label {
                Text = "Top Left",
                TextColor = Color.Black
            };

            centerLabel = new Label {
                Text = "Centered",
                TextColor = Color.Black
            };

            bottomRightLabel = new Label { 
                Text = "Bottom Right",
                TextColor = Color.Black
            };


            // PositionProportional flag maps the range (0.0, 1.0) to
            // the range "flush [left|top]" to "flush [right|bottom]"
            AbsoluteLayout.SetLayoutFlags (bottomRightLabel,
                AbsoluteLayoutFlags.PositionProportional);

            AbsoluteLayout.SetLayoutBounds (topLeftLabel,
                new Rectangle (0f,
                    0f, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));

            AbsoluteLayout.SetLayoutFlags (centerLabel,
                AbsoluteLayoutFlags.PositionProportional);

            AbsoluteLayout.SetLayoutBounds (centerLabel,
                new Rectangle (0.5,
                    0.5, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));

            AbsoluteLayout.SetLayoutFlags (bottomRightLabel,
                AbsoluteLayoutFlags.PositionProportional);

            AbsoluteLayout.SetLayoutBounds (bottomRightLabel,
                new Rectangle (1f,
                    1f, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));

            simpleLayout.Children.Add (topLeftLabel);
            simpleLayout.Children.Add (centerLabel);
            simpleLayout.Children.Add (bottomRightLabel);

            // Accomodate iPhone status bar.
            this.Padding = 
                new Thickness (10, Device.OnPlatform (20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout {
                Children = {
                    header,
                    simpleLayout
                }
            };

        }
    }
}
]]></code>
                    <para>The code sample below shows how to place two labels by specifying device-dependent units.</para>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace AbsoluteLayoutDemo
{
    public class AbsoluteLayoutDeviceUnits : ContentPage
    {
        Label topLeftText, middleText;

        public AbsoluteLayoutDeviceUnits ()
        {
            AbsoluteLayout simpleLayout = new AbsoluteLayout {

                BackgroundColor = Color.Blue.WithLuminosity (0.9),
                VerticalOptions = LayoutOptions.FillAndExpand
            };

            Label header = new Label {
                Text = "Device Units Demo",
                TextColor = Color.Black,
                Font = Font.SystemFontOfSize (NamedSize.Large)
            };

            topLeftText = new Label {
                Text = "Left",
                TextColor = Color.Black
            };

            AbsoluteLayout.SetLayoutFlags (topLeftText,
                AbsoluteLayoutFlags.None);

            AbsoluteLayout.SetLayoutBounds (topLeftText,
                new Rectangle (0f, 0f,  100f, 50f));

            middleText = new Label {
                Text = "Device-dependent location",
                TextColor = Color.Black
            };

            AbsoluteLayout.SetLayoutFlags (middleText,
                AbsoluteLayoutFlags.None);

            AbsoluteLayout.SetLayoutBounds (middleText,
                new Rectangle (100f, 200f, 200f, 50f));

            simpleLayout.Children.Add (topLeftText);
            simpleLayout.Children.Add (middleText);

            // Accomodate iPhone status bar.
            this.Padding = new Thickness (10, Device.OnPlatform (20, 0, 0), 10, 5);

            this.Content = new StackLayout {
                Children = {
                    header,
                    simpleLayout
                }
            };
        }
    }
}]]></code>
                </example>
                <para>The following image shows the AbsoluteLayout demo from the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">FormsGallery</a></format> sample.
</para>
                <para>
                    <img href="AbsoluteLayout.TripleScreenShot.png" />
                </para>
                <example>
                    <para>XAML for Xamarin.Forms supports the following attached properties for the <see cref="T:Xamarin.Forms.AbsoluteLayout" /> class:</para>
                    <list type="table">
                        <listheader>
                            <term>Attached Property</term>
                            <description>Value</description>
                        </listheader>
                        <item>
                            <term>AbsoluteLayout.LayoutBounds</term>
                            <description>
                                <para>A comma-separated list—possibly with spaces—of four values that specify the bounding rectangle's position and dimensions. The first two values in the list must represent numbers. The latter two values may each either be numbers, or the string "AutoSize". The <c>AbsoluteLayout.LayoutFlags</c> attached property determines how the values in the list are interpreted to create the bounding rectangle.</para>
                            </description>
                        </item>
                        <item>
                            <term>AbsoluteLayout.LayoutFlags</term>
                            <description>
                                <para>
                                    <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration value names: <c>All</c>, <c>None</c>, <c>HeightProportional</c>, <c>WidthProportional</c>, <c>SizeProportional</c>, <c>XProportional</c>, <c>YProportional</c>, or <c>PositionProportional</c>. Application developers can combine any of these flags together by supplying a comma-separated list. </para>
                            </description>
                        </item>
                    </list>
                    <para>Application developers can use XAML to lay out elements with the <see cref="T:Xamarin.Forms.AbsoluteLayout" /> class. The example below places a blue <see cref="T:Xamarin.Forms.BoxView" /> inside an <see cref="T:Xamarin.Forms.AbsoluteLayout" />: </para>
                    <code lang="XAML"><![CDATA[<AbsoluteLayout VerticalOptions="FillAndExpand"
                HorizontalOptions="FillAndExpand">
    <BoxView    AbsoluteLayout.LayoutBounds="0.25, 0.25, 0.5, 0.5"
                Color="Blue"
                AbsoluteLayout.LayoutFlags="All" />
</AbsoluteLayout>
]]></code>
                </example>
                <para>The <see cref="T:Xamarin.Forms.AbsoluteLayout" /> class can lay its child elements out in proportional units, device units, or a combination of both. Application developers should remember the following points when specifying a <see cref="T:Xamarin.Forms.Rectangle" /> structure that will define the layout bounds of a child element:
        <list type="bullet"><item><term>For elements whose height and width fit on the screen, proportional position dimensions in the range [0,1] represent elements that are completely on the screen, regardless of whether the height, width, or both are specified in device or proportional units.</term></item><item><term>The above point means that, to specify an element in the lower right hand corner of the screen and that is half as wide and half as all as the screen, with a  <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> value of <c>All</c>, the application developer would specify "1.0, 1.0, 0.5, 0.5".</term></item><item><term>The app developer can inadvertently cause child elements for which one or both size dimensions were specified proportionally to be displayed partially off the screen, or hidden altogether, by specifying device-unit positions that do not leave enough room for the calculated size of the child.</term></item><item><term>Each part of the bounding <see cref="T:Xamarin.Forms.Rectangle" /> structure is interpreted according to the <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> value that controls it. A given rectangle might, for example, have an X-coordinate that is in device units, a Y-coordinate that is in proportional units, a height that is in proportional units, and a width that is in device units, or any other combination of device and proportional units. </term></item><item><term>Rectangles that, when interpreted by using the current <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> set on the child, represent bounding boxes that are partially or wholly off-screen—for example, by having a width that is larger than the screen width—may give unexpected results.</term></item></list></para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.AbsoluteLayout">
            <summary>Initializes a new instance of the AbsoluteLayout class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AbsoluteLayout.AutoSize">
            <summary>A value that indicates that the width or height of the child should be sized to that childs native size.</summary>
            <value />
            <remarks>
                <para>Application developers can set the width or height of the <see cref="P:Xamarin.Forms.VisualElement.Bounds" /> property to <see cref="P:Xamarin.Forms.AboluteLayout.AutoSize" /> on a visual element when adding to the layout to cause that element to be measured during the layout pass and sized appropriately.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.AbsoluteLayout.Children">
            <summary>Gets the collection of child elements of the AbsoluteLayout.</summary>
            <value>The collection of child elements.</value>
            <remarks>
                <para>Application developers can use implicit collection syntax in XAML to add items to this collection, because this property is the ContentPropertyAttribute for the AbsoluteLayout class.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.GetLayoutBounds(Xamarin.Forms.BindableObject)">
            <param name="bindable">A visual element.</param>
            <summary>Gets the layout bounds of <paramref name="bindable" />.</summary>
            <returns>The layout bounds of the object.</returns>
            <remarks>
                <para>This method supports the <c>AbsoluteLayout.LayoutBounds</c> XAML attached property. In XAML, Application developers can specify a comma-separated list—possibly with spaces—of four values that specify the bounding rectangle's position and dimensions. The first two values in the list must represent numbers. The latter two values may each either be numbers, or the string "AutoSize". The <c>AbsoluteLayout.LayoutFlags</c> attached property determines how the values in the list are interpreted to create the bounding rectangle.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.GetLayoutFlags(Xamarin.Forms.BindableObject)">
            <param name="bindable">A visual element.</param>
            <summary>Gets the layout flags that were specified when <paramref name="bindable" /> was added to an <see cref="T:Xamarin.Forms.AbsoluteLayout" />.</summary>
            <returns>The layout flags of the object.</returns>
            <remarks>
                <para>This method supports the <c>AbsoluteLayout.LayoutFlags</c> XAML attached property. In XAML, Application developers can specify the following <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration value names for the value of this property on the children of a <see cref="T:Xamarin.Forms.AbsoluteLayout" />:</para>
                <list type="bullet">
                    <item>
                        <term>
                            <c>All</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>None</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>HeightProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>WidthProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>SizeProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>XProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>YProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>PositionProportional</c>
                        </term>
                    </item>
                </list>
                <para>Application developers can combine any of the above values by supplying a comma-separated list.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayout.LayoutBoundsProperty">
            <summary>Implements the attached property that represents the layout bounds of child elements. Bindable at run time with the string "LayoutBounds". See Remarks.</summary>
            <remarks>The interface for this property is defined by the <see cref="M:Xamarin.Forms.AbsoluteLayout.GetLayoutBounds" /> and <see cref="M:Xamarin.Forms.AbsoluteLayout.SetLayoutBounds" /> methods.
        </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">The X coordinate of the region that contains the child elements and that is used to calulate proportional values.</param>
            <param name="y">The Y coordinate of the region that contains the child elements and that is used to calulate proportional values.</param>
            <param name="width">The width of the the region that contains the child elements and that is used to calulate proportional values.</param>
            <param name="height">The height of the region that contains the child elements and that is used to calulate proportional values.</param>
            <summary>Positions and sizes the children of an AbsoluteLayout.</summary>
            <remarks>
                <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.LayoutChildren" /> to change the default behavior of <see cref="T:Xamarin.Forms.AbsoluteLayout" />. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.LayoutChildren" /> method and then modify the dimensions and locations of the children directly.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayout.LayoutFlagsProperty">
            <summary>Implements the attached property that contains the <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> values for child elements.</summary>
            <remarks>The interface for this property is defined by the <see cref="M:Xamarin.Forms.AbsoluteLayout.GetLayoutFlags" /> and <see cref="M:Xamarin.Forms.AbsoluteLayout.SetLayoutFlags" /> methods.
        </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">The element that was added to the children.</param>
            <summary>Called when a child is added to the <see cref="T:Xamarin.Forms.AbsoluteLayout" />.</summary>
            <remarks>
                <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildAdded" /> to change the default behavior thata is triggered when a child is added. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildAdded" /> method and then add additional logic.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved(Xamarin.Forms.Element)">
            <param name="child">The element that was removed from the children.</param>
            <summary>Called when a child is removed from the <see cref="T:Xamarin.Forms.AbsoluteLayout" />.</summary>
            <remarks>
                <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved" /> to change the default behavior thata is triggered when a child is removed. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved" /> method and then add additional logic.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the AbsoluteLayout to use.</param>
            <param name="heightConstraint">The available height for the AbsoluteLayout to use.</param>
            <summary>Called during the measure pass of a layout cycle to get the desired size of the AbsoluteLayout.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains the desired size of the AbsoluteLayout.</returns>
            <remarks>
                <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.OnSizeRequest" /> to change the default behavior thata is triggered when a child is removed. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.OnSizeRequest" /> method and then modify the dimensions and locations of the children directly.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.SetLayoutBounds(Xamarin.Forms.BindableObject,Xamarin.Forms.Rectangle)">
            <param name="bindable">The view to delimit by <paramref name="bounds" />.</param>
            <param name="bounds">A rectangle that represents the desired size and shape of <paramref name="bindable" />.</param>
            <summary>Sets the layout bounds of a view that will be used to size it when it is layed out.</summary>
            <remarks>
                <para>This method supports the <c>AbsoluteLayout.LayoutBounds</c> XAML attached property. In XAML, Application developers can specify a comma-separated list—possibly with spaces—of four values that specify the bounding rectangle's position and dimensions. The first two values in the list must represent numbers. The latter two values may each either be numbers, or the string "AutoSize". The <c>AbsoluteLayout.LayoutFlags</c> attached property determines how the values in the list are interpreted to create the bounding rectangle. Application developers can call this method to update the layout of a view after it is added.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.SetLayoutFlags(Xamarin.Forms.BindableObject,Xamarin.Forms.AbsoluteLayoutFlags)">
            <param name="bindable">The view on which to set the layout flags.</param>
            <param name="flags">A <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> that describes the how to interpret the layout bounds for <paramref name="bindable" />.</param>
            <summary>Sets the layout flags of a view that will be used to interpret the layout bounds set on it when it is added to the layout.</summary>
            <remarks>
                <para>This method supports the <c>AbsoluteLayout.LayoutFlags</c> XAML attached property. In XAML, Application developers can specify the following <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration value names for the value of this property on the children of a <see cref="T:Xamarin.Forms.AbsoluteLayout" />:</para>
                <list type="bullet">
                    <item>
                        <term>
                            <c>All</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>None</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>HeightProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>WidthProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>SizeProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>XProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>YProportional</c>
                        </term>
                    </item>
                    <item>
                        <term>
                            <c>PositionProportional</c>
                        </term>
                    </item>
                </list>
                <para>Application developers can combine any of the above values by supplying a comma-separated list. Application developers can call this method to update the layout flags of a view after it is added.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.AbsoluteLayout.IAbsoluteList`1">
            <typeparam name="T">The type of elements in the absolute layout.</typeparam>
            <summary>List interface with overloads for adding elements to an absolute layout.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.IAbsoluteList`1.Add(`0,Xamarin.Forms.Point)">
            <param name="view">The view to add.</param>
            <param name="position">The location at which to position the view.</param>
            <summary>Adds a view to the list at the specified location with automatic sizing.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.IAbsoluteList`1.Add(`0,Xamarin.Forms.Rectangle,Xamarin.Forms.AbsoluteLayoutFlags)">
            <param name="view">The view to add.</param>
            <param name="bounds">The bounds to layout the view with.</param>
            <param name="flags">The flags to interpret bounds with.</param>
            <summary>Adds a view to the list with the specified bounds and flags.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.AbsoluteLayoutFlags">
            <summary>Flags used to modify how layout bounds are interpreted in an <see cref="T:Xamarin.Forms.AbsoluteLayout" />.</summary>
            <remarks>
                <para>The <see cref="T:Xamarin.Forms.AbsoluteLayout" /> class can lay its child elements out in proportional units, device units, or a combination of both. Application developers should remember the following points when specifying a <see cref="T:Xamarin.Forms.Rectangle" /> structure that will define the layout bounds of a child element:
                <list type="bullet"><item><term>For elements whose height and width fit on the screen, proportional position dimensions in the range [0,1] represent elements that are completely on the screen, regardless of whether the height, width, or both are specified in device or proportional units.</term></item><item><term>The above point means that, to specify an element in the lower right hand corner of the screen and that is half as wide and half as all as the screen, with a  <see cref="T:Xamarin.Forms.LayoutFlags" /> value of <c>All</c>, the application developer would specify "0.1, 0.1, 0.5, 0.5".</term></item><item><term>The app developer can inadvertently cause child elements for which one or both size dimensions were specified proportionally to be displayed partially off the screen, or hidden altogether, by specifying device-unit positions that do not leave enough room for the calculated size of the child.</term></item><item><term>Each part of the bounding <see cref="T:Xamarin.Forms.Rectangle" /> structure is interpreted according to the <see cref="T:Xamarin.Forms.LayoutFlags" /> value that controls it. A given rectangle might, for example, have an X-coordinate that is in device units, a Y-coordinate that is in proportional units, a height that is in proportional units, and a width that is in device units, or any other combination of device and proportional units. </term></item><item><term>Rectangles that, when interpreted by using the current <see cref="T:Xamarin.Forms.LayoutFlags" /> set on the child, represent bounding boxes that are partially or wholly off-screen—for example, by having a width that is larger than the screen width—may give unexpected results.</term></item></list></para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.All">
            <summary>Interpret all dimensions proportionally.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.HeightProportional">
            <summary>Interpret height property as proportional to layout height.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.None">
            <summary>Disable all flags.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.PositionProportional">
            <summary>Equivalent to both XProportional | YProportional.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.SizeProportional">
            <summary>Equivalent to both WidthProportional | HeightProportional.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.WidthProportional">
            <summary>Interpret width property as proportional to layout width.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.XProportional">
            <summary>Interpret x property as proportional to the remaining space after width is accounted for.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.YProportional">
            <summary>Interpret y property as proportional to the remaining space after height is accounted for.</summary>
        </member>
        <member name="T:Xamarin.Forms.ActivityIndicator">
            <summary>A visual control used to indicate that something is ongoing.</summary>
            <remarks>
                <para>This control gives a visual clue to the user that something is happening, without information about its progress.</para>
                <para>
                    <img href="ActivityIndicator.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.ActivityIndicator" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Color</term>
                        <description>
                            <para>A color specification, with or without the prefix, "Color". For example, "Color.Red" and "Red" both specify the color red.</para>
                        </description>
                    </item>
                    <item>
                        <term>IsRunning</term>
                        <description>
                            <para>
                                <see langword="true" /> or <see langword="false" />, to indicate whether the animation for <see cref="T:Xamarin.Forms.ActivityIndicator" /> is displayed.</para>
                        </description>
                    </item>
                </list>
                <example>
                    <para>The example below creates a red activity indicator that is animated to imply that an activity is ongoing:</para>
                    <code lang="XAML"><![CDATA[<ActivityIndicator Color="Red" IsRunning="true" />]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ActivityIndicator">
            <summary>Initializes a new instance of the ActivityIndicator class.</summary>
            <remarks>
                <para> The following example shows the initialization of a running ActivityIndicator.
            </para>
                <example>
                    <code lang="C#"><![CDATA[
var indicator = new ActivityIndicator {
  IsRunning = true,
};
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.ActivityIndicator.Color">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> of the ActivityIndicator. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Color" /> used to display the ActivityIndicator. Default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ActivityIndicator.ColorProperty">
            <summary>Identifies the Color bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ActivityIndicator.IsRunning">
            <summary>Gets or sets the value indicating if the ActivityIndicator is running. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating if the ActivityIndicator is running.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ActivityIndicator.IsRunningProperty">
            <summary>Identifies the Color bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Animation">
            <summary>Encapsulates an animation, a collection of functions that modify properties over a user-perceptible time period.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Animation">
            <summary>Creates a new <see cref="T:Xamarin.Forms.Animation" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Animation(System.Action{System.Double},System.Double,System.Double,Xamarin.Forms.Easing,System.Action)">
            <param name="callback">To be added.</param>
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Animation" /> object with the specified parameters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.Add(System.Double,System.Double,Xamarin.Forms.Animation)">
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <param name="animation">To be added.</param>
            <summary>Adds an <see cref="T:Xamarin.Forms.Animation" /> object to this <see cref="T:Xamarin.Forms.Animation" /> that begins at <paramref name="beginAt" /> and finishes at <paramref name="finishAt" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.Commit(Xamarin.Forms.IAnimatable,System.String,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="owner">To be added.</param>
            <param name="name">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>Runs the <paramref name="owner" /> animation with the supplied parameters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.GetCallback">
            <summary>Returns a callback that recursively runs the eased animation step on this <see cref="T:Xamarin.Forms.Animation" /> object and those of its children that have begun and not finished.</summary>
            <returns>A callback that recursively runs the eased animation step on this <see cref="T:Xamarin.Forms.Animation" /> object and those of its children that have begun and not finished.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.GetEnumerator">
            <summary>Returns an enumerator that can be used to iterate over the child <see cref="T:Xamarin.Forms.Animation" /> objects of this <see cref="T:Xamarin.Forms.Animation" /> object.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.Insert(System.Double,System.Double,Xamarin.Forms.Animation)">
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <param name="animation">To be added.</param>
            <summary>Adds an <see cref="T:Xamarin.Forms.Animation" /> object to this <see cref="T:Xamarin.Forms.Animation" /> that begins at <paramref name="beginAt" /> and finishes at <paramref name="finishAt" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.WithConcurrent(Xamarin.Forms.Animation,System.Double,System.Double)">
            <param name="animation">To be added.</param>
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <summary>Adds <paramref name="animation" /> to the children of this <see cref="T:Xamarin.Forms.Animation" /> object and sets the start and end times of <paramref name="animation" /> to <paramref name="beginAt" /> and <paramref name="finishAt" />, respectively.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.WithConcurrent(System.Action{System.Double},System.Double,System.Double,Xamarin.Forms.Easing,System.Double,System.Double)">
            <param name="callback">To be added.</param>
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Animation" /> object with the specified parameters, and adds it to the children of this <see cref="T:Xamarin.Forms.Animation" /> object.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.AnimationExtensions">
            <summary>Extension methods for <see cref="T:Xamarin.Forms.Animation" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.AbortAnimation(Xamarin.Forms.IAnimatable,System.String)">
            <param name="self">To be added.</param>
            <param name="handle">To be added.</param>
            <summary>Stops the animation.</summary>
            <returns>To be added.</returns>
            <remarks>If <paramref name="handle" /> refers to an animation that belongs to this <see cref="T:Xamarin.Forms.IAnimatable" /> instance, then its tweener handlers are removed, the tweener is stopped, the animation is removed from this <see cref="T:Xamarin.Forms.IAnimatable" /> instance, and it is marked as finished. If <paramref name="handle" /> refers to one of the kinetics that belong to this <see cref="T:Xamarin.Forms.IAnimatable" /> instance, then it and its ticker are removed.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>Sets the specified parameters and starts the animation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,Xamarin.Forms.Animation,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="animation">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>Sets the specified parameters and starts the animation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.Double,System.Double,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>Sets the specified parameters and starts the animation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate``1(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,``0},System.Action{``0},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{``0,System.Boolean},System.Func{System.Boolean})">
            <typeparam name="T">To be added.</typeparam>
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="transform">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>Sets the specified parameters and starts the animation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.AnimateKinetic(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,System.Double,System.Boolean},System.Double,System.Double,System.Action)">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="velocity">To be added.</param>
            <param name="drag">To be added.</param>
            <param name="finished">To be added.</param>
            <summary>Sets the specified parameters and starts the kinetic animation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.AnimationIsRunning(Xamarin.Forms.IAnimatable,System.String)">
            <param name="self">To be added.</param>
            <param name="handle">To be added.</param>
            <summary>Returns a Boolean value that indicates whether or not the animation that is specified by <paramref name="handle" /> is running.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Interpolate(System.Double,System.Double,System.Double,System.Boolean)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="reverseVal">To be added.</param>
            <param name="reverse">To be added.</param>
            <summary>Returns a function that performs a linear interpolation between <paramref name="start" /> and <paramref name="end" />.</summary>
            <returns>A function that performs a linear interpolation between <paramref name="start" /> and <paramref name="end" />. Application developers can pass values between 0.0f and 1.0f to this function in order to recieve a value that is offset from <paramref name="start" /> or <paramref name="end" />, depending on the value of <paramref name="reverse" />, by the passed value times the distance between <paramref name="start" /> and <paramref name="end" />.</returns>
            <remarks>If <paramref name="reverse" /> is <see langword="true" />, then the interpolation happens between <paramref name="start" /> and <paramref name="reverseVal" />.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Application">
            <summary>Class that represents a cross-platform mobile application.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Application">
            <summary>Initializes a new <see cref="T:Xamarin.Forms.Application" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Application.AppLinks">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Application.Current">
            <summary>Gets the current application.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Application.MainPage">
            <summary>Gets or sets the main page of the application.</summary>
            <value>To be added.</value>
            <remarks>This property throws an exception if the application developer attempts to set it to <see langword="null" />.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Application.ModalPopped">
            <summary>Event that is raised after a view has been popped modally.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Application.ModalPopping">
            <summary>Event that is raised when a view is modally popped.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Application.ModalPushed">
            <summary>Event that is raised after a view has been pushed modally.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Application.ModalPushing">
            <summary>Event that is raised when a view is modally pushed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Application.OnAppLinkRequestReceived(System.Uri)">
            <param name="uri">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Application.OnParentSet">
            <summary>Throws <see cref="T:System.InvalidOperationException" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Application.OnResume">
            <summary>Application developers override this method to perform actions when the application resumes from a sleeping state.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Application.OnSleep">
            <summary>Application developers override this method to perform actions when the application enters the sleeping state.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Application.OnStart">
            <summary>Application developers override this method to perform actions when the application starts.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Application.Properties">
            <summary>Gets the dictionary of properties for this <see cref="T:Xamarin.Forms.Application" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Application.Resources">
            <summary>Gets or sets the resource dictionary for this <see cref="T:Xamarin.Forms.Application" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Application.SavePropertiesAsync">
            <summary>Asynchronously persists the <see cref="P:Xamarin.Forms.Application.Properties" /> dictionary for the application object.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Application.Xamarin#Forms#IApplicationController#SetAppIndexingProvider(Xamarin.Forms.IAppIndexingProvider)">
            <param name="provider">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.AppLinkEntry">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.AppLinkEntry">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AppLinkEntry.AppLinkUri">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.AppLinkEntry.AppLinkUriProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AppLinkEntry.Description">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.AppLinkEntry.DescriptionProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AppLinkEntry.FromUri(System.Uri)">
            <param name="uri">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AppLinkEntry.IsLinkActive">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.AppLinkEntry.IsLinkActiveProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AppLinkEntry.KeyValues">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AppLinkEntry.Thumbnail">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.AppLinkEntry.ThumbnailProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AppLinkEntry.Title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.AppLinkEntry.TitleProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AppLinkEntry.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Aspect">
            <summary>Defines how an image is displayed.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Aspect.AspectFill">
            <summary>Scale the image to fill the view. Some parts may be clipped in order to fill the view.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Aspect.AspectFit">
            <summary>Scale the image to fit the view. Some parts may be left empty (letter boxing).</summary>
        </member>
        <member name="F:Xamarin.Forms.Aspect.Fill">
            <summary>Scale the image so it exactly fills the view. Scaling may not be uniform in X and Y.</summary>
        </member>
        <member name="T:Xamarin.Forms.BackButtonPressedEventArgs">
            <summary>Internal use only. Contains arguments for the event that is raised when a back button is pressed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BackButtonPressedEventArgs">
            <summary>Internal use only. Initializes a new <see cref="T:Xamarin.Forms.BackButtonPressedEventArgs" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.BackButtonPressedEventArgs.Handled">
            <summary>Internal use only. Gets or sets a value that indicates whether the back button event has already been handled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BaseMenuItem">
            <summary>Base class for menu items.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BaseMenuItem">
            <summary>Intializes a new <see cref="T:Xamarin.Forms.BaseMenuItem" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Behavior">
            <summary>Base class for generalized user-defined behaviors that can respond to arbitrary conditions and events.</summary>
            <remarks>Application developers should specialize the <see cref="T:Xamarin.Forms.Behavior`1" /> generic class, instead of directly using <see cref="T:Xamarin.Forms.Behavior" />.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Behavior.AssociatedType">
            <summary>Gets the type of the objects with which this <see cref="T:Xamarin.Forms.Behavior" /> can be associated.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Behavior.OnAttachedTo(Xamarin.Forms.BindableObject)">
            <param name="bindable">To be added.</param>
            <summary>Application developers override this method to implement the behaviors that will be associated with <paramref name="bindable" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Behavior.OnDetachingFrom(Xamarin.Forms.BindableObject)">
            <param name="bindable">To be added.</param>
            <summary>Application developers override this method to remove the behaviors from <paramref name="bindable" /> that were implemented in a previous call to the <see cref="M:Xamarin.Forms.Behavior.OnAttachedTo" /> method.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Behavior.Xamarin#Forms#IAttachedObject#AttachTo(Xamarin.Forms.BindableObject)">
            <param name="bindable">To be added.</param>
            <summary>Attempts to attach to <paramref name="bindable" />. If successful, calls the <see cref="M:Xamarin.Forms.Behavior.OnAttachedTo" /> method.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Behavior.Xamarin#Forms#IAttachedObject#DetachFrom(Xamarin.Forms.BindableObject)">
            <param name="bindable">To be added.</param>
            <summary>Detaches from <paramref name="bindable" />. Calls the <see cref="M:Xamarin.Forms.Behavior.OnDetachedFrom" /> method.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Behavior`1">
            <typeparam name="T">The type of the objects with which this <see cref="T:Xamarin.Forms.Behavior`1" /> can be associated.</typeparam>
            <summary>Base generic class for generalized user-defined behaviors that can respond to arbitrary conditions and events.</summary>
            <remarks>Application developers should specialize this generic class, instead of directly using <see cref="T:Xamarin.Forms.Behavior" />.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Behavior`1">
            <summary>Creates a new <see cref="T:Xamarin.Forms.Behavior`1" /> instance.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Behavior`1.OnAttachedTo(T)">
            <param name="bindable">To be added.</param>
            <summary>Application developers override this method to implement the behaviors that will be associated with <paramref name="bindable" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Behavior`1.OnAttachedTo(`0)">
            <param name="bindable">To be added.</param>
            <summary>Attaches to the superclass and then calls the <see cref="M:Xamarin.Forms.Behavior`1.OnAttachedTo(T)" /> method on this object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Behavior`1.OnDetachingFrom(T)">
            <param name="bindable">To be added.</param>
            <summary>Application developers override this method to remove the behaviors from <paramref name="bindable" /> that were implemented in a previous call to the <see cref="M:Xamarin.Forms.Behavior`1.OnAttachedTo" /> method.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Behavior`1.OnDetachingFrom(`0)">
            <param name="bindable">To be added.</param>
            <summary>Calls the <see cref="M:Xamarin.Forms.Behavior`1.OnDetachingFrom(T)" /> method and then detaches from the superclass.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableObject">
            <summary>Provides a mechanism by which application developers can propagate changes that are made to data in one object to another, by enabling validation, type coercion, and an event system. <see cref="T:Xamarin.Forms.BindableProperty" />.</summary>
            <remarks>
                <para>The <see cref="T:Xamarin.Forms.BindableObject" /> class provides a data storage mechanism that enables the application developer to synchronize data between objects in response to changes, for example, between the View and View Model in the MVVM design pattern. All of the visual elements in the <see cref="N:Xamarin.Forms" /> namespace inherit from <see cref="T:Xamarin.Forms.BindableObject" /> class, so they can all be used to bind the data behind their user interface elements to View Models that are supplied by the application developer.</para>
                <example>
                    <para>To bind the data behind a property in a <see cref="T:Xamarin.Forms.BindableObject" />, typically a view, to a property in the View Model, application developers should do the following.</para>
                    <para> First, the developer creates a pair of properties on the view, one of which is a <see cref="T:Xamarin.Forms.BindableProperty" />, and the other of which is a property of whatever type is required. In the code below, <c>MockBindableObject</c> stands in for what would typically be a user interface object in production code. Application developers should note the use of <see cref="M:Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object)" /> and <see cref="M:Xamarin.Forms.BindableObject.GetValue" /> to get and set the value on the bound property; The property of the desired type provides the interface that the target of the bound property will implement.</para>
                    <code lang="C#"><![CDATA[
class MockBindableObject : BindableObject
{
    // App developers should use the method below in production code for 
    // better performance
    public static readonly BindableProperty BoundNameProperty =
         BindableProperty.Create ("Foo", typeof (string),
                                  typeof (MockBindableObject),
                                  default(string));

    // App developers should use the method below during development for
    // design-time error checking as the codebase evolves.
    // public static readonly BindableProperty FooProperty 
    //     = BindableProperty.Create<MockBindableObject, string> (
    //         o => o.Foo, default (string)
    //     );

    public string BoundName
    {
        get { return (string) GetValue (BoundNameProperty); }
        set { SetValue (BoundNameProperty, value); }
    }
}
    ]]></code>
                    <para>Second, the developer creates the implementation for the bound property in a class that implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface. In the MVVM design pattern, this is typically done by the View Model. Application developers should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface on classes that they want to use as View Models. In the example below, app developers should take note of the idiomatic way that the <c>Name</c> property is implemented to, first, ensure that the property actually changed and return if it did not, and only then assign the value and call the <see cref="M:Xamarin.Forms.BindableObject.OnPropertyChanged" /> method. Additionally, the <c>Name</c> property in the example below merely wraps the <c>name</c> field. In practice, the application developer may choose a different model in which to store application data.</para>
                    <code lang="C#"><![CDATA[
class MockViewModel : INotifyPropertyChanged
{
    string name;

    public string Name
    {
        get { return name; }
        set
        {
            // OnPropertyChanged should not be called if the property value
            // does not change.
            if (name == value)
                return;
            name = value;
            OnPropertyChanged ();
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    void OnPropertyChanged (string propertyName = null)
    {
        PropertyChangedEventHandler handler = PropertyChanged;
        if (handler != null)
            handler (this, new PropertyChangedEventArgs (propertyName));
    }
}]]></code>
                    <para>Third, and finally, the application developer binds an instance of a BindableObject to an instance that implements INotifyPropertyChanged. In the vocabulary of the MVVM design pattern, this is "binding an instance of the View to an instance of a View Model." Once this step is complete, changes in the data are propagated between the View and View Model in a way that is determined by the value of the <see cref="T:Xamarin.Forms.BindingMode" /> enumeration, if any, that was passed during the binding step.</para>
                    <para>The code below, when included in a project that reference the classes above, creates an instance of both <c>MockBindable</c> and <c>MockViewModel</c>, performs some intitialization, sets the binding, and then demonstrates a one-way binding. The code below runs without throwing an exception.</para>
                    <code lang="C#"><![CDATA[
public static void OneWayDemo ()
{
    var view = new MockBindableObject ();
    var viewModel = new MockViewModel ();

    // Pre-load the ViewModel, for demonstration purposes
    viewModel.Name = "Testing";

    // Create a one-way (default) binding
    view.SetBinding (MockBindableObject.BoundNameProperty, new Binding ("Name"));
    
    // App developers should only set the binding context after all
    // calls to SetBinding() have been made, for performance reasons.
    view.BindingContext = viewModel;

    // In a one way binding, the ViewModel value will be used to update
    // the values in the View during initialization
    if (view.BoundName != "Testing")
        throw new Exception ();

    view.BoundName = "gnitseT";

    // in a one way binding, changes to the View will NOT update the ViewModel
    if (viewModel.Name == "gnitseT")
        throw new Exception ();
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.BindableObject">
            <summary>Initializes a new instance of the BindableObject class.</summary>
            <remarks>The <see cref="T:Xamarin.Forms.BindableObject" /> class is abstract, and this constructor is protected. It is invoked by child constructors.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.ApplyBindings(System.Object)">
            <param name="oldContext">The object that contains the properties that will be targeted by the bound properties that belong to this <see cref="T:Xamarin.Forms.BindableObject" />. This parameter is optional.</param>
            <summary>Apply the bindings to <c>this</c><see cref="P:Xamarin.Forms.BindableObject.BindingContex" />.</summary>
            <remarks>
                <para>If an object is passed for the <paramref name="oldContext" /> argument, bindings are first unapplied from <paramref name="oldContext" />. This method removes any current bindings from the old context, and applies every binding to the current <see cref="P:Xamarin.Forms.BindableObject.BindingContex" />. Application developers could use this method to bind the UI from a new View to an existing ViewModel, while optionally removing the bindings from the old View. Application developers can omit the <paramref name="oldContext" /> argument in order to leave the old bindings in place.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.BindableObject.BindingContext">
            <summary>Gets or sets object that contains the properties that will be targeted by the bound properties that belong to this <see cref="T:Xamarin.Forms.BindableObject" />.</summary>
            <value>An <see cref="T:System.Object" /> that contains the properties that will be targeted by the bound properties that belong to this <see cref="T:Xamarin.Forms.BindableObject" />. This is a bindable property.</value>
            <remarks>
                <block subset="none" type="note">Typically, the runtime performance is better if  <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> is set after all calls to <see cref="M:Xamarin.Forms.BindableObject.SetBinding" /> have been made.</block>
                <para>The following example shows how to apply a BindingContext and a Binding to a Label (inherits from BindableObject):</para>
                <example>
                    <code lang="C#"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, "Name");
label.BindingContext = new {Name = "John Doe", Company = "Xamarin"};
Debug.WriteLine (label.Text); //prints "John Doe"
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.BindableObject.BindingContextChanged">
            <summary>Raised whenever the <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> property changes.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.BindableObject.BindingContextProperty">
            <summary>Implements the bound property whose interface is provided by the <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> property.</summary>
            <remarks>
                <block subset="none" type="note">Typically, the runtime performance is better if  <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> is set after all calls to <see cref="M:Xamarin.Forms.BindableObject.SetBinding" /> have been made.</block>
                <para>The following example shows how to set a binding to the BindingContext:</para>
                <example>
                    <code lang="C#"><![CDATA[
class PersonView : ContentView 
{
  public PersonView ()
  {
    var label = new Label ();
    label.SetBinding (Label.TextProperty, "Name");
    Content = label;
  }
}

var stack = new StackLayout {
  Orientation = StackOrientation.Vertical,  
};

var jane = new PersonView ();
jane.SetBinding (BindableObject.BindingContext, "Jane");
stack.Children.Add (jane);

var john = new PersonView ();
john.SetBinding (BindableObject.BindingContext, "John");
stack.Children.Add (john);

stack.BindingContext = new {Jane = new {Name = "Jane Doe"}, John = new {Name = "John Doe"}};
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty)">
            <param name="property">The BindableProperty to clear.</param>
            <summary>Clears any value set by <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> for <paramref name="property" />.</summary>
            <remarks>
                <para>Calling this method on a readonly property will result in an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey)">
            <param name="propertyKey">The BindablePropertyKey that identifies the <see cref="T:Xamarin.Forms.BindableProperty" /> to clear.</param>
            <summary>Clears any value set by <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> for the property that is identified by <paramref name="propertyKey" />.</summary>
            <remarks>
                <para>Calling this method on a readonly property will result in an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty)">
            <param name="property">The BindableProperty for which to get the value.</param>
            <summary>Returns the value that is contained the BindableProperty.</summary>
            <returns>The value that is contained the <see cref="T:Xamarin.Forms.BindableProperty" />.</returns>
            <remarks>
                <para>
                    <see cref="M:Xamarin.Forms.BindableObject.GetValue" /> and <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> are used to access the values of properties that are implemented by a <see cref="T:Xamarin.Forms.BindableProperty" />. That is, application developers typically provide an interface for a bound property by defining <see langword="public" /> property whose <see langword="get" /> accessor casts  the result of <see cref="M:Xamarin.Forms.BindableObject.GetValue" /> to the appropriate type and returns it, and whose <see langword="set" /> accessor uses <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> to set the value on the correct property. Application developers should perform no other steps in the public property that defines the interface of the bound property.</para>
                <example>
                    <para>The following example shows how to create a bindable property interface for an implementation that will be provided in the target property when the binding is made at run time.</para>
                    <code lang="C#"><![CDATA[
class MyBindable : BindableObject
{
  public static readonly BindableProperty MyProperty = 
    BindableProperty.Create<MyBindable, string> (w => w.My, default(string));

  public string My {
    get { return (string)GetValue (MyProperty); }
    set { SetValue (MyProperty, value); } 
  }
}
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.OnBindingContextChanged">
            <summary>Override this method to execute an action when the BindingContext changes.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.OnPropertyChanged(System.String)">
            <param name="propertyName">The name of the property that changed.</param>
            <summary>Call this method from a child class to notify that a change happened on a property.</summary>
            <remarks>
                <para>A <see cref="T:Xamarin.Forms.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Xamarin.Forms.BindableProperty" /> as the backend store.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.OnPropertyChanging(System.String)">
            <param name="propertyName">The name of the property that is changing.</param>
            <summary>Call this method from a child class to notify that a change is going to happen on a property.</summary>
            <remarks>A <see cref="T:Xamarin.Forms.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Xamarin.Forms.BindableProperty" /> as the backend store.</remarks>
        </member>
        <member name="E:Xamarin.Forms.BindableObject.PropertyChanged">
            <summary>Raised when a property has changed.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.BindableObject.PropertyChanging">
            <summary>Raised when a property is about to change.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty)">
            <param name="property">The BindableProperty from which to remove bindings.</param>
            <summary>Removes a previously set binding.</summary>
            <remarks>
                <para>This method succeeds even if <paramref name="property" /> is not bound.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty,Xamarin.Forms.BindingBase)">
            <param name="targetProperty">The BindableProperty on which to set a binding.</param>
            <param name="binding">The binding to set.</param>
            <summary>Assigns a binding to a property.</summary>
            <remarks>
                <para>The following example shows how to set a binding to a property:</para>
                <example>
                    <code lang="C#"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, new Binding ("Name"));
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetInheritedBindingContext(Xamarin.Forms.BindableObject,System.Object)">
            <param name="bindable">The object on which to set the inherited binding context.</param>
            <param name="value">The inherited context to set.</param>
            <summary>Sets the inherited context to a nested element.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty,System.Object)">
            <param name="property">The BindableProperty on which to assign a value.</param>
            <param name="value">The value to set.</param>
            <summary>Sets the value of the specified property.</summary>
            <remarks>
                <para>
                    <see cref="M:Xamarin.Forms.BindableObject.GetValue" /> and <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> are used to access the values of properties that are implemented by a <see cref="T:Xamarin.Forms.BindableProperty" />. That is, application developers typically provide an interface for a bound property by defining <see langword="public" /> property whose <see langword="get" /> accessor casts  the result of <see cref="M:Xamarin.Forms.BindableObject.GetValue" /> to the appropriate type and returns it, and whose <see langword="set" /> accessor uses <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> to set the value on the correct property. Application developers should perform no other steps in the public property that defines the interface of the bound property.</para>
                <example>
                    <para>The following example shows how to create a bindable property interface for an implementation that will be provided in the target property when the binding is made at run time.</para>
                    <code lang="C#"><![CDATA[
class MyBindable : BindableObject
{
    public static readonly BindableProperty MyProperty = 
      BindableProperty.Create<MyBindable, string> (w => w.My, default(string));

    public string My {
      get { return (string)GetValue (MyProperty); }
      set { SetValue (MyProperty, value); } 
    }
}
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey,System.Object)">
            <param name="propertyKey">The BindablePropertyKey on which to assign a value.</param>
            <param name="value">The value to set.</param>
            <summary>Sets the value of the propertyKey.</summary>
            <remarks>
                <para>This method and <see cref="T:Xamarin.Forms.BindablePropertyKey" /> are useful to implement BindableProperties with limited write access. The write access is limited to the scope of the BindablePropertyKey.</para>
                <para>The following example shows how to declare a BindableProperty with "internal" write access.</para>
                <example>
                    <code lang="C#"><![CDATA[
class MyBindable : BindableObject
{
  internal static readonly BindablePropertyKey MyPropertyKey = 
    BindableProperty.CreateReadOnly<MyBindable, string> (w => w.My, default(string));
  public static readonly BindableProperty MyProperty = MyPropertyKey.BindableProperty;

  public string My {
    get { return (string)GetValue (MyProperty); }
    internal set { SetValue (MyPropertyKey, value); } 
  }
}
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.UnapplyBindings">
            <summary>Unapplies all previously set bindings.</summary>
            <remarks>
                <para>This method removes all current bindings from the current context.</para>
                <block subset="none" type="note">Changing a bound property requires that the binding count for a bound property must be 0. The <see cref="M:Xamarin.Forms.BindableObject.UnApplyBindings" /> method merely decrements the cound, and does not remove all bindings everywhere.</block>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.Xamarin#Forms#IDynamicResourceHandler#SetDynamicResource(Xamarin.Forms.BindableProperty,System.String)">
            <param name="property">To be added.</param>
            <param name="key">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.Xamarin#Forms#Internals#IDynamicResourceHandler#SetDynamicResource(Xamarin.Forms.BindableProperty,System.String)">
            <param name="property">To be added.</param>
            <param name="key">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableObjectExtensions">
            <summary>Contains convenience extension methods for <see cref="T:Xamarin.Forms.BindableObject" />.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObjectExtensions.SetBinding(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.String)">
            <param name="self">The <see cref="T:Xamarin.Forms.BindableObject" />.</param>
            <param name="targetProperty">The BindableProperty on which to set a binding.</param>
            <param name="path">A <see cref="T:System.String" /> indicating the property path to bind to.</param>
            <summary>Creates and applies a binding to a property.</summary>
            <remarks>
                <para>The following example shows how to use the extension method to set a binding.</para>
                <example>
                    <code lang="C#"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, "Name");
label.BindingContext = new {Name = "John Doe", Company = "Xamarin"};
Debug.WriteLine (label.Text); //prints "John Doe"
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObjectExtensions.SetBinding(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.String)">
            <param name="self">The <see cref="T:Xamarin.Forms.BindableObject" />.</param>
            <param name="targetProperty">The BindableProperty on which to set a bindinge.</param>
            <param name="path">A <see cref="T:System.String" /> indicating the property path to bind to.</param>
            <param name="mode">The <see cref="T:Xamarin.Forms.BindingMode" /> for the binding. This parameter is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">An <see cref="T:Xamarin.Forms.IValueConverter" /> for the binding. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A string used as stringFormat for the binding. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>Creates and applies a binding to a property.</summary>
            <remarks>
                <para>The following example shows how to use the extension method to set a binding.</para>
                <example>
                    <code lang="C#"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, "Name");
label.BindingContext = new {Name = "John Doe", Company = "Xamarin"};
Debug.WriteLine (label.Text); //prints "John Doe"
      ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObjectExtensions.SetBinding``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.String)">
            <typeparam name="TSource">The source type.</typeparam>
            <param name="self">The BindableObject.</param>
            <param name="targetProperty">The BindableProperty to bind to</param>
            <param name="sourceProperty">An expression used to retrieve the source path.</param>
            <param name="mode">The BindingMode for the binding. This parameter is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">An IValueConverter for the binding. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A string used as stringFormat for the binding. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>Creates and applies a binding from an expression.</summary>
            <remarks>
                <para>This extension method uses Expression instead of path to creates and sets bindings. Using Expressions is more refactoring friendly.</para>
                <para>This following example illustrates the setting of a binding using the extension method.</para>
                <example>
                    <code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

var label = new Label ();
label.SetBinding<PersonViewModel> (Label.TextProperty, vm => vm.Name);
label.BindingContext = new PersonViewModel {
  Name = "John Doe", 
  Company = "Xamarin"
};
Debug.WriteLine (label.Text); //prints "John Doe"
      ]]></code>
                </example>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty">
            <summary>A BindableProperty is a backing store for properties allowing bindings on <see cref="T:Xamarin.Forms.BindableObject" />.</summary>
            <remarks />
            <related type="article" href="https://blog.xamarin.com/introduction-to-data-binding/" />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.Create(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindableProperty class.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.Create(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate,Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">To be added.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types..</param>
            <summary>Creates a new instance of the BindableProperty class.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="getter">An expression identifying the getter for the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1},Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate{``0,``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="getter">An expression identifying the getter for the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">To be added.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types..</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttached(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindableProperty class for an attached property.</summary>
            <returns>A newly created attached BindableProperty.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttached(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate,Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types..</param>
            <summary>Creates a new instance of the BindableProperty class for an attached property.</summary>
            <returns>A newly created attached BindableProperty.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttached``2(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.BindableObject,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="staticgetter">An expression identifying a static method returning the value of the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks>
                <para>Attached properties are bindable properties that are bound to an object other than their parent. Often, they are used for child items in tables and grids, where data about the location of an item is maintained by its parent, but must be accessed from the child item itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttached``2(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.BindableObject,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1},Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate{Xamarin.Forms.BindableObject,``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="staticgetter">An expression identifying a static method returning the value of the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types..</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks>
                <para>Attached properties are bindable properties that are bound to an object other than their parent. Often, they are used for child items in tables and grids, where data about the location of an item is maintained by its parent, but must be accessed from the child item itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttachedReadOnly(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindableProperty class for attached read-only properties.</summary>
            <returns>A newly created attached read-only BindableProperty.</returns>
            <remarks>
                <para>Attached properties are bindable properties that are bound to an object other than their parent. Often, they are used for child items in tables and grids, where data about the location of an item is maintained by its parent, but must be accessed from the child item itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttachedReadOnly(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate,Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types.</param>
            <summary>Creates a new instance of the BindableProperty class for attached read-only properties.</summary>
            <returns>A newly created attached read-only BindableProperty.</returns>
            <remarks>
                <para>Attached properties are bindable properties that are bound to an object other than their parent. Often, they are used for child items in tables and grids, where data about the location of an item is maintained by its parent, but must be accessed from the child item itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttachedReadOnly``2(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.BindableObject,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="staticgetter">An expression identifying a static method returning the value of the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindablePropertyKey.</returns>
            <remarks>
                <para>Attached properties are bindable properties that are bound to an object other than their parent. Often, they are used for child items in tables and grids, where data about the location of an item is maintained by its parent, but must be accessed from the child item itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttachedReadOnly``2(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.BindableObject,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1},Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate{Xamarin.Forms.BindableObject,``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="staticgetter">An expression identifying a static method returning the value of the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types.</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindablePropertyKey.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateReadOnly(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindablePropertyKey class.</summary>
            <returns />
            <remarks>
                <para>Attached properties are bindable properties that are bound to an object other than their parent. Often, they are used for child items in tables and grids, where data about the location of an item is maintained by its parent, but must be accessed from the child item itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateReadOnly(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate,Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">To be added.</param>
            <param name="propertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types.</param>
            <summary>Creates a new instance of the BindablePropertyKey class.</summary>
            <returns />
            <para>Attached properties are bindable properties that are bound to an object other than their parent. Often, they are used for child items in tables and grids, where data about the location of an item is maintained by its parent, but must be accessed from the child item itself.</para>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateReadOnly``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="getter">An expression identifying the getter for the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindablePropertyKey.</returns>
            <remarks>
                <para>A BindablePropertyKey is used to restrict write access to a property, either via SetValue() or binding. A BindableProperty is usually defined too, to give broader read access</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateReadOnly``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1},Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate{``0,``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="getter">An expression identifying the getter for the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <param name="defaultValueCreator">A Func used to initialize default value for reference types.</param>
            <summary>Deprecated. Do not use.</summary>
            <returns>A newly created BindablePropertyKey.</returns>
            <remarks>
                <para>A BindablePropertyKey is used to restrict write access to a property, either via SetValue() or binding. A BindableProperty is usually defined too, to give broader read access</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.DeclaringType">
            <summary>Gets the type declaring the BindableProperty</summary>
            <value />
            <remarks>Unused</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.DefaultBindingMode">
            <summary>Gets the default BindingMode.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.DefaultValue">
            <summary>Gets the default value for the BindableProperty.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.DefaultValueCreator">
            <summary>Gets the Func used as default value creator.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.IsReadOnly">
            <summary>Gets a value indicating if the BindableProperty is created form a BindablePropertyKey.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.PropertyName">
            <summary>Gets the property name.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.ReturnType">
            <summary>Gets the type of the BindableProperty.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate">
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Delegate for BindableProperty.PropertyChanged.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.BindingPropertyChangedDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.PropertyChanged.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate">
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Delegate for BindableProperty.PropertyChanging.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.BindingPropertyChangingDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.PropertyChanging.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+CoerceValueDelegate">
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Delegate for BindableProperty.CoerceValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.CoerceValueDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.CoerceValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+CreateDefaultValueDelegate">
            <param name="bindable">To be added.</param>
            <summary>Strongly typed delegate for BindableProperty.DefaultValueCreator.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.CreateDefaultValueDelegate`2">
            <typeparam name="TDeclarer">To be added.</typeparam>
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <summary>Delegate for BindableProperty.DefaultValueCreator.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+ValidateValueDelegate">
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Delegate for BindableProperty.ValidateValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.ValidateValueDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.ValidateValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindablePropertyConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> for bindable properties.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BindablePropertyConverter">
            <summary>Creates a new <see cref="TXamarin.Forms.BindablePropertyConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindablePropertyConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns <see langword="true" /> if the source type can be converted with this type converter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindablePropertyConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> with the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindablePropertyConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a bindable property when supplied a string of the form <c>Type.PropertyName</c>.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindablePropertyConverter.Xamarin#Forms#IExtendedTypeConverter#ConvertFrom(System.Globalization.CultureInfo,System.Object,System.IServiceProvider)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>For internal use only.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindablePropertyConverter.Xamarin#Forms#IExtendedTypeConverter#ConvertFromInvariantString(System.String,System.IServiceProvider)">
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>For internal use only.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindablePropertyKey">
            <summary>The secret key to a BindableProperty, used to implement a BindableProperty with restricted write access.</summary>
            <remarks>
                <para>The following example shows the creation of a BindablePropertyKey. Write access is <see langword="internal" /> while read access is <see langword="public" />.</para>
                <example>
                    <code lang="C#"><![CDATA[
class Bindable : BindableObject
{
  internal static readonly BindablePropertyKey FooPropertyKey = 
    BindableProperty.CreateReadOnly<Bindable, string> (w => w.Foo, default(string));

  public static readonly BindableProperty FooProperty = FooPropertyKey.BindableProperty;

  public string Foo {
    get { return (string)GetValue (FooProperty); }
    internal set { SetValue (FooPropertyKey, value); } 
  }
}
      ]]></code>
                </example>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.BindablePropertyKey.BindableProperty">
            <summary>Gets the BindableProperty.</summary>
            <value>A BindableProperty used for read access.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Binding">
            <summary>A single 1:1 immutable data binding.</summary>
            <remarks>This class is immutable.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Binding">
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.Binding" /> class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Binding(System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String)">
            <param name="path">The property path.</param>
            <param name="mode">The binding mode. This property is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">The converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="converterParameter">An user-defined parameter to pass to the converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A String format. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.Binding" /> class.</summary>
            <remarks>
                <para>The following example shows how to set a binding to a property with a BindingMode and Converter:</para>
                <example>
                    <code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

public class ReverseConverter : IValueConverter
{
  public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
  {
    var s = value as string;
    if (s == null)
      return value;
    return new string (s.Reverse ().ToArray ());
  }

  public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
  {
    var s = value as string;
    if (s == null)
      return value;
    return new string (s.Reverse ().ToArray ());
  }
}

var label = new Label ();
PersonViewModel person;
label.BindingContext = person = new PersonViewModel { Name = "John Doe", Company= "Xamarin" };
label.SetBinding (Label.TextProperty, new Binding ("Name", mode: BindingMode.TwoWay, converter: new ReverseConverter ()));
Debug.WriteLine (label.Text); //prints "eoD nhoJ". ReverseConverter.Convert () is invoked in this case.

label.Text = "ooF";
Debug.WriteLine (person.Name); //prints "Foo". ReverseConverter.ConvertBack () is invoked in this case. The label Text change is propagated back as the BindingMode is TwoWay.
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Binding(System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.Object)">
            <param name="path">The property path.</param>
            <param name="mode">The binding mode. This property is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">The converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="converterParameter">An user-defined parameter to pass to the converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A String format. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="source">An object used as the source for this binding. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.Binding" /> class.</summary>
            <remarks>
                <para>The following example shows how to set a binding to a property with a BindingMode and Converter:</para>
                <example>
                    <code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

public class ReverseConverter : IValueConverter
{
  public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
  {
    var s = value as string;
    if (s == null)
      return value;
    return new string (s.Reverse ().ToArray ());
  }

  public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
  {
    var s = value as string;
    if (s == null)
      return value;
    return new string (s.Reverse ().ToArray ());
  }
}

var label = new Label ();
PersonViewModel person;
label.BindingContext = person = new PersonViewModel { Name = "John Doe", Company= "Xamarin" };
label.SetBinding (Label.TextProperty, new Binding ("Name", mode: BindingMode.TwoWay, converter: new ReverseConverter ()));
Debug.WriteLine (label.Text); //prints "eoD nhoJ". ReverseConverter.Convert () is invoked in this case.

label.Text = "ooF";
Debug.WriteLine (person.Name); //prints "Foo". ReverseConverter.ConvertBack () is invoked in this case. The label Text change is propagated back as the BindingMode is TwoWay.
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Binding.Converter">
            <summary>Gets or sets the converter to be used for this binding ?</summary>
            <value>An IValueConverter, or <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Binding.ConverterParameter">
            <summary>Gets or sets the parameter passed as argument to the converter.</summary>
            <value>An object, or <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Binding.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String)">
            <typeparam name="TSource">The type of the source of the binding.</typeparam>
            <param name="propertyGetter">An expression used to retrieve the binding path.</param>
            <param name="mode">The binding mode. This property is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">The converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="converterParameter">An user-defined parameter to pass to the converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A String format. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>This is a convenient factory method to create a binding from an expression, instead of a property name. This api is more resilient to refactoring.</summary>
            <returns>A newly created binding.</returns>
            <remarks>
                <para>The following example shows how to set a binding to a property :</para>
                <example>
                    <code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

var label = new Label ();
PersonViewModel person;
label.BindingContext = person = new PersonViewModel { Name = "John Doe", Company= "Xamarin" };
label.SetBinding (Label.TextProperty, Binding.Create<PersonViewModel> (vm => vm.Name));
Debug.WriteLine (label.Text); //prints "John Doe".
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Binding.Path">
            <summary>Gets or sets the path of the property</summary>
            <value>A string indicating the path to the property.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Binding.Source">
            <summary>Gets or sets the source of the binding.</summary>
            <value>An object used as the binding source.</value>
            <remarks>If the Source is not null, the BindingContext is ignored, and the Source is used instead. This allows to set a source for a single Binding, and not for all the Bindings applied to the BindableObject.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindingBase">
            <summary>An abstract class that provides a <see cref="T:Xamarin.Forms.BindingMode" /> and a formatting option.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingBase.DisableCollectionSynchronization(System.Collections.IEnumerable)">
            <param name="collection">To be added.</param>
            <summary>Stops synchronization on the <paramref name="collection" />.</summary>
            <remarks>See <see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" /> for more information on enabling and disabling synchronization of collections in multithreaded environments.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,Xamarin.Forms.CollectionSynchronizationCallback)">
            <param name="collection">The collection that will be read or updated.</param>
            <param name="context">The context or lock object that will be passed to <paramref name="callback" />. May be <see langword="null" />.</param>
            <param name="callback">The synchronization callback.</param>
            <summary>Starts synchronization on the <paramref name="collection" /> by using <paramref name="callback" /> and <paramref name="context" />.</summary>
            <remarks>
                <para>Application developers implement <paramref name="callback" /> and pass it to the <see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" /> method to enable correct multithreaded access to <paramref name="collection" />. After synchronization is enabled, the Xamarin.Forms framework passes an access method, <paramref name="context" />, and a <see langword="bool" /> that indicates whether write access is needed, to the application developer's implementation of <see cref="T:Xamarin.Forms.CollectionSynchronizationCallback" /> each time that the framework needs to modify the collection in a multithreaded environment. The application developer's implementation should decide, based on the <paramref name="context" /> object (which may be merely a locking object or the object on which the collection lives) and the value of the <paramref name="writeAccess" /><see langword="bool" /> parameter, whether or not to <c>lock</c> while calling <paramref name="accessMethod" />.</para>
                <para>Because Xamarin.Forms maintains a weak reference to <paramref name="collection" />, application developers do not need to call <see cref="M:Xamarin.Forms.BindingBase.DisableCollectionSynchronization" /> to aid in garbage collection.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.BindingBase.Mode">
            <summary>Gets or sets the mode for this binding.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindingBase.StringFormat">
            <summary>Gets or sets the string format for this binding.</summary>
            <value>
          A string specifying the format for the value of this binding.
        </value>
            <remarks>
                <para>
            Used for providing a display format for the binding value or compositing the value with other
            text. Implementors of <see cref="T:Xamarin.Forms.BindingBase" /> decide how the string format is utilized, but
            all support standard <see cref="M:System.String.Format" /> conventions.
          </para>
                <para>
                    <see cref="T:Xamarin.Forms.Binding" /> allows for one argument for its singular value.
          </para>
                <example>
                    <para>
              A simple example showing compositing text and determining the display format for the value with a
              <see cref="T:Xamarin.Forms.Binding" /></para>
                    <code language="C#"><![CDATA[
Label label = new Label();
label.AddBinding (new Binding (Label.TextProperty, "Price") {
  StringFormat = "Price: {0:C2}"
});
]]></code>
                </example>
            </remarks>
            <altmember cref="M:System.String.Format" />
        </member>
        <member name="M:Xamarin.Forms.BindingBase.ThrowIfApplied">
            <summary>Throws an <see cref="T:System.InvalidOperationException" /> if the binding has been applied.</summary>
            <remarks>
                <para>Use this method in property setters as bindings can not be changed once applied.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.BindingCondition">
            <summary>Class that represents a value comparison with the target of an arbitrary binding.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BindingCondition">
            <summary>Initializes a new <see cref="T:Xamarin.Forms.BindingCondition" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindingCondition.Binding">
            <summary>Gets or sets the binding against which the <see cref="P:Xamarin.Forms.BindingCondition.Value" /> property will be compared.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindingCondition.Value">
            <summary>The binding value that satisfies the condition.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingCondition.Xamarin#Forms#Xaml#IValueProvider#ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>Used by XAML infrastructure.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindingMode">
            <summary>The direction of changes propagation for bindings.</summary>
            <remarks>
                <para>The following examples shows some BindingMode use cases.</para>
                <example>
                    <code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

Label label;
PersonViewModel viewmodel;

//BindingMode.OneWay
label = new Label ();
label.BindingContext = viewmodel = new PersonViewModel ();
label.SetBinding<PersonViewModel> (Label.TextProperty, vm => vm.Name, mode: BindingMode.OneWay);

viewmodel.Name = "John Doe";
Debug.WriteLine (label.Text); //prints "John Doe"
label.Text = "Foo";
Debug.WriteLine (viewmodel.Name); //prints "John Doe"


//BindingMode.TwoWay
label = new Label ();
label.BindingContext = viewmodel = new PersonViewModel ();
label.SetBinding<PersonViewModel> (Label.TextProperty, vm => vm.Name, mode: BindingMode.TwoWay);

viewmodel.Name = "John Doe";
Debug.WriteLine (label.Text); //prints "John Doe"
label.Text = "Foo";
Debug.WriteLine (viewmodel.Name); //prints "Foo"


//BindingMode.OneWayToSource
label = new Label ();
label.BindingContext = viewmodel = new PersonViewModel ();
label.SetBinding<PersonViewModel> (Label.TextProperty, vm => vm.Name, mode: BindingMode.OneWayToSource);

viewmodel.Name = "John Doe";
Debug.WriteLine (label.Text); //prints ""
label.Text = "Foo";
Debug.WriteLine (viewmodel.Name); //prints "Foo"
    ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.Default">
            <summary>When used in Bindings, indicates that the Binding should use the <see cref="P:Xamarin.Forms.BindableProperty.DefaultBindingMode" />. When used in BindableProperty declaration, defaults to BindingMode.OneWay.</summary>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.OneWay">
            <summary>Indicates that the binding should only propagates changes from source (usually the View Model) to target (the BindableObject). This is the default mode for most BindableProperty values.</summary>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.OneWayToSource">
            <summary>Indicates that the binding should only propagates changes from target (the BindableObject) to source (usually the View Model). This is mainly used for read-only BindableProperty values.</summary>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.TwoWay">
            <summary>Indicates that the binding should propagates changes from source (usually the View Model) to target (the BindableObject) in both directions.</summary>
        </member>
        <member name="T:Xamarin.Forms.BindingTypeConverter">
            <summary>Type converter that converts from source types to <see cref="T:Xamarin.Forms.Binding" /></summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BindingTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.BindingTypeConverter" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.BindingTypeConverter" /> can convert <paramref name="sourceType" /> to <see cref="T:Xamarin.Forms.Binding" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> to <see cref="T:Xamarin.Forms.Binding" /> by using <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Converts a property path to a binding.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BoundsConstraint">
            <summary>A bounds layout constraint used by <see cref="T:Xamarin.Forms.RelativeLayout" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BoundsConstraint.FromExpression(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.Rectangle}},System.Collections.Generic.IEnumerable{Xamarin.Forms.View})">
            <param name="expression">To be added.</param>
            <param name="parents">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.BoundsConstraint" /> object that contains the compiled version of <paramref name="expression" /> and is relative to either <paramref name="parents" /> or the views referred to in <paramref name="expression" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BoundsTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts strings into <see cref="T:Xamarin.Forms.Rectangle" />s for use with <see cref="T:Xamarin.Forms.AbsoluteLayout" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BoundsTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.BoundsTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BoundsTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.BoundsTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.Rectangle" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BoundsTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Rectangle" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BoundsTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BoxView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> used to draw a solid colored rectangle.</summary>
            <remarks>
                <para>BoxView is a useful stand-in for images or custom elements when doing initial prototyping. BoxView has a default size request of 40x40. If you need a different size, assign the <see cref="P:Xamarin.Forms.VisualElement.WidthRequest" /> and <see cref="P:Xamarin.Forms.VisualElement.HeightRequest" /> properties.</para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.BoxView" /> class:</para>
                <example>
                    <para>The example below creates a red <see cref="T:Xamarin.Forms.Boxview" /> with the default width and height.</para>
                    <code lang="XAML"><![CDATA[<BoxView Color="Red" />]]></code>
                </example>
                <para>The following example shows a basic use:</para>
                <example>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class BoxViewDemoPage : ContentPage
    {
        public BoxViewDemoPage()
        {
            Label header = new Label
            {
                Text = "BoxView",
                Font = Font.BoldSystemFontOfSize(50),
                HorizontalOptions = LayoutOptions.Center
            };

            BoxView boxView = new BoxView
            {
                Color = Color.Accent,
                WidthRequest = 150,
                HeightRequest = 150,
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children = 
                {
                    header,
                    boxView
                }
            };
        }
    }
}
]]></code>
                </example>
                <para>
                    <img href="BoxView.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.BoxView">
            <summary>Initializes a new instance of the BoxView class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BoxView.Color">
            <summary>Gets or sets the color which will fill the rectangle. This is a bindable property.</summary>
            <value>The color that is used to fill the rectangle. The default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.BoxView.ColorProperty">
            <summary>Identifies the Color bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BoxView.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Method that is called when a size request is made to the box view.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Button">
            <summary>A button <see cref="T:Xamarin.Forms.View" /> that reacts to touch events.</summary>
            <remarks>
                <example>
                    <para>The following example shows a basic use:</para>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class ButtonDemoPage : ContentPage
    {
        Label label;
        int clickTotal = 0;

        public ButtonDemoPage()
        {
            Label header = new Label
            {
                Text = "Button",
                Font = Font.BoldSystemFontOfSize(50),
                HorizontalOptions = LayoutOptions.Center
            };

            Button button = new Button
            {
                Text = "Click Me!",
                Font = Font.SystemFontOfSize(NamedSize.Large),
                BorderWidth = 1,
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };
            button.Clicked += OnButtonClicked;

            label = new Label
            {
                Text = "0 button clicks",
                Font = Font.SystemFontOfSize(NamedSize.Large),
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children = 
                {
                    header,
                    button,
                    label
                }
            };
        }

        void OnButtonClicked(object sender, EventArgs e)
        {
            clickTotal += 1;
            label.Text = String.Format("{0} button click{1}",
                                       clickTotal, clickTotal == 1 ? "" : "s");
        }
    }
}
]]></code>
                </example>
                <para>
                    <img href="Button.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Button">
            <summary>Initializes a new instance of the Button class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.BorderColor">
            <summary>Gets or sets a color that describes the border stroke color of the button. This is a bindable property.</summary>
            <value>The color that is used as the border stroke color; the default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks>This property has no effect if <see cref="P:Xamarin.Forms.Button.BorderWidth" /> is set to 0. On Android this property will not have an effect unless <see cref="P:Xamarin.Forms.VisualElement.BackgroundColor" /> is set to a non-default color.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.BorderColorProperty">
            <summary>Backing store for the BorderColor bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.BorderRadius">
            <summary>Gets or sets the corner radius of the border. This is a bindable property.</summary>
            <value>The corner radius of the button border; the default is 5.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.BorderRadiusProperty">
            <summary>Backing store for the BorderRadius bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.BorderWidth">
            <summary>Gets or sets the width of the border. This is a bindable property.</summary>
            <value>The width of the button border; the default is 0.</value>
            <remarks>Set this value to a non-zero value in order to have a visible border.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.BorderWidthProperty">
            <summary>Backing store for the BorderWidth bindable property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Button.Clicked">
            <summary>Occurs when the Button is clicked.</summary>
            <remarks>The user may be able to raise the clicked event using accessibility or keyboard controls when the Button has focus.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.Command">
            <summary>Gets or sets the command to invoke when the button is activated. This is a bindable property.</summary>
            <value>A command to invoke when the button is activated. The default value is <see langword="null" />.</value>
            <remarks>This property is used to associate a command with an instance of a button. This property is most often set in the MVVM pattern to bind callbacks back into the ViewModel. <see cref="P:Xamarin.Forms.VisualElement.IsEnabled" /> is controlled by the Command if set.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.CommandParameter">
            <summary>Gets or sets the parameter to pass to the Command property. This is a bindable property.</summary>
            <value>A object to pass to the command property. The default value is <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.CommandParameterProperty">
            <summary>Backing store for the CommandParameter bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.CommandProperty">
            <summary>Backing store for the Command bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.ContentLayout">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.ContentLayoutProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.Font">
            <summary>Gets or sets the Font for the Label text. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Font" /> value for the button. The default is <see langword="null" />, which represents the default font on the platform.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.FontAttributes">
            <summary>Gets a value that indicates whether the font for the button text is bold, italic, or neither.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.FontAttributesProperty">
            <summary>Backing store for the FontAttributes property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.FontFamily">
            <summary>Gets the font family to which the font for the button text belongs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.FontFamilyProperty">
            <summary>Backing store for the FontFamily property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.FontProperty">
            <summary>Backing store for the Font bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.FontSize">
            <summary>Gets or sets the size of the font of the button text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.FontSizeProperty">
            <summary>Backing store for the FontSize property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.Image">
            <summary>Gets or sets the optional image source to display next to the text in the Button. This is a bindable property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.ImageProperty">
            <summary>Backing store for the Image bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Button.OnBindingContextChanged">
            <summary>Method that is raised when the binding context changes.</summary>
            <remarks>
                <para>Application developers who override this method in derived classes must call this method in the base class, <see cref="T:Xamarin.Forms.Button" />.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Button.OnPropertyChanging(System.String)">
            <param name="propertyName">The name of the changed property.</param>
            <summary>Call this method from a child class to notify that a change happened on a property.</summary>
            <remarks>A Button triggers this by itself. An inheritor only need to call this for properties without BindableProperty as backend store.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.Text">
            <summary>Gets or sets the Text displayed as the content of the button. This is a bindable property.</summary>
            <value>The text displayed in the button. The default value is <see langword="null" />.</value>
            <remarks>Changing the Text of a button will trigger a layout cycle.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.TextColor">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> for the text of the button. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Color" /> value.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.TextColorProperty">
            <summary>Backing store for the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.TextProperty">
            <summary>Backing store for the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Button.Xamarin#Forms#IButtonController#SendClicked">
            <summary>Sends a click event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.CarouselPage">
            <summary>A Page that users can swipe from side to side to display pages of content, like a gallery.</summary>
            <remarks>
                <para>The <see cref="T:Xamarin.Forms.CarouselPage" /> provides a navigation experience that will feel natural and familiar to Windows Phone users. By using <see cref="M:Xamarin.Forms.Device.OnPlatform" />, application developers can provide customized navigation on a per-platform basis. For example, an application developer could use a <see cref="T:Xamarin.Forms.NavigationPage" /> for Android and iOS, and use a <see cref="T:Xamarin.Forms.CarouselPage" /> on Windows Phone.</para>
                <example>
                    <para>The following XAML example, when properly included and referenced in a Xamarin.Forms project, creates a <see cref="T:Xamarin.Forms.CarouselPage" /> that displays three simple <see cref="T:Xamarin.Forms.ContentPage" /> elements:
  </para>
                    <code lang="XAML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<CarouselPage xmlns="http://xamarin.com/schemas/2014/forms" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" x:Class="XamlExample1.MyPage">
    <ContentPage>
        <StackLayout>
            <Label Text="Red" />
            <BoxView Color="Red" VerticalOptions="FillAndExpand" />
        </StackLayout>
    </ContentPage>
    <ContentPage>
        <StackLayout>
            <Label Text="Green" />
            <BoxView Color="Green" VerticalOptions="FillAndExpand" />
        </StackLayout>
    </ContentPage>
    <ContentPage>
        <StackLayout>
            <Label Text="Blue" />
            <BoxView Color="Blue" VerticalOptions="FillAndExpand" />
        </StackLayout>
    </ContentPage>
</CarouselPage>]]></code>
                </example>
                <example>
                    <para>The following C# example creates a <see cref="T:Xamarin.Forms.CarouselPage" /> that displays three simple <see cref="T:Xamarin.Forms.ContentPage" /> elements:</para>
                    <code lang="C#"><![CDATA[
List<ContentPage> pages = new List<ContentPage> (0);
Color[] colors = { Color.Red, Color.Green, Color.Blue };
foreach (Color c in colors) {
    pages.Add (new ContentPage { Content = new StackLayout {
            Children = {
                new Label { Text = c.ToString () },
                new BoxView {
                    Color = c,
                    VerticalOptions = LayoutOptions.FillAndExpand
                }
            }
        }
    });
}

MainPage = new CarouselPage {
    Children = { pages [0],
                 pages [1],
                 pages [2] }
};
]]></code>
                </example>
                <block subset="none" type="note">When embedding a CarouselPage into a <see cref="P:Xamarin.Forms.MasterDetailPage.Detail" />, application developers should set <see cref="P:Xamarin.Forms.MasterDetailPage.IsGestureEnabled" /> to <see langword="false" /> to prevent gesture conflicts between the CarouselPage and MasterDetailPage.</block>
                <para>
                    <img href="CarouselPage.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.CarouselPage">
            <summary>Initializes a new instance of the CarouselPage class.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.CarouselPage.CreateDefault(System.Object)">
            <param name="item">The object representing the model ofr the page.</param>
            <summary>Creates a default page, suitable for display in <c>this</c><see cref="T:Xamarin.Forms.CarouselPage" />, for an object.</summary>
            <returns>A page that is titled with the string value of <paramref name="item" />.</returns>
            <remarks>This returns a new <see cref="T:Xamarin.Forms.Page" /> object that has its <see cref="P:Xamarin.Forms.Page.Title" /> property set to the value of <see cref="M:Object.ToString" /> when called on <paramref name="item" />.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Cell">
            <summary>Provides base class and capabilities for all Forms cells. Cells are elements meant to be added to <see cref="T:Xamarin.Forms.ListView" /> or <see cref="T:Xamarin.Forms.TableView" />.</summary>
            <remarks>
                <para>The subtypes of <see cref="T:Xamarin.Forms.Cell" /> are:</para>
                <list type="table">
                    <listheader>
                        <term>Type</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>EntryCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> with a label and a single line text entry field.</description>
                    </item>
                    <item>
                        <term>SwitchCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> with a label and an on/off switch.</description>
                    </item>
                    <item>
                        <term>TextCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> with primary and secondary text.</description>
                    </item>
                    <item>
                        <term>ImageCell</term>
                        <description>A <see cref="T:Xamarin.Forms.TextCell" /> that also includes an image.</description>
                    </item>
                    <item>
                        <term>ViewCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> containing a developer-defined <see cref="T:Xamarin.Forms.View" />.</description>
                    </item>
                </list>
                <para>The various subclasses are shown in the following image:</para>
                <para>
                    <img href="Cell.Gallery.png" />
                </para>
                <example>
                    <code lang="C#"><![CDATA[
Content = new TableView
{
    Root = new TableRoot ("Table Title")
    {
        new TableSection("Section 1 Title")
        {
            new TextCell
            {
                Text = "TextCell Text",
                Detail = "TextCell Detail"
            },
            new ImageCell
            {
                Text = "ImageCell Text",
                Detail = "ImageCell Detail",
                ImageSource = "http://xamarin.com/images/index/ide-xamarin-studio.png"
            },
            new EntryCell
            {
                Label = "EntryCell:",
                Placeholder = "default keyboard",
                Keyboard = Keyboard.Default
            }
        },
        new TableSection("Section 2 Title")
        {
            new EntryCell
            {
                Label = "Another EntryCell:",
                Placeholder = "phone keyboard",
                Keyboard = Keyboard.Telephone
            },
            new SwitchCell
            {
                Text = "SwitchCell:"
            },
            new ViewCell
            {
                View = new StackLayout
                {
                    Orientation = StackOrientation.Horizontal,
                    Children = 
                    {
                        new Label
                        {
                            Text = "Custom Slider View:"
                        },
                        new Slider
                        {
                        }
                    }
                }
            }
        }
    }
}          
          ]]></code>
                </example>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Cell" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>ContextActions</term>
                        <description>
                            <para>A list of <see cref="T:Xamarin.Forms.MenuItem" /> objects to display when the user performs the context action.</para>
                        </description>
                    </item>
                    <item>
                        <term>IsEnabled</term>
                        <description>
                            <para>
                                <see langword="true" /> or <see langword="false" />, indicating whether the animation for <see cref="T:Xamarin.Forms.ActivityIndicator" /> is displayed.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Cell">
            <summary>Initializes a new instance of the Cell class.</summary>
            <remarks>Cell class is abstract, this constructor is never invoked directly.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Cell.Appearing">
            <summary>Occurs when the visual representation of the Cell is being added to the visual layout.</summary>
            <remarks>This method is raised before the cell is on screen.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Cell.ContextActions">
            <summary>Gets a list of menu items to display when the user performs the device-specific context gesture on the Cell.</summary>
            <value>The list of menu items that will be displayed when the user performs the device-specific context gesture on the Cell.</value>
            <remarks>The context gesture on the iOS platform is a left swipe. For Android and Windows Phone operating systems, the context gesture is a press and hold.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Cell.Disappearing">
            <summary>Occurs when the visual representation of the Cell is being removed from the visual layout.</summary>
            <remarks>This method is for virtualization usage only. It is not gauranteed to fire for all visible Cells when the ListView or TableView is removed from the screen. Additionally it fires during virtualization, which may not correspond directly with removal from the screen depending on the platform virtualization technique used.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Cell.ForceUpdateSize">
            <summary>Immediately updates the cell's size.</summary>
            <remarks>
                <para>Developers can call this method to update the cell's size, even if the cell is currently visible. Developers should note that this operation can be expensive.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Cell.HasContextActions">
            <summary>Gets a value that indicates whether the cell has at least one menu item in its <see cref="P:Xamarin.Forms.Cell.ContextActions" /> list property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Cell.Height">
            <summary>Gets or sets the height of the Cell.</summary>
            <value>A double that represents the height of the cell.</value>
            <remarks>The <see cref="P:Xamarin.Forms.Cell.Height" /> property is ignored if the app developer sets the <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> or <see cref="P:Xamarin.Forms.TableView.HasUnevenRows" /> property on the surrounding <see cref="T:Xamarin.Forms.View" /> to <see langword="false" />. In that case, the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> or <see cref="P:Xamarin.Forms.TableView.RowHeight" /> property is used instead.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Cell.IsEnabled">
            <summary>Gets or sets the IsEnabled state of the Cell. This is a bindable property.</summary>
            <value>A bool. Default is <see langword="true" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Cell.IsEnabledProperty">
            <summary>Identifies the IsEnabled bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnAppearing">
            <summary>Invoked whenever an <see cref="E:Xamarin.Forms.Cell.Appearing" /> event occurs. Implement this method to add class handling for this event.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnBindingContextChanged">
            <summary>Event that is raised when the binding context is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Cell.OnDisappearing">
            <summary>Invoked whenever an <see cref="E:Xamarin.Forms.Cell.Disappearing" /> event occurs. Implement this method to add class handling for this event.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnLongPressed">
            <summary>Invoked whenever a long press is applied to the Cell.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnParentSet">
            <summary>Application developers can override this method to do actions when the cell's parent is set.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Cell.OnPropertyChanging(System.String)">
            <param name="propertyName">The name of the property on which to monitor value changes.</param>
            <summary>TApplication developers can override this method to do actions when the property named by <paramref name="propertyName" /> is set.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Cell.OnTapped">
            <summary>Invoked whenever the Cell is Tapped.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Cell.RenderHeight">
            <summary>Gets the height of the rendered cell on the device.</summary>
            <value />
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Cell.Tapped">
            <summary>Occurs when the Cell is Tapped.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.CollectionSynchronizationCallback">
            <param name="collection">The collection that was passed to <see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" />.</param>
            <param name="context">The context or lock object that was passed to <see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" />.</param>
            <param name="accessMethod">An action that reads or modifies <paramref name="collection" />.</param>
            <param name="writeAccess">A value that tells whether write access is required by <paramref name="accessMethod" />.</param>
            <summary>Delegate for callback in <see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" />.</summary>
            <remarks>Application developers implement a <see cref="M:Xamarin.Forms.CollectionSynchronizationCallback" /> method and pass it to the <see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" /> method to enable correct multithreaded access to <paramref name="collection" />. After synchronization is enabled, the Xamarin.Forms framework passes <paramref name="accessMethod" /> to the application developer's implementation of <see cref="M:Xamarin.Forms.CollectionSynchronizationCallback" /> each time that the framework needs to modify the collection in a multithreaded environment. The application developer's implementation should decide, based on the <paramref name="context" /> object (which may be merely a locking object or the object on which the collection lives) and the value of the <paramref name="writeAccess" /> parameter, whether or not to <c>lock</c> while calling <paramref name="accessMethod" />.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Color">
            <summary>Class that represents a color and exposes it as RGBA and HSL values.</summary>
            <remarks>
                <para>This type is immutable. Colors can be expressed in the RGB or HSL modes. While the <see cref="C:Xamarin.Forms.Color" /> constructor takes R, G, B, and A values, the <see cref="T:Xamarin.Forms.Color" /> class also calculates and makes available HSL data for the color.</para>
                <example>
                    <para>In XAML, application developers can specify any property that is of type <see cref="T:Xamarin.Forms.Color" />, for example, <see cref="P:Xamarin.Forms.Label.TextColor" /> either as a XAML attribute or as a nested tag. The following code example shows how to specify the text color for a label by using an attribute:</para>
                    <code lang="XAML"><![CDATA[
<Label VerticalOptions="CenterAndExpand" HorizontalOptions="CenterAndExpand" TextColor="Green">
    <Label.Text>Hello, World!</Label.Text>
</Label>]]></code>
                    <para>The example below shows how to specify the text color for a label by using a nested tag:</para>
                    <code lang="XAML"><![CDATA[
<Label VerticalOptions="CenterAndExpand" HorizontalOptions="CenterAndExpand">
    <Label.Text>Hello, World!</Label.Text>
    <Label.TextColor>Color.Blue</Label.TextColor>
</Label>]]></code>
                </example>
                <para>Application developers can specify colors in XAML either as a hexadecimal number or as a valid color name.</para>
                <para>When specifying a color with a hexadecimal number, app developers can use 3, 4, or 6 digits. If the developer specifies 3 digits, they are interpreted as RGB doublet data for a fully opaque color. For example, "#123" specifies the color that is represented by "#FF112233". If the developer provides a 4-digit hexadecimal number, then the data are interpreted as above, except that the first digit specifies the alpha channel. For example, "#1234" specifies the color that is represented by "#11223344". Finally, if the developer provides a 6 digit hexadecimal number, the data are interpreted as a fully opaque color with those RGB values. For example, "#112233" specifies the color that is represented by "#FF112233".</para>
                <para>When specifying a color with a string, app developers can use color name in isolation, or prefix it with "Color.". For example, both <c>Purple</c> and <c>Color.Purple</c> are valid ways to specify the color purple. The following table describes the valid color names that can be used to specify colors in XAML.
<list type="table"><listheader><term>Color</term><description>Short Name</description><description>RGB Value</description></listheader><item><term>Color.Transparent</term><description>Transparent</description><description>0, 0, 0 (With the alpha channel set to 0.)</description></item><item><term>Color.Aqua</term><description>Aqua</description><description>0, 255, 255</description></item><item><term>Color.Black</term><description>Black</description><description>0, 0, 0</description></item><item><term>Color.Blue</term><description>Blue</description><description>0, 0, 255</description></item><item><term>Color.Fuchsia</term><description>Fuchsia</description><description>255, 0, 255</description></item><item><term>Color.Gray</term><description>Gray</description><description>128, 128, 128</description></item><item><term>Color.Green</term><description>Green</description><description>0, 128, 0</description></item><item><term>Color.Lime</term><description>Lime</description><description>0, 255, 0</description></item><item><term>Color.Maroon</term><description>Maroon</description><description>128, 0, 0</description></item><item><term>Color.Navy</term><description>Navy</description><description>0, 0, 128</description></item><item><term>Color.Olive</term><description>Olive</description><description>128, 128, 0</description></item><item><term>Color.Purple</term><description>Purple</description><description>128, 0, 128</description></item><item><term>Color.Pink</term><description>Pink</description><description>255, 102, 255</description></item><item><term>Color.Red</term><description>Red</description><description>255, 0, 0</description></item><item><term>Color.Silver</term><description>Silver</description><description>192, 192, 192</description></item><item><term>Color.Teal</term><description>Teal</description><description>0, 128, 128</description></item><item><term>Color.White</term><description>White</description><description>255, 255, 255</description></item><item><term>Color.Yellow</term><description>Yellow</description><description>255, 255, 0</description></item></list></para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Color(System.Double)">
            <param name="value">The luminosity of the gray-scale color.</param>
            <summary>Initialize a new gray color.</summary>
            <remarks>This is equivalent to new Color (value, value, value). The value is clamped to [0-1]. App developers should use the <see cref="M:Xamarin.Forms.Color.FromRgb" /> equivalent methods, instead.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Color(System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <summary>Initializes a new RGB color.</summary>
            <remarks>This is equivalent to new Color (r, g, b, 1). Values are clamped to [0-1]. Prefer the <see cref="M:Xamarin.Forms.Color.FromRgb" /> equivalent methods.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Color(System.Double,System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <param name="a">The alpha component of the color.</param>
            <summary>Initializes a new RGB color with an alpha channel.</summary>
            <remarks>Values are clamped to [0-1].</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.A">
            <summary>Gets the alpha component of the color.</summary>
            <value>The Alpha component of the color as a double that is in the inclusive range [0-1].</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.Accent">
            <summary>Gets the accent or tint color from the application.</summary>
            <value>A Color.</value>
            <remarks>The accent color is platform and device dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.AddLuminosity(System.Double)">
            <param name="delta">The delta (positive or negative) to add to the luminosity channel.</param>
            <summary>Returns a new Color with a modified luminosity channel.</summary>
            <returns>A new color with a possibly modified luminosity channel.</returns>
            <remarks>The <paramref name="delta" /> parameter is added to the current luminosity, and the resulting luminosity is then clamped to the inclusive range [0,1].</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Aqua">
            <summary>Aqua, the color that is represented by the RGB value #00ffff.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.B">
            <summary>Gets the blue component of the color.</summary>
            <value>The Blue component of the color as a double that is in the inclusive range [0-1].</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Black">
            <summary>Black, the color that is represented by the RGB value #000000.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Blue">
            <summary>Blue, the color that is represented by the RGB value #0000ff.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.Default">
            <summary>Returns the default color.</summary>
            <value>The default color.</value>
            <remarks>The Default color is used to unset any Color, and revert to the default one.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> value to compare to this <see cref="T:Xamarin.Forms.Color" /> structure.</param>
            <summary>Determine if the provided <see cref="T:System.Object" /> is equivalent to the current Color.</summary>
            <returns>
                <see langword="true" /> if the provided object is an equivalent Color. Otherwies, <see langword="false" />.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromHex(System.String)">
            <param name="hex">A string that contains the hexadecimal (A)RGB color representation.</param>
            <summary>Returns a new RGB Color instance with the requested Red, Green, and Blue channels. The Alpha channel is set if <paramref name="hex" /> contains one.</summary>
            <returns>A color.</returns>
            <remarks>
                <para>When specifying a color with a hexadecimal number, app developers can use 3, 4, 6, or 8 digits. If the developer specifies 3 digits, they are interpreted as RGB doublet data for a fully opaque color. For example, "#123" specifies the color that is represented by "#FF112233". If the developer provides a 4-digit hexadecimal number, then the data are interpreted as above, except that the first digit specifies the alpha channel. For example, "#1234" specifies the color that is represented by "#11223344". If the developer provides a 6 digit hexadecimal number, the data are interpreted as a fully opaque color with those RGB values. For example, "#112233" specifies the color that is represented by "#FF112233". Finally, the developer can explicitly provide an 8-digit number that completely specifies the Alpha, Red, Green, and Blue channels, in that order.</para>
                <para>Note that, in the paragraph above, the fully expanded color description is of the format, AARRGGBB. That is: the first pair of hexadecimal digits specifies the Alpha channel; the second pair specifies the Red channel; the third pair specifies the Green channel; and the final pair specifies the Blue channel.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromHsla(System.Double,System.Double,System.Double,System.Double)">
            <param name="h">The Hue component of the color.</param>
            <param name="s">The Saturation component of the color.</param>
            <param name="l">The Luminosity component of the color.</param>
            <param name="a">The alpha value of the color.</param>
            <summary>Returns a new HSL Color with an alpha channel</summary>
            <returns>An HSL color</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgb(System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <summary>Returns a new rgb color instance.</summary>
            <returns>An RGB color</returns>
            <remarks>Component values are clamped to [0,1]. The <see cref="M:Xamarin.Forms.Color.FromRgb" /> method is striclty equivalent to <c>new Color (r, g, b)</c>, and is present for API consistency.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgb(System.Int32,System.Int32,System.Int32)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <summary>Returns a new rgb color instance.</summary>
            <returns>A new RGB color.</returns>
            <remarks>Component values are clamped to [0,255].</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgba(System.Double,System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <param name="a">The alpha component of the color.</param>
            <summary>Returns a new RGBA color instance.</summary>
            <returns>A new RGBA color.</returns>
            <remarks>Component values are clamped to [0,1]. The <see cref="M:Xamarin.Forms.Color.FromRgba" /> method is striclty equivalent to <c>new Color (r, g, b, a)</c>, and is present for API consistency.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgba(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <param name="a">The alpha component of the color.</param>
            <summary>Returns a new RGBA color instance.</summary>
            <returns>A new RGBA color.</returns>
            <remarks>Component values are clamped to [0,255].</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromUint(System.UInt32)">
            <param name="argb">A uint that represents the ARGB value of the color.</param>
            <summary>Returns a new Color with the requested RGBA value.</summary>
            <returns>An RGBA color.</returns>
            <remarks>
                <para>The <paramref name="argb" /> parameter must represent an unsigned integer that can be represented by hexadecimal string that matches the format "AARRGGBB".</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Fuchsia">
            <summary>Fucshia, the color that is represented by the RGB value #ff00ff.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Fuschia">
            <summary>Fucshia, the color that is represented by the RGB value #ff00ff. Deprecated. See Remarks.</summary>
            <remarks>Use the <see cref="F:Xamarin.Forms.Color.Fucshia" /> color, instead.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.G">
            <summary>Gets the Green component of the color.</summary>
            <value>The Green component of the color as a double that is in the inclusive range [0-1].</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.GetHashCode">
            <summary>Returns the Hashcode for this <see cref="T:System.Object" />.</summary>
            <returns>A signed 32-bit hash code.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Gray">
            <summary>Gray, the color that is represented by the RGB value #808080.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Green">
            <summary>Green, the color that is represented by the RGB value #008000.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.Hue">
            <summary>Gets the Hue of the color.</summary>
            <value>The Hue component of the color as a double that is in the inclusive range [0-1].</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Lime">
            <summary>Lime, the color that is represented by the RGB value #00ff00.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.Luminosity">
            <summary>Gets the Luminosity fo the color.</summary>
            <value>The Luminosity component of the color as a double that is in the inclusive range [0-1].</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Maroon">
            <summary>Maroon, the color that is represented by the RGB value #800000.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.MultiplyAlpha(System.Double)">
            <param name="alpha">The alpha multiplicator.</param>
            <summary>Returns a new color with the alpha channel multiplied by alpha, clamped to the inclusive range [0-1].</summary>
            <returns>A new RGBA color with a possibly new value for its alpha channel. See Remarks.</returns>
            <remarks>The resulting color has its alpha channel clamped toto the inclusive range [0-1], preventing invalid colors.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Navy">
            <summary>Navy, the color that is represented by the RGB value #000080.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Olive">
            <summary>Olive, the color that is represented by the RGB value #808000.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.op_Equality(Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <param name="color1">To be added.</param>
            <param name="color2">To be added.</param>
            <summary>Returns <see langword="true" /> if <paramref name="color1" /> represents the same color as <paramref name="color1" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.op_Inequality(Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <param name="color1">To be added.</param>
            <param name="color2">To be added.</param>
            <summary>Returns <see langword="true" /> if <paramref name="color1" /> does not represent the same color as <paramref name="color1" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Pink">
            <summary>Pink, the color that is represented by the RGB value #ff66ff.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Purple">
            <summary>Purple, the color that is represented by the RGB value #800080.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.R">
            <summary>Gets the Red component of the color.</summary>
            <value>The Red component of the color as a double that is in the inclusive range [0-1].</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Red">
            <summary>Red, the color that is represented by the RGB value #ff0000.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.Saturation">
            <summary>Gets the Saturation of the color</summary>
            <value>The Saturation component of the color as a double that is in the inclusive range [0-1].</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Silver">
            <summary>Silver, the color that is represented by the RGB value #c0c0c0.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Teal">
            <summary>Teal, the color that is represented by the RGB value #008080.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.ToString">
            <summary>Returns a string representation of the Color.</summary>
            <returns>A string.</returns>
            <remarks>Overriden. </remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Transparent">
            <summary>The transparent color, represented by the RGB value #00000000.</summary>
            <remarks>The Alpha channel of the <see cref="F:Xamarin.Forms.Color.Transparent" /> color is set to <c>0</c>.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.White">
            <summary>White, the color that is represented by the RGB value #ffffff.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.WithHue(System.Double)">
            <param name="hue">The modified Hue.</param>
            <summary>Returns a color with modified Hue, but keeping the same Saturation and Luminosity.</summary>
            <returns>A color.</returns>
            <remarks>The Hue is clamped to the inclusive range [0,1]. This method is useful for creating color palettes.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.WithLuminosity(System.Double)">
            <param name="luminosity">The modified luminosity.</param>
            <summary>Returns a color with modified Luminosity.</summary>
            <returns>A new HSL color.</returns>
            <remarks>The new Luminosity is clamped to [0,1]. This method is useful for creating color palettes.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.WithSaturation(System.Double)">
            <param name="saturation">The modified Saturation.</param>
            <summary>Returns a new color with modified Saturation.</summary>
            <returns>A new HSLcolor.</returns>
            <remarks>The Saturation is clamped to [0,1]. This method is useful for creating color palettes.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Yellow">
            <summary>Yellow, the color that is represented by the RGB value #ffff00..</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ColorTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to a <see cref="T:Xamarin.Forms.Color" />.</summary>
            <remarks>
                <para>The following example shows some variations of <see cref="T:Xamarin.Forms.ColorTypeConverter" />:</para>
                <example>
                    <code lang="C#"><![CDATA[
var converter = new ColorTypeConverter ();
Assert.True (converter.CanConvertFrom (typeof(string)));
Assert.AreEqual (Color.Blue, converter.ConvertFrom ("Color.Blue"));
Assert.AreEqual (Color.Blue, converter.ConvertFrom ("Blue"));
Assert.AreEqual (Color.Blue, converter.ConvertFrom ("#0000ff"));
Assert.AreEqual (Color.Default, converter.ConvertFrom ("Color.Default"));
Assert.AreEqual (Color.Accent, converter.ConvertFrom ("Accent"));
var hotpink = Color.FromHex ("#FF69B4");
Color.Accent = hotpink;
Assert.AreEqual (Color.Accent, converter.ConvertFrom ("Accent"));          
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ColorTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.ColorTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ColorTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.ColorTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.Color" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ColorTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Color" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ColorTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Creates a color from a valid color name.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ColumnDefinition">
            <summary>An <see cref="T:Xamarin.Forms.IDefinition" /> that defines properties for a column in a <see cref="T:Xamarin.Forms.Grid" />.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.ColumnDefinition" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Width</term>
                        <description>
                            <para>"*" or "Auto" to indicate the corresponding <see cref="T:Xamarin.Forms.GridUnitType" /> enumeration values, or a number to indicate an absolute width.</para>
                        </description>
                    </item>
                </list>
                <example>
                    <para>App developers can specify <see cref="T:Xamarin.Forms.GridUnitType" /> values for the <see cref="P:Xamarin.Forms.ColumnDefinition.Width" /> property in XAML by nesting <c>ColumnDefinition</c> tags inside tags for the <see cref="P:Xamarin.Forms.Grid.ColumnDefinitions" /> collection property. The following example demonstrates setting three column widths to each of the three valid <see cref="T:Xamarin.Forms.GridUnitType" /> values:</para>
                    <code lang="XAML"><![CDATA[
<Grid.ColumnDefinitions>
    <ColumnDefinition Width="Auto" />
    <ColumnDefinition Width="*" />
    <ColumnDefinition Width="100" />
</Grid.ColumnDefinitions>
]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ColumnDefinition">
            <summary>Creates a new <see cref="T:Xamarin.Forms.ColumnDefinition" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ColumnDefinition.SizeChanged">
            <summary>Event that is raised when the size of the column is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ColumnDefinition.Width">
            <summary>Gets or sets the width of the column.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ColumnDefinition.WidthProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ColumnDefinition.Width" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ColumnDefinitionCollection">
            <summary>A <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> for <see cref="T:Xamarin.Forms.ColumnDefinition" />s.</summary>
            <remarks>
                <para>App developers can specify <see cref="T:Xamarin.Forms.GridUnitType" /> values for the <see cref="P:Xamarin.Forms.ColumnDefinition.Width" /> property in XAML by nesting <c>ColumnDefinition</c> tags inside tags for the <see cref="P:Xamarin.Forms.Grid.ColumnDefinitions" /> collection property. The following example demonstrates setting three column widths to each of the three valid <see cref="T:Xamarin.Forms.GridUnitType" /> values:</para>
                <example>
                    <code lang="XAML"><![CDATA[
<Grid.ColumnDefinitions>
    <ColumnDefinition Width="Auto" />
    <ColumnDefinition Width="*" />
    <ColumnDefinition Width="100" />
</Grid.ColumnDefinitions>
]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ColumnDefinitionCollection">
            <summary>Creates a new empty <see cref="T:Xamarin.Forms.ColumnDefinitionCollection" /> collection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Command">
            <summary>Defines an <see cref="T:System.Windows.Input.ICommand" /> implementation that wraps a <see cref="T:System.Action" />.</summary>
            <remarks>
                <para>
              The following example creates a new Command and set it to a button.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
var command = new Command (() => Debug.WriteLine ("Command executed"));
var button = new Button {
  Text = "Hit me to execute the command",
  Command = command,
};
]]></code>
                </example>
                <para>
              More useful scenarios takes a parameter
              </para>
                <example>
                    <code lang="C#"><![CDATA[
var command = new Command (o => Debug.WriteLine ("Command executed: {0}", o));
var button = new Button {
  Text = "Hit me to execute the command",
  Command = command,
  CommandParameter = "button0",
};
]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action)">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action{System.Object})">
            <param name="execute">An Action&lt;object&gt; to execute when the Command is executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks>The Action will be executed with a parameter.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action,System.Func{System.Boolean})">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <param name="canExecute">A <see cref="T:System.Func&lt;bool&gt;" /> indicating if the Command can be executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks>Whenever the value returned by canExecute has changed, a call to <see cref="M:Xamarin.Forms.Core.Command.ChangeCanExecute" /> is required to trigger <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <param name="execute">An Action&lt;object&gt; to execute when the Command is executed.</param>
            <param name="canExecute">A <see cref="T:System.Func&lt;object,bool&gt;" /> indicating if the Command can be executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks>Whenever the value returned by canExecute has changed, a call to <see cref="M:Xamarin.Forms.Core.Command.ChangeCanExecute" /> is required to trigger <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Command.CanExecute(System.Object)">
            <param name="parameter">An <see cref="T:System.Object" /> used as parameter to determine if the Command can be executed.</param>
            <summary>Returns a <see cref="T:System.Boolean" /> indicating if the Command can be exectued with the given parameter.</summary>
            <returns>
                <see langword="true" /> if the Command can be executed, <see langword="false" /> otherwise.</returns>
            <remarks>
                <para>If no canExecute parameter was passed to the Command constructor, this method always returns <see langword="true" />.</para>
                <para>If the Command was created with non-generic execute parameter, the parameter of this method is ignored.</para>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.Command.CanExecuteChanged">
            <summary>Occurs when the target of the Command should reevaluate whether or not the Command can be executed.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Command.ChangeCanExecute">
            <summary>Send a <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" /></summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Command.Execute(System.Object)">
            <param name="parameter">An <see cref="T:System.Object" /> used as parameter for the execute Action.</param>
            <summary>Invokes the execute Action</summary>
            <remarks>
                <para>If the Command was created with non-generic execute parameter, the parameter of this method is ignored.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.Command`1">
            <typeparam name="T">The Type of the parameter,</typeparam>
            <summary>Defines an <see cref="T:System.Windows.Input.ICommand" /> implementation wrapping a generic Action&lt;T&gt;.</summary>
            <remarks>
                <para>
              The following example creates a new Command and set it to a button.
              </para>
                <example language="C#">
                    <code lang="C#"><![CDATA[
var command = new Command<string> (s => Debug.WriteLine ("Command executed: {0}", s));
var button = new Button {
  Text = "Hit me to execute the command",
  Command = command,
  CommandParameter = "button0",
};
]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Command`1(`0System`0.`0Action`0{`0T`0})">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Command`1(`0System`0.`0Action`0{`0T`0},`0System`0.`0Func`0{`0T`0,`0System`0.`0Boolean`0})">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <param name="canExecute">A <see cref="T:System.Func&lt;T,bool&gt;" /> indicating if the Command can be executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Condition">
            <summary>Base class for conditions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Constraint">
            <summary>A layout constraint used by <see cref="T:Xamarin.Forms.RelativeLayout" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.Constant(System.Double)">
            <param name="size">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Constraint" /> object that constrains an element to <paramref name="size" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.FromExpression(System.Linq.Expressions.Expression{System.Func{System.Double}})">
            <param name="expression">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Constraint" /> that is calculated from <paramref name="expression" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.RelativeToParent(System.Func{Xamarin.Forms.RelativeLayout,System.Double})">
            <param name="measure">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Constraint" /> object that constrains an element relative to its parent's size.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.RelativeToView(Xamarin.Forms.View,System.Func{Xamarin.Forms.RelativeLayout,Xamarin.Forms.View,System.Double})">
            <param name="view">To be added.</param>
            <param name="measure">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Constraint" /> object that constrains an element relative to the <paramref name="view" /> parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ConstraintExpression">
            <summary>Defines a constraint relationship.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.ConstraintExpression" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Constant</term>
                        <description>
                            <para>An optionally signed integer literal.</para>
                        </description>
                    </item>
                    <item>
                        <term>ElementName</term>
                        <description>
                            <para>The name of a source element against which to calculate the constraint.</para>
                        </description>
                    </item>
                    <item>
                        <term>Factor</term>
                        <description>
                            <para>A decimal literal in the range (0,1].</para>
                        </description>
                    </item>
                    <item>
                        <term>Property</term>
                        <description>
                            <para>The name of the property on the source element to use in the constraint calculation.</para>
                        </description>
                    </item>
                    <item>
                        <term>Type</term>
                        <description>
                            <para>
                                <c>Constant</c>, <c>RelativeToParent</c>, or <c>RelativeToView</c>.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ConstraintExpression">
            <summary>Creates a new <see cref="T:Xamarin.Forms.ConstraintExpression" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Constant">
            <summary>Gets or sets the constant constraint value..</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.ElementName">
            <summary>Gets or sets the name of a source element against which to calculate the constraint.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Factor">
            <summary>Gets or sets the factor by which to scale a constrained dimension, relative to the source element.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Property">
            <summary>Gets or sets name of the property on the source element to use in the constraint calculation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConstraintExpression.ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Constraint" /> for this <see cref="T:Xamarin.Forms.ConstraintExpression" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Type">
            <summary>Gets or sets the constraint type.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ConstraintType">
            <summary>Enumeration specifying whether a constraint is constant, relative to a view, or relative to its parent.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ConstraintType.Constant">
            <summary>A constant constraint.</summary>
        </member>
        <member name="F:Xamarin.Forms.ConstraintType.RelativeToParent">
            <summary>A constraint that is relative to a parent element.</summary>
        </member>
        <member name="F:Xamarin.Forms.ConstraintType.RelativeToView">
            <summary>A constraint that is relative to a view.</summary>
        </member>
        <member name="T:Xamarin.Forms.ConstraintTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to a <see cref="T:Xamarin.Forms.Constraint" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConstraintTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.ConstraintTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConstraintTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.ConstraintTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.Constraint" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConstraintTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Constraint" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConstraintTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>&gt;Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Constraint" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ContentPage">
            <summary>A <see cref="T:Xamarin.Forms.Page" /> that displays a single view.</summary>
            <remarks>
                <para>This is a Page displaying a single View, often a container like a <see cref="T:Xamarin.Forms.StackLayout" /> or <see cref="T:Xamarin.Forms.ScrollView" />.</para>
                <example>
                    <para>The example below is taken from he App.cs file that is contained in the default "Hello, Forms!" app. It  uses a <see cref="T:Xamarin.Forms.ContenPage" /> to display a label, which is a typical, though basic, use of the <see cref="T:Xamarin.Forms.ContenPage" /> class.</para>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace ContentPageExample
{
    public class App
    {
        public static Page GetMainPage ()
        {    
            return new ContentPage { 
                Content = new Label {
                    Text = "Hello, Forms!",
                    VerticalOptions = LayoutOptions.CenterAndExpand,
                    HorizontalOptions = LayoutOptions.CenterAndExpand,
                },
            };
        }
    }
}
          ]]></code>
                    <para>The FormsGallery sample, which can be found on the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">Sample Applications</a></format> page, has a ContentPageDemoPage.cs file. This file contains a longer and more complicated example.</para>
                    <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.ContentPage" /> class:</para>
                    <para>
                        <list type="table">
                            <listheader>
                                <term>Property</term>
                                <description>Value</description>
                            </listheader>
                            <item>
                                <term>Content</term>
                                <description>
                                    <para>A list of <see cref="T:Xamarin.Forms.View" /> objects that represent the visual content of the <see cref="T:Xamarin.Forms.ContentPage" />. This tag can be omitted, and the contents listed directly.</para>
                                </description>
                            </item>
                        </list>A <c>ContentPage</c> tag can be the root element of a XAML document.</para>
                    <para />
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ContentPage">
            <summary>Initializes a new ContentPage instance.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ContentPage.Content">
            <summary>Gets or sets the view that contains the content of the Page.</summary>
            <value>A <see cref="T:Xamarin.Forms.View" /> subclass, or <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ContentPage.ContentProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ContentPage.Content" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ContentPage.OnBindingContextChanged">
            <summary>Method that is called when the binding context changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ContentPresenter">
            <summary>Layout manager for templated views.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ContentPresenter">
            <summary>Creates a new empty <see cref="T:Xamarin.Forms.ContentPresenter" /> with default values</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ContentPresenter.Content">
            <summary>Gets or sets the view whose layout is managed by this <see cref="T:Xamarin.Forms.ContentPresenter" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ContentPresenter.ContentProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ContentPresenter.Content" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ContentPresenter.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">The X coordinate of the upper left corner of the layout rectangle.</param>
            <param name="y">The Y coordinate of the upper left corner of the layout rectangle.</param>
            <param name="width">The width of the layout rectangle.</param>
            <param name="height">The height of the layout rectangle.</param>
            <summary>Lays out the children of the <see cref="P:Xamarin.Forms.ContentPresenter.Content" /> property within the rectangle that is defined by <paramref name="x" />, <paramref name="y" />, <paramref name="widht" />, and <paramref name="height" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ContentPresenter.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The width constraint of the size request.</param>
            <param name="heightConstraint">The width constraint of the size request..</param>
            <summary>Method that is raised when a size request is made.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ContentPropertyAttribute">
            <summary>Indicates the property of the type that is the (default) content property.</summary>
            <remarks>
                <para>XAML processor uses to determine the content property.</para>
                <para>
Decorating types with ContentPropertyAttribute allows shorter XAML syntax. As </para>
                <example>
                    <see cref="T:Xamarin.Forms.ContentView" /> has a ContentProperty attribute applied, this XAML is valid:
<code lang="C#"><![CDATA[
<ContentView>
  <Label Text="Hello, Forms"\>
</ContentView>
  ]]></code>
This is equivalent to the following, more explicit XAML
<code lang="C#"><![CDATA[
<ContentView>
  <ContentView.Content>
    <Label Text="Hello, Forms"\>
  </ContentView.Content>
</ContentView>
  ]]></code></example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ContentPropertyAttribute(System.String)">
            <param name="name">The name of the property.</param>
            <summary>Initializes a new instance of the ContentPropertyAttribute class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ContentPropertyAttribute.Name">
            <summary>Gets the name of the content property</summary>
            <value>A string representing the name of the content property.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ContentView">
            <summary>An element that contains a single child element.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.ContentView" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Content</term>
                        <description>
                            <para>The <see cref="T:Xamarin.Forms.View" /> object that represents the visual content of the <see cref="T:Xamarin.Forms.ContentView" />.</para>
                        </description>
                    </item>
                </list>
                <para>
          The following example shows how to construct a new ContentView with a Label inside.
          </para>
                <example>
                    <code lang="C#"><![CDATA[
MainPage = new ContentPage () {
    // Accomodate iPhone status bar.
    Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5),
        Content = new ContentView {
            Content = new Label { Text = "I'm Content!" },
    }
};
          ]]></code>
                </example>
                <para>
                    <img href="ContentView.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ContentView">
            <summary>Initializes a new instance fo the ContentView class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ContentView.Content">
            <summary>Gets or sets the content of the ContentView.</summary>
            <value>A <see cref="T:Xamarin.Forms.View" /> that contains the content.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ContentView.ContentProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ContentView.Content" /> property..</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ContentView.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the y coordinate of the child region bounding box.</param>
            <param name="height">A value representing the y coordinate of the child region bounding box.</param>
            <summary>Positions and sizes the content of a ContentView.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ContentView.OnBindingContextChanged">
            <summary>Method that is called when the binding context changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ContentView.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the ContentView to use</param>
            <param name="heightConstraint">The available height for the ContentView to use.</param>
            <summary>This method is called during the measure pass of a layout cycle to get the desired size of the ContentView.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains the desired size of the StackLayout.</returns>
            <remarks>The results of this method will be the desired size of its content.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ControlTemplate">
            <summary>Template that specifies a group of styles and effects for controls.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ControlTemplate">
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ControlTemplate(System.Type)">
            <param name="type">To be added.</param>
            <summary>Creates a new control template for the specified control type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DataTemplate">
            <summary>A template for multiple bindings, commonly used by <see cref="T:Xamarin.Forms.ListView" />s and <see cref="T:Xamarin.Forms.MultiPage" />s.</summary>
            <remarks>In XAML, application developers can nest markup inside a <c>DataTemplate</c> tag to create a <see cref="T:Xamarin.Forms.View" /> whose members are bound to the properties of data objects that are contained in a <see cref="P:Xamarin.Forms.MultiPage`1.ItemsSource" /> list.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DataTemplate">
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DataTemplate(System.Func{System.Object})">
            <param name="loadTemplate">A custom content generator to be called </param>
            <summary>Creates and initializes a new instance of the <see cref="T:Xamarin.Forms.DataTemplate" /> class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DataTemplate(System.Type)">
            <param name="type">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.DataTemplate" /> for type <paramref name="type" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Bindings">
            <summary>Gets a dictionary of bindings, indexed by the bound properties.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.CreateContent">
            <summary>Loads the template for the type that is represented by this <see cref="T:Xamarin.Forms.DataTemplate" /> and sets all of the bindings and values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.SetBinding(Xamarin.Forms.BindableProperty,Xamarin.Forms.BindingBase)">
            <param name="property">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>Sets the binding for <paramref name="property" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.SetValue(Xamarin.Forms.BindableProperty,System.Object)">
            <param name="property">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the value of <paramref name="property" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Values">
            <summary>Returns a dictionary of property values for this <see cref="T:Xamarin.Forms.DataTemplate" />, indexed by property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Xamarin#Forms#IDataTemplate#LoadTemplate">
            <summary>For internal use only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.Xamarin#Forms#IElement#AddResourcesChangedListener(System.Action{System.Object,Xamarin.Forms.ResourcesChangedEventArgs})">
            <param name="onchanged">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Xamarin#Forms#IElement#Parent">
            <summary>Gets or sets the parent element of this <see cref="T:Xamarin.Forms.DataTemplate" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.Xamarin#Forms#IElement#RemoveResourcesChangedListener(System.Action{System.Object,Xamarin.Forms.ResourcesChangedEventArgs})">
            <param name="onchanged">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Xamarin#Forms#IElement#ResourceDictionary">
            <summary>
                <para />
            </summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Xamarin#Forms#IElement#XamlParent">
            <summary>For internal use only.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Xamarin#Forms#Internals#IDataTemplate#LoadTemplate">
            <summary>For internal use only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DataTemplateSelector">
            <summary>Selects <see cref="T:Xamarin.Forms.DataTemplate" /> objects by data type and container.</summary>
            <remarks>
                <para>Application developers override the <see cref="M:Xamarin.Froms.DataTemplateSelector.OnSelectTemplate" /> method to return a unique <see cref="T:Xamarin.Forms.DataTemplate" /> for a data type and parent container combination. Additionally, because the same exact template instance must be returned for a given piece of data across successive calls to <see cref="M:Xamarin.Froms.DataTemplateSelector.SelectTemplate" />, developers should create and store these <see cref="T:Xamarin.Forms.DataTemplate" /> in their constructor overrides.</para>
                <block subset="none" type="note">Developers should note the following items:        <list type="bullet"><item><term>OnSelectTemplate must not return another DataTemplateSelector, and
        </term></item><item><term>The Android platform is limited to 20 templates per list view.</term></item></list></block>
                <example>The following example shows a basic use:
<code lang="c#"><![CDATA[class MyDataTemplateSelector : DataTemplateSelector
{
    public MyDataTemplateSelector ()
    {
        // Retain instances
        this.templateOne = new DataTemplate (typeof (ViewA));
        this.templateTwo = new DataTemplate (typeof (ViewB));
    }

    protected override DataTemplate OnSelectTemplate (object item, BindableObject container)
    {
        if (item is double)
            return this.templateOne;
        return this.templateTwo;
    }

    private readonly DataTemplate templateOne;
    private readonly DataTemplate templateTwo;
}]]></code></example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.DataTemplateSelector">
            <summary>Creates a new <see cref="T:Xamarin.Forms.DataTemplateSelector" /> with default values.</summary>
            <remarks>Application developers should provide their own constructors to create and store the <see cref="T:Xamarin.Forms.DataTemplate" /> objects that can be returned by this <see cref="T:Xamarin.Forms.DataTemplateSelector" />.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplateSelector.OnSelectTemplate(System.Object,Xamarin.Forms.BindableObject)">
            <param name="item">The data for which to return a template.</param>
            <param name="container">An optional container object in which the developer may have opted to store <see cref="T:Xamarin.Forms.DataTemplateSelector" /> objects.</param>
            <summary>Calls <see cref="M:Xamarin.Forms.DataTemplateSelector.SelectTemplate" />.</summary>
            <returns>A developer-defined <see cref="T:Xamarin.Forms.DataTemplate" /> that can be used to display <paramref name="item" />.</returns>
            <remarks>
                <para>This method throws an exception if <see cref="M:Xamarin.Forms.DataTemplateSelector.SelectTemplate" /> returns an instance of <see cref="T:Xamarin.Forms.DataTemplateSelector" />.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplateSelector.SelectTemplate(System.Object,Xamarin.Forms.BindableObject)">
            <param name="item">The data for which to return a template.</param>
            <param name="container">An optional container object in which the developer may have opted to store <see cref="T:Xamarin.Forms.DataTemplateSelector" /> objects.</param>
            <summary>When overriden by developers in a derived class, returns a <see cref="T:Xamarin.Forms.DataTemplate" /> for <paramref name="item" />.</summary>
            <returns>
                <para>A developer-defined <see cref="T:Xamarin.Forms.DataTemplate" /> that can be used to display <paramref name="item" />.</para>
            </returns>
            <remarks>
                <para>Developers should ensure that this method never returns a <see cref="T:Xamarin.Forms.DataTemplateSelector" /> object, as this will cause the <see cref="M:Xamarin.Forms.DataTemplateSelector.OnSelectTemplate" /> method to throw an exception.</para>
                <block subset="none" type="note">
                    <para>Developers should note that the he Android platform is limited to 20 templates per list view.</para>
                </block>
                <example>The following example shows a basic use:
<code lang="c#"><![CDATA[class MyDataTemplateSelector : DataTemplateSelector
{
    public MyDataTemplateSelector ()
    {
        // Retain instances
        this.templateOne = new DataTemplate (typeof (ViewA));
        this.templateTwo = new DataTemplate (typeof (ViewB));
    }

    protected override DataTemplate OnSelectTemplate (object item, BindableObject container)
    {
        if (item is double)
            return this.templateOne;
        return this.templateTwo;
    }

    private readonly DataTemplate templateOne;
    private readonly DataTemplate templateTwo;
}]]></code></example>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.DataTrigger">
            <summary>Class that represents a binding condition and a list of <see cref="T:Xamarin.Forms.Setter" /> objects that will be applied when the condition is met.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.DataTrigger" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Property</term>
                        <description>
                            <para>The name of the property whose value to compare against <c>Value</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>Value</term>
                        <description>
                            <para>The value of the property that will trigger the setters in <c>Setters</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>Setters</term>
                        <description>
                            <para>A list of setters that are called when the property condition is met. Each <c>Setter</c> tag or tag pair in the list has a <c>Property</c> and <c>Value</c> that represents the assignments to perform when the condition is met.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.DataTrigger(System.Type)">
            <param name="targetType">To be added.</param>
            <summary>Initializes a new <see cref="T:Xamarin.Forms.DataTrigger" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTrigger.Binding">
            <summary>Gets or sets the binding whose value will be compared to <see cref="P:Xamarin.Forms.DataTrigger.Value" /> to determine when to invoke the setters.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTrigger.Setters">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.Setter" /> objects that will be applied when the binding that is named by the  <see cref="P:Xamarin.Forms.DataTrigger.Binding" /> property becomes equal to <see cref="P:Xamarin.Forms.DataTrigger.Value" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTrigger.Value">
            <summary>Gets or sets the value of the binding, named by the <see cref="P:Xamarin.Forms.DataTrigger.Binding" /> property, that will cause the setters to be applied.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTrigger.Xamarin#Forms#Xaml#IValueProvider#ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>XAML infrastructure.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DateChangedEventArgs">
            <summary>Event arguments for <see cref="E:Xamarin.Forms.DatePicker.DateSelected" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DateChangedEventArgs(System.DateTime,System.DateTime)">
            <param name="oldDate">To be added.</param>
            <param name="newDate">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.DateChangedEventArgs" /> object that represents a change from <paramref name="oldDate" /> to <paramref name="newDate" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DateChangedEventArgs.NewDate">
            <summary>The date that the user entered.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DateChangedEventArgs.OldDate">
            <summary>The date that was on the element at the time that the user selected it.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DatePicker">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that allows date picking.</summary>
            <remarks>
                <para>The visual representation of a DatePicker is very similar to the one of <see cref="T:Xamarin.Forms.Entry" />, except that a special control for picking a date appears in place of a keyboard.</para>
                <para>
                    <img href="DatePicker.TripleScreenShot.png" />
                </para>
                <para>The following example shows a basic use:</para>
                <example>
                    <code lang="C#"><![CDATA[
DatePicker datePicker = new DatePicker
    {
        Format = "D",
        VerticalOptions = LayoutOptions.CenterAndExpand
    };

]]></code>
                </example>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.DatePicker" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Format</term>
                        <description>
                            <para>A string that specifies the display format in the control of the chosen date.</para>
                        </description>
                    </item>
                    <item>
                        <term>Date</term>
                        <description>
                            <para>An <c>x:FactoryMethod</c> call to the <see cref="M:System.DateTime.Parse" /> method, or a markup extension call to a method that produces a <see cref="T:System.DateTime" /> object. See below.</para>
                        </description>
                    </item>
                    <item>
                        <term>MinimumDate</term>
                        <description>
                            <para>An <c>x:FactoryMethod</c> call to the <see cref="M:System.DateTime.Parse" /> method, or a markup extension call to a method that produces a <see cref="T:System.DateTime" /> object. See below.</para>
                        </description>
                    </item>
                    <item>
                        <term>MaximumDate</term>
                        <description>
                            <para>An <c>x:FactoryMethod</c> call to the <see cref="M:System.DateTime.Parse" /> method, or a markup extension call to a method that produces a <see cref="T:System.DateTime" /> object. See below.</para>
                        </description>
                    </item>
                </list>
                <example>
                    <para>The example below creates a working <see cref="T:Xamarin.Forms.DatePicker" /> that displays the current date and allows the user to select a date between the specified ranges. The value for the <see cref="P:Xamarin.Forms.DatePicker.Date" /> property is specified with the <c>x:Static</c> markup extension, and the <see cref="P:Xamarin.Forms.DatePicker.MinimumDate" /> and <see cref="P:Xamarin.Forms.DatePicker.MaximumDate" /> properties are specified by calling the <see cref="M:System.DateTime.Parse" /> method with the <c>x:FactoryMethod</c> and <x>x:Arguments</x> tags. <block type="note">The example below requires a namespace declaration in the root <c>ContentPage</c> or <c>ContentView</c> tags. In particular, <c>xmlns:sys="clr-namespace:System;assembly=mscorlib"</c> must appear in the attribute list for the root element, so that the XAML parser can resolve the name, <c>sys:DateTime</c>.</block></para>
                    <code lang="XAML"><![CDATA[<StackLayout>
      <DatePicker VerticalOptions="CenterAndExpand" Date="{x:Static sys:DateTime.Now}">
         <DatePicker.Format>yyyy-MM-dd</DatePicker.Format>
         <DatePicker.MinimumDate>
            <sys:DateTime x:FactoryMethod="Parse">
               <x:Arguments>
                  <x:String>Jan 1 2000</x:String>
               </x:Arguments>
            </sys:DateTime>
         </DatePicker.MinimumDate>
         <DatePicker.MaximumDate>
            <sys:DateTime x:FactoryMethod="Parse">
               <x:Arguments>
                  <x:String>Dec 31 2050</x:String>
               </x:Arguments>
            </sys:DateTime>
         </DatePicker.MaximumDate>
      </DatePicker>
   </StackLayout>]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.DatePicker">
            <summary>Initializes a new instance of the DatePicker class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.Date">
            <summary>Gets or sets the displayed date. This is a bindable property.</summary>
            <value>The <see cref="T:System.DateTime" /> displayed in the DatePicker.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.DatePicker.DateProperty">
            <summary>Identifies the Date bindable property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.DatePicker.DateSelected">
            <summary>An event fired when the Date property changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.Format">
            <summary>The format of the date to display to the user. This is a dependency property.</summary>
            <value>A valid date format.</value>
            <remarks>Format string is the same is passed to DateTime.ToString (string format).</remarks>
        </member>
        <member name="F:Xamarin.Forms.DatePicker.FormatProperty">
            <summary>Identifies the Format dependency property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.MaximumDate">
            <summary>The highest date selectable for this DatePicker. This is a bindable property.</summary>
            <value>The maximum <see cref="T:System.DateTime" /> selectable for the DateEntry. Default December 31, 2100.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.DatePicker.MaximumDateProperty">
            <summary>Identifies the MaximumDate bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.MinimumDate">
            <summary>The lowest date selectable for this DatePicker. This is a bindable property.</summary>
            <value>The minimum <see cref="T:System.DateTime" /> selectable for the DateEntry. Default January 1, 1900.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.DatePicker.MinimumDateProperty">
            <summary>Identifies the MinimumDate bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.TextColor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.DatePicker.TextColorProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DefinitionCollection`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>A collection parameterized by an <see cref="T:Xamarin.Forms.IDefinition" />. Base class for <see cref="T:Xamarin.Forms.ColumnDefinitionCollection" /> and <see cref="T:Xamarin.Forms.RowDefinitionCollection" />.</summary>
            <remarks>
                <para>Objects of type <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> are parameterized with a type of <see cref="T:Xamarin.Forms.IDefinition" />.</para>
                <para>
                    <img href="IDefinition.DefinitionCollectionRelation.png" />
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Add(T)">
            <param name="item">The <see cref="T:Xamarin.Forms.IDefinition" /> to add.</param>
            <summary>Adds a <see cref="T:Xamarin.Forms.IDefinition" /> to the collection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Clear">
            <summary>Removes all values from this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Contains(T)">
            <param name="item">The <see cref="T:Xamarin.Forms.IDefinition" /> to check for in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> .</param>
            <summary>Returns a Boolean value that indicates whether or not this <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> contains the specified <see cref="T:Xamarin.Forms.IDefinition" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.CopyTo(T[],System.Int32)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>Copies <see cref="T:Xamarin.Forms.IDefinition" /> instances from this <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> to an array, starting at the specified index.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DefinitionCollection`1.Count">
            <summary>Gets the number of <see cref="T:Xamarin.Forms.IDefinition" /> instances contained in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:Xamarin.Forms.IDefinition" /> instances in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.IndexOf(T)">
            <param name="item">The <see cref="T:Xamarin.Forms.IDefinition" /> instance to find.</param>
            <summary>Returns the index of the first occurrence of <paramref name="item" /> in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Insert(System.Int32,T)">
            <param name="index">The position at which to insert <paramref name="item" />.</param>
            <param name="item">The <see cref="T:Xamarin.Forms.IDefinition" /> to insert.</param>
            <summary>Inserts a <see cref="T:Xamarin.Forms.IDefinition" /> into this <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> at the location that is specified by <paramref name="index" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DefinitionCollection`1.IsReadOnly">
            <summary>
                <see langword="false" />. <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> instances can have items added to them and removed from them.</summary>
            <value>
                <see langword="false" />
            </value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DefinitionCollection`1.Item(System.Int32)">
            <param name="index">The location of the item to get or set.</param>
            <summary>Gets or sets the value indexed by <paramref name="index" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.DefinitionCollection`1.ItemSizeChanged">
            <summary>Event that is raised when the display size of item in the collection changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Remove(T)">
            <param name="item">The <see cref="T:Xamarin.Forms.IDefinition" /> to remove from this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />.</param>
            <summary>Removes a <see cref="T:Xamarin.Forms.IDefinition" /> from this <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> and returns <see langword="true" /> if the item was removed.</summary>
            <returns>
                <see langword="true" /> if <paramref name="item" /> was in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> and was therefore removed. <see langword="false" /> if <paramref name="item" /> was not in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />. </returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.RemoveAt(System.Int32)">
            <param name="index">The location in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> from which to remove an <see cref="T:Xamarin.Forms.IDefinition" /> instance.</param>
            <summary>Removes an item from this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator that can be used to iterate over the <see cref="T:Xamarin.Forms.IDefinition" /> instances in this <see cref="T:Xamarin.Forms.DefinitionCollection`1" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DependencyAttribute">
            <summary>An attribute that indicates that the specified type provides a concrete implementation of a needed interface.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DependencyAttribute(System.Type)">
            <param name="implementorType">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.DependencyAttribute" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DependencyFetchTarget">
            <summary>Enumeration specifying whether <see cref="M:Xamarin.Forms.DependencyService.Get" /> should return a reference to a global or new instance.</summary>
            <remarks>
                <para>The following example shows how <see cref="T:Xamarin.Forms.DependencyFetchTarget" /> can be used to specify a new instance:</para>
                <example>
                    <code lang="C#"><![CDATA[
var secondFetch = DependencyService.Get<IDependencyTest> (DependencyFetchTarget.NewInstance);
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.DependencyFetchTarget.GlobalInstance">
            <summary>Return a global instance.</summary>
        </member>
        <member name="F:Xamarin.Forms.DependencyFetchTarget.NewInstance">
            <summary>Return a new instance.</summary>
        </member>
        <member name="T:Xamarin.Forms.DependencyService">
            <summary>Static class that provides the <see cref="M:Xamarin.Forms.DependencyService.Get{T}" /> factory method for retrieving platform-specific implementations of the specified type T.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DependencyService.Get``1(Xamarin.Forms.DependencyFetchTarget)">
            <typeparam name="T">To be added.</typeparam>
            <param name="fetchTarget">To be added.</param>
            <summary>Returns the platform-specific implementation of type T.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DependencyService.Register``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>Registers the platform-specific implementation of type T.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DependencyService.Register``2">
            <typeparam name="T">To be added.</typeparam>
            <typeparam name="TImpl">To be added.</typeparam>
            <summary>Registers the platform-specific implementation of type T.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Device">
            <summary>A utility class to interact with the current Device/Platform.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Device.BeginInvokeOnMainThread(System.Action)">
            <param name="action">The Action to invoke </param>
            <summary>Invokes an Action on the device main (UI) thread.</summary>
            <remarks>
                <para>This example shows how to set the Text of Label on the main thread, e.g. in response to an async event.
          </para>
                <example>
                    <code lang="C#"><![CDATA[
Device.BeginInvokeOnMainThread (() => {
  label.Text = "Async operation completed";
});
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Device.GetNamedSize(Xamarin.Forms.NamedSize,System.Type)">
            <param name="size">To be added.</param>
            <param name="targetElementType">To be added.</param>
            <summary>Returns a double that represents the named size for the font that is used on the element on the native platform.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Device.GetNamedSize(Xamarin.Forms.NamedSize,Xamarin.Forms.Element)">
            <param name="size">To be added.</param>
            <param name="targetElement">To be added.</param>
            <summary>Returns a double that represents a font size that corresponds to <paramref name="size" /> on <paramref name="targetElement" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Device.Idiom">
            <summary>Gets the kind of device that Xamarin.Forms is currently working on.</summary>
            <value>A <see cref="T:Xamarin.Forms.TargetIdiom" /> that represents the device type.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Device.OnPlatform(System.Action,System.Action,System.Action,System.Action)">
            <param name="iOS">(optional) The Action to execute on iOS.</param>
            <param name="Android">(optional) The Action to execute on Android.</param>
            <param name="WinPhone">(optional) The Action to execute on WinPhone.</param>
            <param name="Default">(optional) The Action to execute if no Action was provided for the current OS.</param>
            <summary>Executes different Actions depending on the <see cref="T:Xamarin.QcuikUI.TargetOS" /> that Xamarin.Forms is working on.</summary>
            <remarks>
                <para>This example shows how to change the font of a Label on a single OS.
          </para>
                <example>
                    <code lang="C#"><![CDATA[
Device.OnPlatform (iOS: () => label.Font = Font.OfSize ("HelveticaNeue-UltraLight", NamedSize.Large));
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Device.OnPlatform``1(``0,``0,``0)">
            <typeparam name="T">The type of the value to be returned.</typeparam>
            <param name="iOS">The value for iOS.</param>
            <param name="Android">The value for Android.</param>
            <param name="WinPhone">The value for WinPhone.</param>
            <summary>Returns different values depending on the <see cref="T:Xamarin.Forms.TargetOS" /> Xamarin.Forms is working on.</summary>
            <returns>The value for the current OS.</returns>
            <remarks>
                <para>This example shows how to use different heights for a Button on different OS.
          </para>
                <example>
                    <code lang="C#"><![CDATA[
button.HeightRequest = Device.OnPlatform (20,30,30);
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Device.OpenUri(System.Uri)">
            <param name="uri">The <see cref="T:ystem.Uri" /> to open.</param>
            <summary>Request the device to open the Uri.</summary>
            <remarks>This often navigates out of the application.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Device.OS">
            <summary>Gets the <see cref="Xamarin.Forms.TargetPlatform" /> indicating the OS Xamarin.Forms is working on.</summary>
            <value>A <see cref="Xamarin.Forms.TargetPlatform" /> that indicates the current OS.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Device.StartTimer(System.TimeSpan,System.Func{System.Boolean})">
            <param name="interval">The interval between invocations of the callback.</param>
            <param name="callback">The action to run when the timer elapses.</param>
            <summary>Starts a recurring timer using the device clock capabilities.</summary>
            <remarks>While the callback returns <see langword="true" />, the timer will keep recurring.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Device+Styles">
            <summary>Class that exposes device-specific styles as static fields.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.BodyStyle">
            <summary>The device-specific body style.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.BodyStyleKey">
            <summary>The key that identifies the device-specific <see cref="F:Xamarin.Forms.Device+Styles.BodyStyle" /> in the base resource.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.CaptionStyle">
            <summary>The device-specific caption style.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.CaptionStyleKey">
            <summary>The key that identifies the device-specific <see cref="F:Xamarin.Forms.Device+Styles.CaptionStyle" /> in the base resource.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.ListItemDetailTextStyle">
            <summary>The device-specific style for detail text in list items.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.ListItemDetailTextStyleKey">
            <summary>The key that identifies the device-specific <see cref="F:Xamarin.Forms.Device+Styles.ListItemDetailTextStyle" /> in the base resource.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.ListItemTextStyle">
            <summary>The device-specific style for text in list items.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.ListItemTextStyleKey">
            <summary>The key that identifies the device-specific <see cref="F:Xamarin.Forms.Device+Styles.ListItemTextStyle" /> in the base resource.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.SubtitleStyle">
            <summary>The device-specific subtitle style.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.SubtitleStyleKey">
            <summary>The key that identifies the device-specific <see cref="F:Xamarin.Forms.Device+Styles.SubtitleStyle" /> in the base resource.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.TitleStyle">
            <summary>The device-specific title style.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Device+Styles.TitleStyleKey">
            <summary>The key that identifies the device-specific <see cref="F:Xamarin.Forms.Device+Styles.TitleStyle" /> in the base resource.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Easing">
            <summary>Functions that modify values non-linearly, generally used for animations.</summary>
            <remarks>
                <para>Easing functions are applied to input values in the range [0,1]. The cubic easing functions are often considered to look most natural.</para>
                <para>If developers wish to use their own easing functions, they should return a value of 0 for an input of 0 and a value of 1 for an input of 1 or the animation will have a jump.</para>
                <para>The predefined <see cref="T:Xamarin.Forms.Easing" /> functions have the following forms:</para>
                <list type="table">
                    <listheader>
                        <term>Member</term>
                        <description>Graph</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.BounceIn" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.BounceIn.png" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.BounceOut" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.BounceOut.png" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.CubicIn" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.CubicIn.png" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.CubicInOut" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.CubicInOut.png" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.CubicOut" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.CubicOut.png" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.Linear" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.Linear.png" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.SinIn" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.SinIn.gif" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.SinInOut" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.SinInOut.gif" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.SinOut" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.SinOut.gif" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.SpringIn" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.SpringIn.png" />
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:Xamarin.Forms.Easing.SpringOut" />
                        </term>
                        <description>
                            <para>
                                <img href="Easing.SpringOut.png" />
                            </para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Easing(System.Func{System.Double,System.Double})">
            <param name="easingFunc">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Easing" /> object with the <paramref name="easingFunc" /> function.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.BounceIn">
            <summary>Jumps towards, and then bounces as it settles at the final value. (Note: Known bug in 1.0.0 release)</summary>
            <remarks>
                <para>NOTE: The 1.0.0. release of <see cref="F:Xamarin.Forms.Easing.BounceIn" /> has a known bug and runs backwards. The following graph shows the desired behavior, shortly to be released:</para>
                <para>
                    <img href="Easing.BounceIn.png" />
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.BounceOut">
            <summary>Leaps to final values, bounces 3 times, and settles.</summary>
            <remarks>
                <para>
                    <img href="Easing.BounceOut.png" />
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.CubicIn">
            <summary>Starts slowly and accelerates.</summary>
            <remarks>
                <para>
                    <img href="Easing.CubicIn.png" />
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.CubicInOut">
            <summary>Accelerates and decelerates. Often a natural-looking choice.</summary>
            <remarks>
                <para>
                    <img href="Easing.CubicInOut.png" />
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.CubicOut">
            <summary>Starts quickly and the decelerates.</summary>
            <remarks>
                <para>
                    <img href="Easing.CubicOut.png" />
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Easing.Ease(System.Double)">
            <param name="v">A value in the range [0,1] to which the easing function should be applied.</param>
            <summary>Applies the easing function to the specified value <paramref name="v" />.</summary>
            <returns>The value of the easing function when applied to the value <paramref name="v" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.Linear">
            <summary>Linear transformation.</summary>
            <remarks>
                <para>
                    <img href="Easing.Linear.png" />
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Easing.op_Implicit(System.Func{System.Double,System.Double})~Xamarin.Forms.Easing">
            <param name="func">An easing function.</param>
            <summary>Converts a function into an <see cref="T:Xamarin.Forms.Easing" />.</summary>
            <returns>An <see cref="T:Xamarin.Forms.Easing" /> for the <paramref name="func" />.</returns>
            <remarks>
                <para>An easing function should return a value of (or near) 0 at 0 and 1 (or near) for 1. </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SinIn">
            <summary>Smoothly accelerates.</summary>
            <remarks>
                <para>
                    <img href="Easing.SinIn.gif" />
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SinInOut">
            <summary>Accelerates in and out.</summary>
            <remarks>
                <para>
                    <img href="Easing.SinInOut.gif" />
                </para>.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SinOut">
            <summary>Smoothly decelerates.</summary>
            <remarks>
                <para>
                    <img href="Easing.SinOut.gif" />
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SpringIn">
            <summary>Moves away and then leaps toward the final value.</summary>
            <remarks>
                <para>
                    <img href="Easing.SpringIn.png" />
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SpringOut">
            <summary>Overshoots and then returns.</summary>
            <remarks>
                <para>
                    <img href="Easing.SpringOut.png" />
                </para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.Editor">
            <summary>A control that can edit multiple lines of text.</summary>
            <remarks>
                <para>For single line entries, see <see cref="T:Xamarin.Forms.Entry" />.</para>
                <para>
                    <img href="Editor.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Editor">
            <summary>Initializes a new instance of the Editor class.</summary>
            <remarks>
                <para>
              The following example creates a Editor with a Chat keyboard that fills the available space.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
var editor = new Editor {
  VerticalOptions = LayoutOptions.FillAndExpand,
  Keyboard = Keyboard.Chat,
};
              ]]></code>
                </example>
                <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.Editor" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Text</term>
                        <description>
                            <para>The initial text that will appear in the editor.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.Editor.Completed">
            <summary>Event that is fired when editing has completed.</summary>
            <remarks>iOS (Unfocusing the editor or pressing "Done" triggers the event). Android / Windows Phone (Unfocusing the Editor triggers the event)</remarks>
        </member>
        <member name="P:Xamarin.Forms.Editor.FontAttributes">
            <summary>Gets a value that indicates whether the font for the editor is bold, italic, or neither.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Editor.FontAttributesProperty">
            <summary>Backing store for the FontAttributes property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Editor.FontFamily">
            <summary>Gets the font family to which the font for the editor belongs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Editor.FontFamilyProperty">
            <summary>Backing store for the FontFamily property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Editor.FontSize">
            <summary>Gets the size of the font for the editor.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Editor.FontSizeProperty">
            <summary>Backing store for the FontSize property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Editor.Text">
            <summary>Gets or sets the text of the entry. This is a bindable property.</summary>
            <value>A string containing the text of the entry. The default value is null.</value>
            <remarks>Setting this property will cause the <see cref="E:Xamarin.Forms.Editor.TextChanged" /> event to be emitted.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Editor.TextChanged">
            <summary>Occurs when the text of the Editor changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Editor.TextColor">
            <summary>Gets or sets the text color.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Editor.TextColorProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.Editor.TextColor" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Editor.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Effect">
            <summary>A collection of styles and properties that can be added to an element at run time.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Effect.Element">
            <summary>Gets the element to which the style is attached.</summary>
            <value>The <see cref="T:Xamarin.Forms.Element" /> to which the property is attached, if the property is attached. Otherwise, <see langword="null" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Effect.IsAttached">
            <summary>Gets a value that tells whether the effect is attached to an element.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Effect.OnAttached">
            <summary>Method that is called after the effect is attached and made valid.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Effect.OnDetached">
            <summary>Method that is called after the effect is detached and invalidated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Effect.Resolve(System.String)">
            <param name="name">To be added.</param>
            <summary>Returns an <see cref="T:Xamarin.Forms.Effect" /> for the specified name, which is of the form <c>ResolutionGroupName.ExportEffect</c>.</summary>
            <returns>The uniquely identified effect.</returns>
            <remarks>The <see cref="T:Xamarin.Forms.Effect.Resolve" /> method takes a string that is the concatenation of a resolution group name (supplied to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />), <c>'.'</c>, and the unique name that was supplied to <see cref="T:Xamarin.Forms.ExportEffectAttribute" />, and returns the specified effect.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Effect.ResolveId">
            <summary>Gets the ID that is used to resolve this effect at runtime.</summary>
            <value>The ID that is used to resolve this effect at runtime.</value>
            <remarks>
                <para>Developers must supply a name to <see cref="T:Xamarin.Forms.ExportEffectAttribute" /> that is unique over the scope of the name that they supply to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />. The <see cref="T:Xamarin.Forms.Effect.Resolve" /> method takes a string that is the concatenation of <paramref name="name" /> (the resolution group name), <c>'.'</c>, and the unique name that was supplied to <see cref="T:Xamarin.Forms.ExportEffectAttribute" />, and returns the specified effect.</para>
                <example>
                    <para>For example, with the declarations:</para>
                    <code lang="c#"><![CDATA[
            [assembly: ResolutionGroupName ("com.YourCompany")]
            [assembly: ExportEffect (typeof (ShadowEffect), "ShadowEffect")]]]></code>
                    <para>Then the code below will add the effect to a button:</para>
                    <code lang="c#"><![CDATA[
            [var button = new Button { Text = "I have a shadow" };
    button.Effects.Add (Effect.Resolve ("com.YourCompany.ShadowEffect"));]]></code>
                </example>
                <para>This property returns the string that developers pass to <see cref="T:Xamarin.Forms.Effect.Resolve" /> to get the effect at runtime.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.Element">
            <summary>Provides the base class for all Forms hierarchal elements. This class contains all the methods and properties required to represent an element in the Forms hierarchy.</summary>
            <remarks>
                <para>The following diagram shows the classes derived from <see cref="T:Xamarin.Forms.Element" />. </para>
                <para>
                    <img href="Element.Hierarchy.png" />
                </para>
                <para>The diagram shows some important categories:</para>
                <list type="table">
                    <listheader>
                        <term>Class</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.VisualElement" />
                        </term>
                        <description>A <see cref="T:Xamarin.Forms.Element" /> that occupies an area on the screen, has a visual appearance, and can obtain touch input.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.Cell" />
                        </term>
                        <description>Cells are elements meant to be added to <see cref="T:Xamarin.Forms.ListView" /> or <see cref="T:Xamarin.Forms.TableView" />.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.Page" />
                        </term>
                        <description>A <see cref="T:Xamarin.Forms.VisualElement" /> that occupies most or all of the screen and contains a single child.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.Layout" />
                        </term>
                        <description>
                            <see cref="T:Xamarin.Forms.Layout" /> have a single child of type <see cref="T:Xamarin.Forms.View" />, while subclasses of <see cref="T:Xamarin.Forms.Layout`1" /> have a collection of multiple children views, including other layouts.</description>
                    </item>
                    <item>
                        <term>
            Controls and specialized <see cref="T:Xamarin.Forms.View" />s
          </term>
                        <description>The lower part of the diagram shows the Xamarin.Forms classes for universally-available controls, such as <see cref="T:Xamarin.Forms.Button" />s and <see cref="T:Xamarin.Forms.TableView" />s.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Element">
            <summary>Protected constructor used to initialize a the element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.AutomationId">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.ChildAdded">
            <summary>Occurs whenever a child element is added to the element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.ChildRemoved">
            <summary>Occurs whenever a child element is removed from the element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.ClassId">
            <summary>Gets or sets a value used to identify a collection of semantically similar elements.</summary>
            <value>A string that represents the collection the element belongs to.</value>
            <remarks>Use the class id property to collect together elements into semantically similar groups for identification in ui testing and in theme engines.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Element.ClassIdProperty">
            <summary>Identifies the ClassId bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.DescendantAdded">
            <summary>Occurs whenever a child element is added to the elements subtree.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.DescendantRemoved">
            <summary>Occurs whenever a child element is removed from the elements subtree.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Effects">
            <summary>A list of the effects that are applied to this item.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Id">
            <summary>Gets a value that can be used to uniquely identify an element through the run of an application.</summary>
            <value>A Guid uniquely identifying the element.</value>
            <remarks>This value is generated at runtime and is not stable across runs of your app.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnBindingContextChanged">
            <summary>Invoked whenever the binding context of the element changes. Implement this method to add class handling for this event.</summary>
            <remarks>Implementors must call the base method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">The element that was added.</param>
            <summary>Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildAdded" /> event needs to be emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element)">
            <param name="child">The element that was removed.</param>
            <summary>Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildRemoved" /> event needs to be emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnParentSet">
            <summary>Invoked whenever the Parent of an element is set. Implement this method in order to add behavior when the element is added to a parent.</summary>
            <remarks>Implementors must call the base method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnPropertyChanged(System.String)">
            <param name="propertyName">The name of the bound property that changed.</param>
            <summary>Method that is called when a bound property is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Parent">
            <summary>Gets or sets the parent element of the element.</summary>
            <value>The element which should be the parent of this element.</value>
            <remarks>Most application authors will not need to set the parent element by hand.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.ParentView">
            <summary>Gets the element which is the closest ancestor of this element that is a <see cref="T:Xamarin.Forms.VisualElement" />.</summary>
            <value>The closest ansestor which is a <see cref="T:Xamarin.Forms.VisualElement" />.</value>
            <remarks>Convenient way of accessing the nearest ancestor of an element which is actually represented on screen visually. If this element is a visual element, its bounds are relative to its ParentView.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty)">
            <param name="property">The BindableProperty from which to remove the DynamicResource.</param>
            <summary>Removes a previously set dynamic resource</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty,System.String)">
            <param name="property">The BindableProperty.</param>
            <param name="key">The key of the DynamicResource</param>
            <summary>Sets the BindableProperty property of this element to be updated via the DynamicResource with the provided key.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Element.StyleId">
            <summary>Gets or sets a user defined value to uniquely identify the element.</summary>
            <value>A string uniquely identifying the element.</value>
            <remarks>Use the StyleId property to identify individual elements in your application for identification in ui testing and in theme engines.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#IElement#AddResourcesChangedListener(System.Action{System.Object,Xamarin.Forms.ResourcesChangedEventArgs})">
            <param name="onchanged">To be added.</param>
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#IElement#RemoveResourcesChangedListener(System.Action{System.Object,Xamarin.Forms.ResourcesChangedEventArgs})">
            <param name="onchanged">To be added.</param>
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Xamarin#Forms#IElement#ResourceDictionary">
            <summary>
          Internal.
        </summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Xamarin#Forms#IElement#XamlParent">
            <summary>Gets or sets a weak reference to the parent of this <see cref="T:Xamarin.Forms.Element" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Xamarin#Forms#IElementController#EffectControlProvider">
            <summary>For internal use only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#IElementController#SetValueFromRenderer(Xamarin.Forms.BindableProperty,System.Object)">
            <param name="property">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets a value from a renderer without breaking the binding on a bound property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#IElementController#SetValueFromRenderer(Xamarin.Forms.BindablePropertyKey,System.Object)">
            <param name="property">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets a value from a renderer without breaking the binding on a bound property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#FindByName(System.String)">
            <param name="name">The identifier of the <see cref="T:Xamarin.Forms.Element" /> being sought.</param>
            <summary>Finds an object previously registered with <see cref="M:Xamarin.Forms.Element.RegisterName" />.</summary>
            <returns>The Object previously associated with <paramref name="name" /> by a call to <see cref="M:Xamarin.Forms.Element.RegisterName" />. Raises a <see cref="T:System.InvalidOperationException" /> if <c>this</c> is not in an <see cref="T:Xamarin.Forms.INameScope" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#RegisterName(System.String,System.Lazy{System.Object})">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <summary>Internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#RegisterName(System.String,System.Object)">
            <param name="name">Identifier to be used with the <paramref name="scopedElement" />.</param>
            <param name="scopedElement">Object to be associated with the <paramref name="name" />.</param>
            <summary>Within an <see cref="T:Xamarin.Forms.INameScope" />, creates an association between <paramref name="name" /> and <paramref name="scopedElement" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#RegisterName(System.String,System.Object,System.Xml.IXmlLineInfo)">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <param name="xmlLineInfo">To be added.</param>
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#UnregisterName(System.String)">
            <param name="name">The identifier to be removed.</param>
            <summary>Removes <paramref name="name" /> from an <see cref="T:Xamarin.Forms.INameScope" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#Internals#INameScope#FindByName(System.String)">
            <param name="name">To be added.</param>
            <summary>For internal use only.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#Internals#INameScope#RegisterName(System.String,System.Object)">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#Internals#INameScope#RegisterName(System.String,System.Object,System.Xml.IXmlLineInfo)">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <param name="xmlLineInfo">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#Internals#INameScope#UnregisterName(System.String)">
            <param name="name">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ElementEventArgs">
            <summary>Provides data for events pertaining to a single <see cref="T:Xamarin.Forms.Element" />.</summary>
            <remarks />
            <altmember cref="E:Xamarin.Forms.Element.ChildAdded" />
            <altmember cref="E:Xamarin.Forms.Element.ChildRemoved" />
            <altmember cref="E:Xamarin.Forms.Element.DescendantAdded" />
            <altmember cref="E:Xamarin.Forms.Element.DescendantRemoved" />
        </member>
        <member name="C:Xamarin.Forms.ElementEventArgs(Xamarin.Forms.Element)">
            <param name="element">The element relevant to the event.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.ElementEventArgs" /> class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ElementEventArgs.Element">
            <summary>Gets the element relevant to the event.</summary>
            <value>The element relevant to the event.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ElementTemplate">
            <summary>Base class for <see cref="T:Xamarin.Forms.DataTemplate" /> and <see cref="T:Xamarin.Forms.ControlTemplate" /> classes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ElementTemplate.CreateContent">
            <summary>Used by the XAML infrastructure to load data templates and set up the content of the resulting UI.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ElementTemplate.Xamarin#Forms#Internals#IDataTemplate#LoadTemplate">
            <summary>For internal use only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Entry">
            <summary>A control that can edit a single line of text.</summary>
            <remarks>
                <para>Entry is a single line text entry. It is best used for collecting small discrete pieces of information, like usernames and passwords.</para>
                <example>
                    <para>
                The following example creates a new username and password set of entries.
                </para>
                    <code lang="C#"><![CDATA[
View CreateLoginForm ()
{
  var usernameEntry = new Entry {Placeholder = "Username"};
  var passwordEntry = new Entry {
    Placeholder = "Password",
    IsPassword = true
  };

  return new StackLayout {
    Children = {
      usernameEntry,
      passwordEntry
    }
  };
}
            ]]></code>
                    <para>The FormsGallery sample, which can be found on the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">Sample Applications</a></format> page, has an EntryDemoPage.cs file. This file contains a longer and more complicated example.</para>
                </example>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Entry" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>IsPassword</term>
                        <description>
                            <c>true</c> to indicate that the <see cref="T:Xamarin.Forms.Entry" /> is a password field. Otherwise, <c>false</c>.</description>
                    </item>
                    <item>
                        <term>Placeholder</term>
                        <description>The default text that will appear in the control.</description>
                    </item>
                    <item>
                        <term>Text</term>
                        <description>
                            <para>The initial text that will appear in the entry.</para>
                        </description>
                    </item>
                    <item>
                        <term>TextColor</term>
                        <description>
                            <para>A color specification, with or without the prefix, "Color". For example, "Color.Red" and "Red" both specify the color red.</para>
                        </description>
                    </item>
                </list>
                <para>
                    <img href="Entry.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Entry">
            <summary>Initializes a new instance of the Entry class.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Entry.Completed">
            <summary>Occurs when the user finalizes the text in an entry with the return key.</summary>
            <remarks>This finalization will usually but not always be accompanied by IsFocused being set to false.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.FontAttributes">
            <summary>Gets a value that indicates whether the font for the Entry element text is bold, italic, or neither.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.FontAttributesProperty">
            <summary>Backing store for the FontAttributes property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.FontFamily">
            <summary>Gets the font family for the Entry element text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.FontFamilyProperty">
            <summary>Backing store for the FontFamily property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.FontSize">
            <summary>Gets the size of the font for the Entry element text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.FontSizeProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.Entry.FontSize" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.HorizontalTextAlignment">
            <summary>Gets or sets the horizontal text alignment.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.HorizontalTextAlignmentProperty">
            <summary>Backing store for the HorizontalTextAlignment property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.IsPassword">
            <summary>Gets or sets a value that indicates if the entry should visually obscure typed text. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element is a password box; otherwise, <see langword="false" />. Default value is <see langword="false" />.</value>
            <remarks>Toggling this value does not reset the contents of the entry, therefore it is advisable to be careful about setting IsPassword to false, as it may contain sensitive information.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.IsPasswordProperty">
            <summary>Identifies the IsPassword bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Entry.Placeholder">
            <summary>Gets or sets the placeholder text shown when the entry <see cref="P:Xamarin.Forms.Entry.Text" /> is null or empty. This is a bindable property.</summary>
            <value>The placeholder text shown when <see cref="P:Xamarin.Forms.Entry.Text" /> is null or empty. The default value is <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Entry.PlaceholderColor">
            <summary>Gets or sets the color of the placeholder text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.PlaceholderColorProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.Entry.PlaceholderColor" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.PlaceholderProperty">
            <summary>Identifies the Placeholder bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Entry.Text">
            <summary>Gets or sets the text of the entry. This is a bindable property.</summary>
            <value>A string containing the text of the entry. The default value is <see langword="null" />.</value>
            <remarks>Setting this property will cause the <see cref="E:Xamarin.Forms.Entry.ValueChanged" /> event to be emitted.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Entry.TextChanged">
            <summary>Event that is raised when the text in this <see cref="T:Xamarin.Forms.Entry" /> element is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.TextColor">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> for the text of the Entry. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Color" /> of the text.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Entry.TextColorProperty">
            <summary>Identifies the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Entry.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.EntryCell">
            <summary>A <see cref="T:Xamarin.Forms.Cell" /> with a label and a single line text entry field.</summary>
            <remarks>
                <para>The following example shows a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class EntryCellDemoPage : ContentPage
    {
        public EntryCellDemoPage()
        {
            Label header = new Label
            {
                Text = "EntryCell",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(EntryCell)),
                HorizontalOptions = LayoutOptions.Center
            };

            TableView tableView = new TableView
            {
                Intent = TableIntent.Form,
                Root = new TableRoot
                {
                    new TableSection
                    {
                        new EntryCell
                        {
                            Label = "EntryCell:",
                            Placeholder = "Type Text Here"
                        }
                    }
                }
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children = 
                {
                    header,
                    tableView
                }
            };
        }
    }
}
]]></code>
                </example>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.EntryCell" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Keyboard</term>
                        <description>A <see cref="T:Xamarin.Forms.Keyboard" /> property name that indicates which keyboard to present to the user when editing text.</description>
                    </item>
                    <item>
                        <term>Label</term>
                        <description>
                            <para>The text that is presented next to the entry area in the <see cref="T:Xamarin.Forms.EntryCell" />. </para>
                        </description>
                    </item>
                    <item>
                        <term>LabelColor</term>
                        <description>
                            <para>A color specification, with or without the prefix, "Color". For example, "Color.Red" and "Red" both specify the color red.</para>
                        </description>
                    </item>
                    <item>
                        <term>Placeholder</term>
                        <description>The default text that will appear in the control when it is empty.</description>
                    </item>
                    <item>
                        <term>Text</term>
                        <description>
                            <para>The initial text that will appear in the editor.</para>
                        </description>
                    </item>
                    <item>
                        <term>XAlign</term>
                        <description>
                            <para>
                                <c>Center</c>, <c>End</c>, or <c>Start</c>, to indicate the placement of the text that is entered by the user.</para>
                        </description>
                    </item>
                </list>
                <para>
                    <img href="EntryCell.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.EntryCell">
            <summary>Initializes a new instance of the EntryCell class.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.EntryCell.Completed">
            <summary>Event fired when the user presses 'Done' on the EntryCell's keyboard</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.HorizontalTextAlignment">
            <summary>Gets or sets the horizontal alignement of the Text property. This is a bindable property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.EntryCell.HorizontalTextAlignmentProperty">
            <summary>Identifies the HorizontalTextAlignment bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Keyboard">
            <summary>Gets or sets the Keyboard to display while editing the EntryCell. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Keyboard" /> representing the keyboard kind. Default is <see cref="P:Xamarin.Forms.Keyboard.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.KeyboardProperty">
            <summary>Identifies the Keyboard bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Label">
            <summary>Gets or sets the fixed text presented next to the Entry in the EntryCell. This is a bindable property.</summary>
            <value>A <see cref="T:System.String" />.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.LabelColor">
            <summary>Gets or sets the Color used for rendering the Label property. This is a bindable property.</summary>
            <value>Default is Color.Default.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.LabelColorProperty">
            <summary>Identifies the LabelColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.LabelProperty">
            <summary>Identifies the Label bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Placeholder">
            <summary>Gets or sets the placeholder text displayed in the Entry when the Text is null or empty. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.PlaceholderProperty">
            <summary>Identifies the Placeholder bindable property,</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Text">
            <summary>Gets or sets the content of the Entry of the EntryCell. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.XAlign">
            <summary>Gets or sets the horizontal alignement of the Text property. This is a bindable property.</summary>
            <value>Default is <see cref="E:Xamarin.Forms.TextAlignment.Start" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.XAlignProperty">
            <summary>Identifies the XAlign bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.EventTrigger">
            <summary>Class that represents a triggering event and a list of <see cref="T:Xamarin.Forms.TriggerAction" /> objects that will be invoked when the event is raised.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.EventTrigger" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Event</term>
                        <description>
                            <para>The name of the event to which to respond.</para>
                        </description>
                    </item>
                    <item>
                        <term>Object name</term>
                        <description>
                            <para>The qualified name of a <see cref="T:Xamarin.Forms.TriggerAction`1" /> implementation that has been defined by the application developer. This object is instantiated and its <see cref="M:Xamarin.Forms.TriggerAction`1.Invoke" /> method is called when the triggering event is raised. Attributes on this tag set corresponding proptery values on the <see cref="T:Xamarin.Forms.TriggerAction`1" /> implementation</para> before the <see cref="M:Xamarin.Forms.TriggerAction`1.Invoke" /> method is called.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.EventTrigger">
            <summary>Creates a new <see cref="T:Xamarin.Forms.EventTrigger" /> instance.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EventTrigger.Actions">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.TriggerAction" /> objects that will be invoked when the event that is identified by the <see cref="P:Xamarin.Forms.EventTrigger.Event" /> property is raised.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EventTrigger.Event">
            <summary>Gets or sets the name of the event that will cause the actions that are contained in the <see cref="P:Xamarin.Forms.EventTrigger.Actions" /> to be invoked.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.EventTrigger.OnAttached">
            <summary>Internal.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.EventTrigger.OnDetaching">
            <summary>Internal.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ExportEffectAttribute">
            <summary>Attribute that identifies a <see cref="T:Xamarin.Forms.Effect" /> with a unique identifer that can be used with <see cref="MXamarin.Forms.Effect.Resolve" /> to locate an effect.</summary>
            <remarks>
                <para>Developers must supply a name that is unique over the scope of the value that was supplied to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />. The <see cref="T:Xamarin.Forms.Effect.Resolve" /> method takes a string that is the concatenation of the the resolution group name that was provided to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />, '<c>.</c>', and the name that was supplied to <see cref="T:Xamarin.Forms.ExportEffectAttribute" />, and returns an effect that will have the type <paramref name="effectType" />.</para>
                <example>
                    <para>For example, with the declarations:</para>
                    <code lang="c#"><![CDATA[
        [assembly: ResolutionGroupName ("com.YourCompany")]
        [assembly: ExportEffect (typeof (ShadowEffect), "ShadowEffect")]]]></code>
                    <para>Then the code below will add the effect to a button:</para>
                    <code lang="c#"><![CDATA[
        [var button = new Button { Text = "I have a shadow" };
button.Effects.Add (Effect.Resolve ("com.YourCompany.ShadowEffect"));]]></code>
                </example>
            </remarks>
            <altmember cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />
        </member>
        <member name="C:Xamarin.Forms.ExportEffectAttribute(System.Type,System.String)">
            <param name="effectType">The type of the marked <see cref="T:Xamarin.Forms.Effect" />.</param>
            <param name="uniqueName">A unique name for the <see cref="T:Xamarin.Forms.Effect" />.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.ExportEffectAttribute" />.</summary>
            <remarks>
                <para>Developers must supply a <paramref name="uniqueName" /> that is unique over the scope of the value that was supplied to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />. The <see cref="T:Xamarin.Forms.Effect.Resolve" /> method takes a string that is the concatenation of the the resolution group name that was provided to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />, '<c>.</c>', and the name that was supplied to <see cref="T:Xamarin.Forms.ExportEffectAttribute" />, and returns an effect that will have the type <paramref name="effectType" />.</para>
                <example>
                    <para>For example, with the declarations:</para>
                    <code lang="c#"><![CDATA[
        [assembly: ResolutionGroupName ("com.YourCompany")]
        [assembly: ExportEffect (typeof (ShadowEffect), "ShadowEffect")]]]></code>
                    <para>Then the code below will add the effect to a button:</para>
                    <code lang="c#"><![CDATA[
        [var button = new Button { Text = "I have a shadow" };
button.Effects.Add (Effect.Resolve ("com.YourCompany.ShadowEffect"));]]></code>
                </example>
            </remarks>
            <altmember cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />
        </member>
        <member name="T:Xamarin.Forms.FileImageSource">
            <summary>An <see cref="T:Xamarin.Forms.ImageSource" /> that reads an image from a file.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.FileImageSource">
            <summary>Creates a new <see cref="T:Xamarin.Forms.FileImageSource" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSource.Cancel">
            <summary>Request a cancel of the ImageSource loading.</summary>
            <returns>An awaitable Task.</returns>
            <remarks>Overriden for FileImageSource. FileImageSource are not cancellable, so this will always returns a completed Task with <see langword="false" /> as Result.</remarks>
        </member>
        <member name="P:Xamarin.Forms.FileImageSource.File">
            <summary>Gets or sets the file from which this <see cref="T:Xamarin.Forms.FileImageSource" /> will load an image.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.FileImageSource.FileProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.FileImageSource.File" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSource.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Method that is called when the property that is specified by <paramref name="propertyName" /> is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSource.op_Implicit(System.String)~Xamarin.Forms.FileImageSource">
            <param name="file">To be added.</param>
            <summary>Allows implicit casting from a string.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSource.op_Implicit(Xamarin.Forms.FileImageSource)~System.String">
            <param name="file">To be added.</param>
            <summary>Allows implicit casting to a string.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.FileImageSourceConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts to <see cref="P:Xamarin.Forms.FileImageSource" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.FileImageSourceConverter">
            <summary>Creates a new <see cref="P:Xamarin.Forms.FileImageSource" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSourceConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns <see langword="true" /> if the source type can be converted with this type converter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSourceConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> with the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSourceConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Creates a file image source given a path to an image.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.FocusEventArgs">
            <summary>Event args for <see cref="T:Xamarin.Forms.VisualElement" />'s <see cref="E:Xamarin.Forms.VisualElement.Focused" /> and <see cref="T:Xamarin.Forms.VisualElement.Unfocused" /> events.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.FocusEventArgs(Xamarin.Forms.VisualElement,System.Boolean)">
            <param name="visualElement">The <see cref="T:Xamarin.Foms.VisualElement" /> who's focused was changed.</param>
            <param name="isFocused">Whether or not the <paramref name="visualElement" /> was focused.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.FocusEventArgs" /> class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.FocusEventArgs.IsFocused">
            <summary>Gets whether or not the <see cref="P:Xamarin.Forms.FocusEventArgs.View" /> was focused.</summary>
            <value>
                <see langword="true" /> if the view was focused, <see langword="false" /> otherwise.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.FocusEventArgs.VisualElement">
            <summary>Gets the <see cref="T:Xamarin.Foms.VisualElement" /> who's focused was changed.</summary>
            <value>The <see cref="T:Xamarin.Foms.VisualElement" /> who's focused was changed.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Font">
            <summary>The font used to display text.</summary>
            <remarks>The available fonts, and the matching between <see cref="T:Xamarin.Forms.Font" /> and real displayed fonts is device-dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.BoldSystemFontOfSize(System.Double)">
            <param name="size">The desired font size.</param>
            <summary>Returns a font instance that represents the default bold font, in the requested size, for the device.</summary>
            <returns>The requested bold <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Font.BoldSystemFontOfSize(Xamarin.Forms.NamedSize)">
            <param name="size">The desired font <see cref="T:Xamarin.Forms.NamedSize" />.</param>
            <summary>Returns an usable font instance representing the default bold font, in the requested NamedSize, for the device.</summary>
            <returns>The requested bold <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Font.Default">
            <summary>Gets the default font for the device.</summary>
            <value>The default font for the device.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> value to compare this font to.</param>
            <summary>Determine if the provided <see cref="T:System.Object" /> is equivalent to the current Font.</summary>
            <returns>
                <see langword="true" /> if the provided object is an equivalent font. <see langword="false" /> otherwise.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Font.FontAttributes">
            <summary>Gets a value that indicates whether the font is bold, italic, or neither.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Font.FontFamily">
            <summary>Gets the font family to which this font belongs.</summary>
            <value>The font family to which this <see cref="T:Xamarin.Forms.Font" /> structure belongs.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Font.FontSize">
            <summary>Gets the size of the font.</summary>
            <value>A <see langword="double" /> that indicates the size of the font.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.GetHashCode">
            <summary>Get the Hashcode for this <see cref="T:System.Object" />.</summary>
            <returns>A signed 32-bit hash code.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Font.IsDefault">
            <summary>Gets a value that tells whether this font has no attributes, belongs to the default family, and has no attributes set.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Font.NamedSize">
            <summary>Gets the named font size, such as "Large" or "Small".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.OfSize(System.String,System.Double)">
            <param name="name">The name of the targeted system font.</param>
            <param name="size">The desired font size.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Font" /> structure with the requested font and size.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Font" /> instance.</returns>
            <remarks>Font availability is platform- and device-dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.OfSize(System.String,Xamarin.Forms.NamedSize)">
            <param name="name">The name of the targeted system font.</param>
            <param name="size">The desired font <see cref="T:Xamarin.Forms.NamedSize" />.</param>
            <summary>Returns an usable <see cref="T:Xamarin.Forms.Font" />, with the requested font and NamedSize.</summary>
            <returns>A Font instance.</returns>
            <remarks>Font availability is platform and device dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.op_Equality(Xamarin.Forms.Font,Xamarin.Forms.Font)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>Returns <see langword="true" /> if <paramref name="left" /> represents the same font that <paramref name="right" /> represents. Otherwise, <see langword="false" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.op_Inequality(Xamarin.Forms.Font,Xamarin.Forms.Font)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>Returns <see langword="true" /> if <paramref name="left" /> does not represent the same font that <paramref name="right" /> represents. Otherwise, <see langword="false" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.SystemFontOfSize(System.Double)">
            <param name="size">The desired font size.</param>
            <summary>Returns an usable font instance representing the default font, in the requested size, for the device and platform.</summary>
            <returns>The requested <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Font.SystemFontOfSize(Xamarin.Forms.NamedSize)">
            <param name="size">The desired font <see cref="T:Xamarin.Forms.NamedSize" />.</param>
            <summary>Returns an usable font instance representing the default font, in the requested size, for the device and platform.</summary>
            <returns>The requested bold <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Font.SystemFontOfSize(System.Double,Xamarin.Forms.FontAttributes)">
            <param name="size">The requested font size.</param>
            <param name="attributes">Whether the font is bold, italic, or neither.</param>
            <summary>Returns a font structure with the specified size and attributes.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Font" /> structure with the specified <paramref name="attributes" /> and <paramref name="size" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.SystemFontOfSize(Xamarin.Forms.NamedSize,Xamarin.Forms.FontAttributes)">
            <param name="size">The requested named font size.</param>
            <param name="attributes">Whether the font is bold, italic, or neither.</param>
            <summary>Returns a font structure with the specified size and attributes.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Font" /> structure with the specified <paramref name="attributes" /> and <paramref name="size" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.ToString">
            <summary>Returns a string representation of this font structure.</summary>
            <returns>A string representation of this <see cref="T:Xamarin.Forms.Font" /> structure.</returns>
            <remarks>The <see cref="M:Xamarin.Forms.Font.ToString" /> method returns a string that contains a labeled, comma-separated list of the <see cref="P:Xamarin.Forms.Font.FontFamily" />, <see cref="P:Xamarin.Forms.Font.FontSize" />, <see cref="P:Xamarin.Forms.Font.NamedSize" /> , and <see cref="P:Xamarin.Forms.Font.FontAttributes" /> properties.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Font.UseNamedSize">
            <summary>Gets a value that indicates whether the target operating system should use size that is specified by the <see cref="T:Xamarin.Forms.Font.NamedSize" /> property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.WithAttributes(Xamarin.Forms.FontAttributes)">
            <param name="fontAttributes">Whether the font is italic, bold, or neither.</param>
            <summary>Returns a new font structure with the specified attributes.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Font" /> structure with the attributes that were specified with <paramref name="fontAttributes" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.WithSize(System.Double)">
            <param name="size">The requested font size.</param>
            <summary>Returns a new font structure with the size that was specified with <paramref name="size" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.WithSize(Xamarin.Forms.NamedSize)">
            <param name="size">The requested named font size.</param>
            <summary>A new <see cref="T:Xamarin.Forms.Font" /> structure with the size that was specified with <paramref name="size" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.FontAttributes">
            <summary>Enumerates values that describe font styles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.FontAttributes.Bold">
            <summary>The font is bold.</summary>
        </member>
        <member name="F:Xamarin.Forms.FontAttributes.Italic">
            <summary>The font is italic.</summary>
        </member>
        <member name="F:Xamarin.Forms.FontAttributes.None">
            <summary>The font is unmodified.</summary>
        </member>
        <member name="T:Xamarin.Forms.FontSizeConverter">
            <summary>Converts a string into a font size.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.FontSizeConverter">
            <summary>Initializes a new <see cref="T:Xamarin.Forms.FontSizeConverter" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontSizeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a value that indicates if the source type can be converted to a font size.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontSizeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts an object into a font size.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontSizeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Converts a string representation of a font size into a font size.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontSizeConverter.Xamarin#Forms#IExtendedTypeConverter#ConvertFrom(System.Globalization.CultureInfo,System.Object,System.IServiceProvider)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>For internal use only.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontSizeConverter.Xamarin#Forms#IExtendedTypeConverter#ConvertFromInvariantString(System.String,System.IServiceProvider)">
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>For internal use only.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.FontTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to <see cref="T:Xamarin.Forms.Core.Font" />.</summary>
            <remarks>String should be formatted as "[name],[attributes],[size]" there may be multiple attributes, e.g. "Georgia, Bold, Italic, 42"</remarks>
        </member>
        <member name="C:Xamarin.Forms.FontTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.FontTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.FontTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.Core.Font" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Core.Font" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Core.Font" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.FormattedString">
            <summary>Represents a text with attributes applied to some parts.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.FormattedString">
            <summary>Initializes a new instance of the FormattedString class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FormattedString.op_Explicit(Xamarin.Forms.FormattedString)~System.String">
            <param name="formatted">To be added.</param>
            <summary>Cast the FormattedString to a string, stripping all the attributes.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FormattedString.op_Implicit(System.String)~Xamarin.Forms.FormattedString">
            <param name="text">To be added.</param>
            <summary>Cast a string to a FromattedString that contains a single span with no attribute set.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.FormattedString.PropertyChanged">
            <summary>Event that is raised when a bound property is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.FormattedString.Spans">
            <summary>Gets the collection of spans.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FormattedString.ToString">
            <summary>Returns the text of the formatted string as an unformatted string.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Frame">
            <summary>An element containing a single child, with some framing options.</summary>
            <remarks>
                <para>Frame have a default <see cref="P:Xamarin.Forms.Layout.Padding" /> of 20.</para>
                <para>
          The following example shows how to construct a new Frame with an Outline color.
          </para>
                <example>
                    <code lang="C#"><![CDATA[
MainPage = new ContentPage () {
    Content = new Frame {
        Content = new Label { Text = "I'm Framous!" },
        OutlineColor = Color.Silver,
        VerticalOptions = LayoutOptions.CenterAndExpand,
        HorizontalOptions = LayoutOptions.Center
    }
};
          ]]></code>
                </example>
                <para>
                    <img href="Frame.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Frame" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>HasShadow</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether to show a shadow effect where the platform supports it.</para>
                        </description>
                    </item>
                    <item>
                        <term>OutlineColor</term>
                        <description>
                            <para>A color specification, with or without the prefix, "Color". For example, "Color.Red" and "Red" both specify the color red.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Frame">
            <summary>Initializes a new instance of the Frame class.</summary>
            <remarks>A Frame has a default <see cref="P:Xamarin.Forms.Layout.Padding" /> of 20.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Frame.HasShadow">
            <summary>Gets or sets a flag indicating if the Frame has a shadow displayed. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating whether or not the Frame has a shadow. Default is <see langword="true" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Frame.HasShadowProperty">
            <summary>Identifies the HasShadow bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Frame.OutlineColor">
            <summary>Gets or sets the color of the border of the Frame. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Color" /> representing the border Color. Default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Frame.OutlineColorProperty">
            <summary>Identifies the OutlineColor bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.GestureRecognizer">
            <summary>The base class for all gesture recognizers.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GestureRecognizer.Parent">
            <summary>The parent element of the gesture recognizer.</summary>
            <value>An element from which the binding context will be inherited.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GestureRecognizer.Xamarin#Forms#IElement#XamlParent">
            <summary>Gets or sets a weak reference to the parent of this <see cref="T:Xamarin.Forms.GestureRecognizer" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.GestureState">
            <summary>Enumeration specifying the various states of a gesture.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Began">
            <summary>The gesture has begun and has not ended, failed, or been cancelled.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Cancelled">
            <summary>The gesture was cancelled.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Ended">
            <summary>The gesture has ended.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Failed">
            <summary>The gesture was not recognized.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Possible">
            <summary>The gesture is in progress and may still become recognizable.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Update">
            <summary>The gesture state is being updated.</summary>
        </member>
        <member name="T:Xamarin.Forms.GestureStatus">
            <summary>Enumerates possible gesture states.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.GestureStatus.Canceled">
            <summary>The gesture was canceled.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureStatus.Completed">
            <summary>The gesture completed.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureStatus.Running">
            <summary>The gesture is still being recognized.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureStatus.Started">
            <summary>The gesture started.</summary>
        </member>
        <member name="T:Xamarin.Forms.Grid">
            <summary>A layout that arranges views in rows and columns.</summary>
            <remarks>
                <example>
                    <para>The following example shows a basic use:</para>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class GridDemoPage : ContentPage
    {
        public GridDemoPage()
        {
            Grid grid = new Grid
            {
                VerticalOptions = LayoutOptions.FillAndExpand,
                RowDefinitions = 
                {
                    new RowDefinition { Height = GridLength.Auto },
                    new RowDefinition { Height = GridLength.Auto },
                    new RowDefinition { Height = new GridLength(1, GridUnitType.Star) },
                    new RowDefinition { Height = new GridLength(100, GridUnitType.Absolute) }
                },
                ColumnDefinitions = 
                {
                    new ColumnDefinition { Width = GridLength.Auto },
                    new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) },
                    new ColumnDefinition { Width = new GridLength(100, GridUnitType.Absolute) }
                }
            };

            grid.Children.Add(new Label
                {
                    Text = "Grid",
                    FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                    HorizontalOptions = LayoutOptions.Center
                }, 0, 3, 0, 1);

            grid.Children.Add(new Label
                {
                    Text = "Autosized cell",
                    TextColor = Color.White,
                    BackgroundColor = Color.Blue
                }, 0, 1);

            grid.Children.Add(new BoxView
                {
                    Color = Color.Silver,
                    HeightRequest = 0
                }, 1, 1);

            grid.Children.Add(new BoxView
                {
                    Color = Color.Teal
                }, 0, 2);

            grid.Children.Add(new Label
                {
                    Text = "Leftover space",
                    TextColor = Color.Purple,
                    BackgroundColor = Color.Aqua,
                    HorizontalTextAlignment = TextAlignment.Center,
                    VerticalTextAlignment = TextAlignment.Center,
                }, 1, 2);

            grid.Children.Add(new Label
                {
                    Text = "Span two rows (or more if you want)",
                    TextColor = Color.Yellow,
                    BackgroundColor = Color.Navy,
                    HorizontalTextAlignment = TextAlignment.Center,
                    VerticalTextAlignment = TextAlignment.Center
                }, 2, 3, 1, 3);

            grid.Children.Add(new Label
                {
                    Text = "Span 2 columns",
                    TextColor = Color.Blue,
                    BackgroundColor = Color.Yellow,
                    HorizontalTextAlignment = TextAlignment.Center,
                    VerticalTextAlignment = TextAlignment.Center
                }, 0, 2, 3, 4);

            grid.Children.Add(new Label
                {
                    Text = "Fixed 100x100",
                    TextColor = Color.Aqua,
                    BackgroundColor = Color.Red,
                    HorizontalTextAlignment = TextAlignment.Center,
                    VerticalTextAlignment = TextAlignment.Center
                }, 2, 3);

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = grid;
        }
    }
}
]]></code>
                </example>
                <para>The following shows Grids on the various platforms:</para>
                <para>
                    <img href="Grid.TripleScreenShot.png" />
                </para>
                <para>It is convenient for the <see cref="T:Xamarin.Forms.Grid" /> layout class arranges to store row and column indices of each of its child elements. Additionally, when a <see cref="T:Xamarin.Forms.View" /> element is laid out with a grid, application developers can access and change the child's position and span from the child itself by using the <see cref="M:Xamarin.Forms.Get(BindableObject)" />, <see cref="M:Xamarin.Forms..Grid.GetRow(BindableObject)" />, <see cref="M:Xamarin.Forms.Grid.SetRow(BindableObject)" />, <see cref="M:Xamarin.Forms.Grid.GetRowSpan(BindableObject)" />, <see cref="M:Xamarin.Forms.Grid.SetRowSpan(BindableObject)" /> static methods, and the equivalent static methods for columns and column spans.</para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Grid" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Children</term>
                        <description>
                            <para>Nested visual elements that are displayed in the Grid.</para>
                        </description>
                    </item>
                    <item>
                        <term>ColumnDefinitions</term>
                        <description>
                            <para>A list of <c>ColumnDefinition</c> specifications. See <see cref="T:Xamarin.Forms.ColumnDefinition" />.</para>
                        </description>
                    </item>
                    <item>
                        <term>ColumnSpacing</term>
                        <description>An integer.<para /></description>
                    </item>
                    <item>
                        <term>RowDefinitions</term>
                        <description>
                            <para>A list of <c>RowDefinition</c> specifications. See <see cref="T:Xamarin.Forms.RowDefinition" />.</para>
                        </description>
                    </item>
                    <item>
                        <term>RowSpacing</term>
                        <description>
                            <para>An integer.</para>
                        </description>
                    </item>
                </list>
                <para>XAML for Xamarin.Forms supports the following attached properties for the <see cref="T:Xamarin.Forms.Grid" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Column</term>
                        <description>
                            <para>An integer that represents the Column in which the item will appear.</para>
                        </description>
                    </item>
                    <item>
                        <term>ColumnSpan</term>
                        <description>An integer that represents the number of Columns that the item will span.<para /></description>
                    </item>
                    <item>
                        <term>Row</term>
                        <description>
                            <para>An integer that represents the row in which the item will appear.</para>
                        </description>
                    </item>
                    <item>
                        <term>RowSpan</term>
                        <description>
                            <para>An integer that represents the number of rows that the item will span.</para>
                        </description>
                    </item>
                </list>
                <para>The documentation for the following <see cref="T:Xamarin.Forms.Grid" /> member methods contains XAML syntax examples:
<list type="bullet"><item><term><see cref="M:Xamarin.Forms.Grid.SetRow" /></term></item><item><term><see cref="M:Xamarin.Forms.Grid.SetRowSpan" /></term></item><item><term><see cref="M:Xamarin.Forms.Grid.SetColumn" /></term></item><item><term><see cref="M:Xamarin.Forms.Grid.SetColumnSpan" /></term></item></list></para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Grid">
            <summary>Initializes a new instance of the Grid class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Grid.Children">
            <summary>Gets the collection of child elements of the Grid.</summary>
            <value>The collection of child elements.</value>
            <remarks>
                <para>Application developers can use implicit collection syntax in XAML to add items to this collection, because this property is the <c>ContentPropertyAttribute</c> for the Grid class.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Grid.ColumnDefinitions">
            <summary>Provides the interface for the bound property that gets or sets the ordered collection of <see cref="T:Xamarin.Forms.ColumnDefinition" /> objects that control the layout of columns in the <see cref="T:Xamarin.Forms.Grid" />.</summary>
            <value>A ColumnDefinitionCollection for the Grid instance.</value>
            <remarks>
                <para>ColumnDefinitions is an ordered set of ColumnDefinition objects that determine the width of each column. Each successive ColumnDefintion controls the width of each successive column. If ColumnDefinitions is empty, or if there are more columns than definitions, then columns for which there is no definition are rendered as if they were controlled by a ColumnDefinition object that has its <see cref="P:Xamarin.Forms.ColumnDefinition.Width" /> property set to <see cref="P:Xamarin.Forms.GridLength.Auto" />.</para>
                <para>The <see cref="P:Xamarin.Forms.Grid.ColumnDefinitions" /> property has XAML syntax support. The syntax for this operation is shown below.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnDefinitionsProperty">
            <summary>Implements the <see cref="P:Xamarin.Forms.Grid.ColumnDefinitions" /> property, and allows the <see cref="T:Xamarin.Forms.Grid" /> class to bind it to properties on other objects at run time.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnProperty">
            <summary>Implements the attached property that represents the zero-based column index of a child element. See Remarks.</summary>
            <remarks>
                <para>The interface for this property is defined by the <see cref="M:Xamarin.Forms.Grid.GetColumn" /> and <see cref="M:Xamarin.Forms.Grid.SetColumn" /> methods.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Grid.ColumnSpacing">
            <summary>Provides the interface for the bound property that gets or sets the distance between columns in the Grid.</summary>
            <value>The space between columns in this <see cref="T:Xamarin.Forms.Grid" />layout.</value>
            <remarks>
                <para>The <see cref="P:Xamarin.Forms.Grid.ColumnSpacing" /> property does not control spacing on the left and right edges of the <see cref="T:Xamarin.Forms.Grid" /> layout. Application developers can control the spacing around the outside of the <see cref="T:Xamarin.Forms.Grid" /> layout by setting the <see cref="P:Xamarin.Forms.Page.Padding" /> property of the visual element to which it belongs.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnSpacingProperty">
            <summary>Implements the <see cref="P:Xamarin.Forms.Grid.ColumnSpacing" /> property, and allows the <see cref="T:Xamarin.Forms.Grid" /> class to bind it to properties on other objects at run time.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnSpanProperty">
            <summary>Implements the attached property that represents the number of columns that a child element spans. See Remarks.</summary>
            <remarks>
                <para>The interface for this property is defined by the <see cref="M:Xamarin.Forms.Grid.GetColumnSpan" /> and <see cref="M:Xamarin.Forms.Grid.SetColumnSpan" /> methods.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.GetColumn(Xamarin.Forms.BindableObject)">
            <param name="bindable">An element that belongs to the Grid layout.</param>
            <summary>Gets the column of the <paramref name="bindable" /> child element.</summary>
            <returns>The column that the child element is in.</returns>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.GetColum" /> method corresponds to the value that is set by the following XAML attached property.</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Column</term>
                        <description>
                            <para>An integer that represents the Column in which the item will appear.</para>
                        </description>
                    </item>
                </list>
                <para>The remarks for the <see cref="M:Xamarin.Forms.Grid.SetColumn" /> method contain syntax for and information about the <c>Column</c> attached property.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.GetColumnSpan(Xamarin.Forms.BindableObject)">
            <param name="bindable">An element that belongs to the Grid layout.</param>
            <summary>Gets the column span of the <paramref name="bindable" /> child element.</summary>
            <returns>The column that the child element is in.</returns>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.GetColumSpan" /> method corresponds to the value that is set by the following XAML attached property.</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>ColumnSpan</term>
                        <description>
                            <para>An integer that represents the number of Columns that the item will span.</para>
                        </description>
                    </item>
                </list>
                <para>The remarks for the <see cref="M:Xamarin.Forms.Grid.SetColumnSpan" /> method contain syntax for and information about the <c>ColumnSpan</c> attached property.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.GetRow(Xamarin.Forms.BindableObject)">
            <param name="bindable">An element that belongs to the Grid layout.</param>
            <summary>Gets the row of the <paramref name="bindable" /> child element.</summary>
            <returns>The row that the child element is in.</returns>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.GetRow" /> method corresponds to the following XAML attached property:</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Row</term>
                        <description>
                            <para>An integer that represents the row in which the item will appear.</para>
                        </description>
                    </item>
                </list>
                <para>The remarks for the <see cref="M:Xamarin.Forms.Grid.SetRow" /> method contain syntax for and information about the <c>Row</c> attached property.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.GetRowSpan(Xamarin.Forms.BindableObject)">
            <param name="bindable">An element that belongs to the Grid layout.</param>
            <summary>Gets the row span of the <paramref name="bindable" /> child element.</summary>
            <returns>The row that the child element is in.</returns>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.GetRowSpan" /> method corresponds to the following XAML attached properties:</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>RowSpan</term>
                        <description>An integer that represents the number of rows that the item will span.<para /></description>
                    </item>
                </list>
                <para>The remarks for the <see cref="M:Xamarin.Forms.Grid.SetRowSpan" /> method contain syntax for and information about the <c>RowSpan</c> attached property.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.InvalidateMeasure">
            <summary>Invalidates the grid layout.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">X-coordinate of the top left corner of the bounding rectangle.</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
            <summary>
                <para>Lays out the child elements when the layout is invalidated.</para>
            </summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.OnAdded(Xamarin.Forms.View)">
            <param name="view">The element that was added.</param>
            <summary>Method that is called when a child is added to this <see cref="T:Xamarin.Forms.Grid" /> element.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.OnBindingContextChanged">
            <summary>Application developers override this to respond when the binding context changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.OnRemoved(Xamarin.Forms.View)">
            <param name="view">The element that was removed.</param>
            <summary>Method that is called when a child is removed from this <see cref="T:Xamarin.Forms.Grid" /> element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The requested width.</param>
            <param name="heightConstraint">The requested height.</param>
            <summary>Method that is called when an attempt is made to resize this <see cref="T:Xamarin.Forms.Grid" /> element.</summary>
            <returns>
                <para>The new requested size.</para>
            </returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Grid.RowDefinitions">
            <summary>Provides the interface for the bound property that gets or sets the collection of RowDefinition objects that control the heights of each row.</summary>
            <value>A RowDefinitionCollection for the Grid instance.</value>
            <remarks>
                <para>RowDefinitions is an ordered set of <see cref="T:Xamarin.Forms.RowDefinition" /> objects that determine the height of each column. Each successive RowDefintion controls the width of each successive column. If RowDefinitions is empty, or if there are more rows than definitions, then rows for which there is no definition are rendered as if they were controlled by a RowDefinition object that has its <see cref="P:Xamarin.Forms.RowDefinition.Height" /> property set to <see cref="P:Xamarin.Forms.GridLength.Auto" />.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.RowDefinitionsProperty">
            <summary>Implements the <see cref="P:Xamarin.Forms.Grid.RowDefinitions" /> property, and allows the <see cref="T:Xamarin.Forms.Grid" /> class to bind it to properties on other objects at run time.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.RowProperty">
            <summary>Implements the attached property that represents the zero-based row index of a child element. See Remarks.</summary>
            <remarks>
                <para>The interface for this property is defined by the <see cref="M:Xamarin.Forms.Grid.GetRow" /> and <see cref="M:Xamarin.Forms.Grid.SetRowf" /> methods.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Grid.RowSpacing">
            <summary>Gets or sets the amount of space left between rows in the Grid. This is a bindable property.</summary>
            <value>The space between rows</value>
            <remarks>
                <para>The <see cref="P:Xamarin.Forms.Grid.RowSpacing" /> property does not control spacing on the top and bottom edges of the <see cref="T:Xamarin.Forms.Grid" /> layout. Application developers can control the spacing around the outside of the <see cref="T:Xamarin.Forms.Grid" /> layout by setting the <see cref="P:Xamarin.Forms.Page.Padding" /> property of the visual element to which it belongs.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.RowSpacingProperty">
            <summary>Implements the <see cref="P:Xamarin.Forms.Grid.RowSpacing" /> property, and allows the <see cref="T:Xamarin.Forms.Grid" /> class to bind it to properties on other objects at run time.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Grid.RowSpanProperty">
            <summary>Implements the attached property that represents the number of rows that a child element spans, and allows the <see cref="T:Xamarin.Forms.Grid" /> class to bind it to properties on other objects at run time.</summary>
            <remarks>
                <para>The interface for this property is defined by the <see cref="M:Xamarin.Forms.Grid.GetRowSpan" /> and <see cref="M:Xamarin.Forms.Grid.SetRowSpan" /> methods.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.SetColumn(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">A child element of this Grid to move to a different column.</param>
            <param name="value">The column in which to place the child element.</param>
            <summary>Changes the column in which a child element will be placed.</summary>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.GetColumSpan" /> method corresponds to the value that is set by the following XAML attached property.</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>ColumnSpan</term>
                        <description>
                            <para>An integer that represents the Column in which the item will appear.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.SetColumnSpan(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">A child element of this Grid on which to assign a new column span.</param>
            <param name="value">The new column span.</param>
            <summary>Changes the column span of the specified child element.</summary>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.GetColum" /> method corresponds to the value that is set by the following XAML attached property.</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Column</term>
                        <description>
                            <para>An integer that represents the number of Columns that the item will span.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.SetRow(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">A child element of this Grid to move to a different row.</param>
            <param name="value">The row in which to place the child element.</param>
            <summary>Changes the row in which a child element will be placed.</summary>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.SetRow" /> method corresponds to the following XAML attached property:</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Row</term>
                        <description>
                            <para>An integer that represents the row in which the item will appear.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.SetRowSpan(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">A child element of this Grid on which to assign a new row span.</param>
            <param name="value">The new row span.</param>
            <summary>Changes the row span of the specified child element.</summary>
            <remarks>
                <para>The <see cref="M:Xamarin.Forms.Grid.SetRowSpan" /> method corresponds to the following XAML attached property:</para>
                <list type="table">
                    <listheader>
                        <term>Attached Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>RowSpan</term>
                        <description>An integer that represents the number of rows that the item will span.<para /></description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.Grid.IGridList`1">
            <typeparam name="T">The type of elements in the grid.</typeparam>
            <summary>List interface with overloads for adding elements to a grid.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.Add(`0,System.Int32,System.Int32)">
            <param name="view">The view to add.</param>
            <param name="left">The column to add the view to.</param>
            <param name="top">The row to add the view to.</param>
            <summary>Adds a view to the List at the specified location with a RowSpan and HeightSpan of 1.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.Add(`0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="view">The view to add.</param>
            <param name="left">The left edge of the column span. Must be greater than 0.</param>
            <param name="right">The right edge of the column span. Must be greater than left.</param>
            <param name="top">The top edge of the row span. Must be greater than 0.</param>
            <param name="bottom">The bottom edge of the row span. Must be greater than top.</param>
            <summary>Adds a view to the List at the specified row and column spans.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddHorizontal(System.Collections.Generic.IEnumerable{`0})">
            <param name="views">The views to add.</param>
            <summary>Add a collection views to the List such that they are horizontally stacked to the right of the current contents of the Grid.</summary>
            <remarks>The final span of each view is defined to be the height of the grid at the add time, and one column wide at the end of the current arrangement.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddHorizontal(`0)">
            <param name="view">The view to add.</param>
            <summary>Add a view to the List such that it is horizontally stacked to the right of the current contents of the Grid.</summary>
            <remarks>The final span of the view is defined to be the height of the grid at the add time, and one column wide at the end of the current arrangement.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddVertical(System.Collections.Generic.IEnumerable{`0})">
            <param name="views">The views to add.</param>
            <summary>Add a collection views to the List such that they are vertically stacked below the current contents of the Grid.</summary>
            <remarks>The final span of each view is defined to be the width of the grid at the add time, and one row tall at the end of the current arrangement.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddVertical(`0)">
            <param name="view">The view to add.</param>
            <summary>Add a view to the List such that it is vertically stacked below the current contents of the Grid.</summary>
            <remarks>The final span of the view is defined to be the width of the grid at the add time, and one row tall at the end of the current arrangement.</remarks>
        </member>
        <member name="T:Xamarin.Forms.GridLength">
            <summary>Used to define the size (width/height) of Grid ColumnDefinition and RowDefinition.</summary>
            <remarks>
                <para>GridLength of type GridUnitType.Absolute represents exact size. The ones of type GridUnitType.Auto adapts for fitting the size of the elements in the gird column/row. GridLenght of type GridUnitType.Star are used to split the available size in proportional buckets.</para>
                <para>This valuetype is readonly.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.GridLength(System.Double)">
            <param name="value">To be added.</param>
            <summary>Initializes a new Absolute GridLength.</summary>
            <remarks>This is striclty equivalent to new GridLength (value, GridUnitType.Absolute).</remarks>
        </member>
        <member name="C:Xamarin.Forms.GridLength(System.Double,Xamarin.Forms.GridUnitType)">
            <param name="value">The size of the GridLength.</param>
            <param name="type">The GridUnitType (Auto, Star, Absolute) of the GridLength.</param>
            <summary>Initializes a new GridLength.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.Auto">
            <summary>A ready to reuse GridLength of GridUnitType.Auto.</summary>
            <value />
            <remarks>Value has no meaning for GridLength ot type GridUnitType.Auto.</remarks>
        </member>
        <member name="M:Xamarin.Forms.GridLength.Equals(System.Object)">
            <param name="obj">A GridLength to compare to.</param>
            <summary>Test the equality of this GridLength and another one.</summary>
            <returns>true is the GridLength are equal. False otherwise.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.GridLength.GetHashCode">
            <summary>Returns a value that is used for efficient storage of this object in collections.</summary>
            <returns>To be added.</returns>
            <remarks>overriden.</remarks>
        </member>
        <member name="P:Xamarin.Forms.GridLength.GridUnitType">
            <summary>Gets or sets the GridUnitType of the GridLength</summary>
            <value>The GridUnitType of the GridLength</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.IsAbsolute">
            <summary>Gets wether or not the GridUnitType of the GridLength is GridUnitType.Absolute.</summary>
            <value>true if the GridUnitType of the GridLength is GridUnitType.Absolute</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.IsAuto">
            <summary>Gets wether or not the GridUnitType of the GridLength is GridUnitType.Auto.</summary>
            <value>true if the GridUnitType of the GridLength is GridUnitType.Auto</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.IsStar">
            <summary>Gets a value that indicates whether the GridUnitType of the GridLength is GridUnitType.Star.</summary>
            <value>true if the GridUnitType of the GridLength is GridUnitType.Star</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.GridLength.op_Implicit(System.Double)~Xamarin.Forms.GridLength">
            <param name="absoluteValue">The absolute size</param>
            <summary>Casting operator to convert a double into a GridLength of type GridUnitType.Absolute</summary>
            <returns>A GridLength of type GridUnitType.Absolute and of size absolutesize</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.GridLength.ToString">
            <summary>Returns the value and the grid unit type, separated by a ".".</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.GridLength.Value">
            <summary>Gets the Value of the GridLength.</summary>
            <value>The value in GridUnitType of the GridLength.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.GridLengthTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to <see cref="T:Xamarin.Forms.GridLength" />s.</summary>
            <remarks>
                <para>The following example shows some uses of <see cref="T:Xamarin.Forms.GridLengthTypeConverter" />:</para>
                <example>
                    <code lang="C#"><![CDATA[
			var converter = new GridLengthTypeConverter ();

			Assert.AreEqual (new GridLength (42), converter.ConvertFrom ("42"));
			Assert.AreEqual (new GridLength (42.2), converter.ConvertFrom ("42.2"));
			Assert.AreEqual (GridLength.Auto, converter.ConvertFrom ("auto"));
			Assert.AreEqual (GridLength.Auto, converter.ConvertFrom (" AuTo "));
			Assert.AreEqual (new GridLength (1, GridUnitType.Star), converter.ConvertFrom ("*"));
			Assert.AreEqual (new GridLength (42, GridUnitType.Star), converter.ConvertFrom ("42*"));
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.GridLengthTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.GridLength" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.GridLengthTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.GridLengthTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.GridLength" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.GridLengthTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.GridLength" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.GridLengthTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Converts a valid grid length descriptor in to a <see cref="T:Xamarin.Forms.GridLength" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.GridUnitType">
            <summary>Enumerates values that control how the <see cref="P:Xamarin.Forms.GridLength.Value" /> property is interpreted for row and column definitions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.GridUnitType.Absolute">
            <summary>Interpret the <see cref="P:Xamarin.Forms.GridLength.Value" /> property value as the number of device-specific units.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.GridUnitType.Auto">
            <summary>Ignore the <see cref="P:Xamarin.Forms.GridLength.Value" /> property value and choose a size that fits the children of the row or column.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.GridUnitType.Star">
            <summary>Interpret the <see cref="P:Xamarin.Forms.GridLength.Value" /> property value as a proportional weight, to be laid out after rows and columns with <see cref="F:Xamarin.Forms.GridUnitType.Absolute" /> or <see cref="F:Xamarin.Forms.GridUnitType.Auto" /> are accounted for.</summary>
            <remarks>After all the rows and columns of type <see cref="F:Xamarin.Forms.GridUnitType.Absolute" /> and <see cref="F:Xamarin.Forms.GridUnitType.Auto" /> are laid out, each of the corresponding remaining rows or columns, which are of type <see cref="F:Xamarin.Forms.GridUnitType.Star" />, receive a fraction of the remaining available space. This fraction is determined by dividing each row's or column's <see cref="P:Xamarin.Forms.GridLength.Value" /> property value by the sum of all the row or column <see cref="P:Xamarin.Forms.GridLength.Value" /> property values, correspondingly, including its own.</remarks>
        </member>
        <member name="T:Xamarin.Forms.HandlerAttribute">
            <summary>An abstract attribute whose subclasses specify the platform-specific renderers for Xamarin.Forms abstract controls.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.HandlerAttribute(System.Type,System.Type)">
            <param name="handler">To be added.</param>
            <param name="target">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.HandlerAttribute" /> object that maps events from <paramref name="target" /> to <paramref name="handler" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.HandlerAttribute.ShouldRegister">
            <summary>Returns a Boolean value that indicates whether the runtime should automatically register the handler for the target.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.HtmlWebViewSource">
            <summary>A WebViewSource bound to an HTML-formatted string.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.HtmlWebViewSource">
            <summary>Creates a new empty <see cref="T:Xamarin.Forms.HtmlWebViewSource" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.HtmlWebViewSource.BaseUrl">
            <summary>The base URL for the source HTML document.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.HtmlWebViewSource.BaseUrlProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.BaseUrl" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.HtmlWebViewSource.Html">
            <summary>The HTML content.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.HtmlWebViewSource.HtmlProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.BaseUrl" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IAnimatable">
            <summary>Defines an interface for elements that can be animated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IAnimatable.BatchBegin">
            <summary>Implement this method to begin a batch of animations that have been committed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IAnimatable.BatchCommit">
            <summary>Implement this method to commit a batch of animations so that they can be run with the <see cref="M:Xamarin.Forms.IAnimatable.BatchBegin" /> method.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IAppIndexingProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IAppIndexingProvider.AppLinks">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IApplicationController">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IApplicationController.SetAppIndexingProvider(Xamarin.Forms.IAppIndexingProvider)">
            <param name="appIndexing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IAppLinkEntry">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IAppLinkEntry.AppLinkUri">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IAppLinkEntry.Description">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IAppLinkEntry.IsLinkActive">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IAppLinkEntry.KeyValues">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IAppLinkEntry.Thumbnail">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IAppLinkEntry.Title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IAppLinks">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IAppLinks.DeregisterLink(System.Uri)">
            <param name="appLinkUri">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IAppLinks.DeregisterLink(Xamarin.Forms.IAppLinkEntry)">
            <param name="appLink">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IAppLinks.RegisterLink(Xamarin.Forms.IAppLinkEntry)">
            <param name="appLink">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IDefinition">
            <summary>Interface defining the type of <see cref="T:Xamarin.Forms.RowDefinition" /> and <see cref="T:Xamarin.Forms.ColumnDefinition" />.</summary>
            <remarks>
                <para>Objects of type <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> are parameterized with a type of <see cref="T:Xamarin.Forms.IDefinition" />.</para>
                <para>
                    <img href="IDefinition.DefinitionCollectionRelation.png" />
                </para>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.IDefinition.SizeChanged">
            <summary>Event that is raised when the size of the row or column changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IEffectControlProvider">
            <summary>When implemented in a renderer, registers a platform-specific effect on an element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect)">
            <param name="effect">The effect to register.</param>
            <summary>Registers the effect with the element by establishing the parent-child relations needed for rendering on the specific platform.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IElementController">
            <summary>When implemented in a derived class, sets the value on bound properties so that their bindings are preserved.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IElementController.EffectControlProvider">
            <summary>When implemented in a derived class, gets or sets the provider that registers platform-specific effects.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty,System.Object)">
            <param name="property">To be added.</param>
            <param name="value">To be added.</param>
            <summary>When implemented in a derived class, sets the value on bound properties so that their bindings are preserved.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindablePropertyKey,System.Object)">
            <param name="propertyKey">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets a bound property value from a renderer without breaking the binding.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IExtendedTypeConverter">
            <summary>Base class for type converters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IExtendedTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object,System.IServiceProvider)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>Converts <paramref name="value" /> with the specified <paramref name="culture" /> and <paramref name="serviceProvider" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IExtendedTypeConverter.ConvertFromInvariantString(System.String,System.IServiceProvider)">
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>Converts <paramref name="value" /> with the specified <paramref name="serviceProvider" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IGestureRecognizer">
            <summary>The base interface all gesture recognizers must implement.</summary>
            <remarks>This interface is currently empty, this will likely change.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IItemViewController">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IItemViewController.BindView(Xamarin.Forms.View,System.Object)">
            <param name="view">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IItemViewController.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IItemViewController.CreateView(System.Object)">
            <param name="itemType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IItemViewController.GetItem(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IItemViewController.GetItemType(System.Object)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ILayout">
            <summary>Interface indicating layout behavior and exposing the <see cref="E:Xamarin.Forms.ILayout.LayoutChanged" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ILayout.LayoutChanged">
            <summary>Event that is raised when the layout changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ILayoutController">
            <summary>Class that renderers implement in order participate in the layout cycle.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ILayoutController.Children">
            <summary>Gets a read-only list of the immediate children of the renderer that implements the interface.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Image">
            <summary>
                <see cref="T:Xamarin.Forms.View" /> that holds an image.</summary>
            <remarks>
                <para>
            The following example creates a new image from a file
            </para>
                <example>
                    <code lang="C#"><![CDATA[
var image = new Image { Source = "picture.png" };]]></code>
                </example>
                <para>The FormsGallery sample, which can be found on the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">Sample Applications</a></format> page, has a ImageDemoPage.cs file. This file contains a longer and more complicated example.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Image">
            <summary>Initializes a new instance of the Image class.</summary>
            <remarks>
                <para>
              The following example creates a new image from a file
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  var image = new Image { Source = "picture.png" };]]></code>
                </example>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Image.Aspect">
            <summary>Gets or sets the scaling mode for the image. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Aspect" /> representing the scaling mode of the image. Default is <see cref="E:Xamarin.Forms.Aspect.AspectFit" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Image.AspectProperty">
            <summary>Identifies the Aspect bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Image.IsLoading">
            <summary>Gets the loading status of the image. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating if the image is loadin. Default is false.</value>
            <remarks>
                <para>
              The following example illustrates running a  <see cref="T:Xamarin.Forms.ActivityIndicator" /> to indicate that the image is loading:</para>
                <example>
                    <code lang="C#"><![CDATA[
var image = new Image { 
  Source = new ImageLoader {
    Uri = new Uri ("http://eoimages.gsfc.nasa.gov/images/imagerecords/57000/57723/globe_west_2048.jpg"),
    CachingEnabled = false,
  },
  WidthRequest = 200,
  HeightRequest = 200,
};

var indicator = new ActivityIndicator {Color = new Color (.5),};
indicator.SetBinding (ActivityIndicator.IsRunningProperty, "IsLoading");
indicator.BindingContext = image;]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Image.IsLoadingProperty">
            <summary>Identifies the IsLoading bindable property.</summary>
            <remarks>This bindable property is readonly.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Image.IsOpaque">
            <summary>Gets or sets the opacity flag for the image. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating the value for the property. Default is false.</value>
            <remarks>If true, you'll be able to see through transparent parts of the image.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Image.IsOpaqueProperty">
            <summary>Identifies the IsOpaque bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Image.OnBindingContextChanged">
            <summary>Invoked when the BindingContext changes.</summary>
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Image.OnPropertyChanged(System.String)">
            <param name="propertyName">The name of the property.</param>
            <summary>Invoked when a property has changed.</summary>
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Image.OnPropertyChanging(System.String)">
            <param name="propertyName">The name of the property.</param>
            <summary>Invoked when a property will change.</summary>
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Image.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width.</param>
            <param name="heightConstraint">The available height.</param>
            <summary>Invoked when the layotu cycle request the element desired size.</summary>
            <returns />
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Image.Source">
            <summary>Gets or sets the source of the image. This is a bindable property.</summary>
            <value>An <see cref="T:Xamarin.Forms.ImageSource" /> representing the image source. Default is null.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Image.SourceProperty">
            <summary>Identifies the Source bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ImageCell">
            <summary>A <see cref="T:Xamarin.Forms.TextCell" /> that has an image.</summary>
            <remarks>
                <para>
                    <see cref="T:Xamarin.Forms.ImageCell" /> objects are used to place images and accompanying text into a table.</para>
                <example>
                    <para>The following example shows a basic use.</para>
                    <code lang="C#"><![CDATA[using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class ImageCellDemoPage : ContentPage
    {
        public ImageCellDemoPage()
        {
            Label header = new Label
            {
                Text = "ImageCell",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            TableView tableView = new TableView
            {
                Intent = TableIntent.Form,
                Root = new TableRoot
                {
                    new TableSection
                    {
                        new ImageCell
                        {
                            // Some differences with loading images in initial release.
                            ImageSource =
                                Device.OnPlatform(ImageSource.FromUri(new Uri("http://xamarin.com/images/index/ide-xamarin-studio.png")),
                                                  ImageSource.FromFile("ide_xamarin_studio.png"),
                                                  ImageSource.FromFile("Images/ide-xamarin-studio.png")),
                            Text = "This is an ImageCell",
                            Detail = "This is some detail text",
                        }
                    }
                }
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children =
                {
                    header,
                    tableView
                }
            };
        }
    }
}]]></code>
                </example>
                <para>
                    <img href="ImageCell.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ImageCell">
            <summary>Initializes a new instance of the ImageCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ImageCell.ImageSource">
            <summary>Gets or sets the ImageSource from which the Image is loaded. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ImageCell.ImageSourceProperty">
            <summary>Identifies the ImageSource bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ImageCell.OnBindingContextChanged">
            <summary>Overriden..</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ImageSource">
            <summary>Abstract class whose implementors load images from files or the Web.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.Cancel">
            <summary>Request a cancel of the ImageSource loading.</summary>
            <returns>An awaitable Task. The result of the Task indicates if the Task was successfully cancelled.</returns>
            <remarks>Calling Cancel() multiple times will throw an exception.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ImageSource.CancellationTokenSource">
            <summary>Gets the CancellationTokenSource.</summary>
            <value />
            <remarks>Used by inheritors to implement cancellable loads.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromFile(System.String)">
            <param name="file">The name of a file that contains a valid image.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.FileImageSource" /> that reads from <paramref name="file" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromResource(System.String)">
            <param name="resource">A string representing the id of the EmbeddedResource to load.</param>
            <summary>Creates an ImageSource for an EmbeddedResource included in the Assembly from which the call to FromResource is made.</summary>
            <returns>A newly created ImageSource.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromResource(System.String,System.Reflection.Assembly)">
            <param name="resource">The name of a valid image resource in <paramref name="sourceAssembly" />.</param>
            <param name="sourceAssembly">The source assembly in which to search for the image.</param>
            <summary>Creates a <see cref="T:Xamarin.Forms.ImageSource" /> from the specified resource in the specified source assembly.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromResource(System.String,System.Type)">
            <param name="resource">The name of a valid image resource in the assembly to which <paramref name="resolvingType" /> belongs.</param>
            <param name="resolvingType">A type from the assembly in which to look up the image resource with <paramref name="resource" />.</param>
            <summary>Creates a <see cref="T:Xamarin.Forms.ImageSource" /> from the specified resource in the specified source assembly.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromStream(System.Func{System.IO.Stream})">
            <param name="stream">A stream that supplies image data.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.StreamImageSource" /> that reads from <paramref name="stream" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromUri(System.Uri)">
            <param name="uri">A URI that identifies a valid image.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.UriImageSource" /> that reads from <paramref name="uri" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.OnLoadingCompleted(System.Boolean)">
            <param name="cancelled">A bool indicating if the source was cancelled.</param>
            <summary>Called by inheritors to indicate the end of the loading of the source.</summary>
            <remarks>OnLoadingCompleted should follow a OnLoadingStarted.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.OnLoadingStarted">
            <summary>Called by inheritors to indicate the beginning of a loading operation.</summary>
            <remarks>OnLoadingCompleted should follow a OnLoadingStarted.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.OnSourceChanged">
            <summary>Called by inheritors to indicate that the source changed..</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.op_Implicit(System.String)~Xamarin.Forms.ImageSource">
            <param name="source">A string that represents an image location.</param>
            <summary>Allows implicit casting from a string that represents an absolute URI.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.op_Implicit(System.Uri)~Xamarin.Forms.ImageSource">
            <param name="uri">A absolute URI that specifies an image location.</param>
            <summary>Allows implicit casting from <see cref="T:System.Uri" /> objects that were created with an absolute URI.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ImageSource.Xamarin#Forms#IElement#Parent">
            <summary>Gets or sets the element to which this <see cref="T:Xamarin.Forms.ImageSource" /> object belongs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ImageSource.Xamarin#Forms#IElement#XamlParent">
            <summary>Gets or sets a weak reference to the parent of this <see cref="T:Xamarin.Forms.ImageSource" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ImageSourceConverter">
            <summary>Class that takes a string representation of an image file location and returns a <see cref="T:Xamarin.Forms.ImageSource" /> from the specified resource.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ImageSourceConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.ImageSourceConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSourceConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">A type to query.</param>
            <summary>Returns <see langword="true" /> if the converter can create and return a <see cref="T:Xamarin.Forms.ImageSource" /> for items of the specified source type. Otherwise, <see langword="false" />.</summary>
            <returns>
                <see langword="true" /> if the converter can create and return a  <see cref="T:Xamarin.Forms.ImageSource" /> for items of the specified source type. Otherwise, <see langword="false" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSourceConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Creates and returns a <see cref="T:Xamarin.Forms.ImageSource" /> for the specified <paramref name="value" /> and <paramref name="culture" />.</summary>
            <returns>A <see cref="T:Xamarin.Forms.ImageSource" /> for the specified <paramref name="value" /> and <paramref name="culture" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSourceConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns an image source created from a URI that is contained in <paramref name="value" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.INativeElementView">
            <summary>Interface that contains a read-only property that returns the platform-specific native view for a Xamarin.Forms element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.INativeElementView.Element">
            <summary>Gets the platform-specific native view for a Xamarin.Forms element.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.INavigation">
            <summary>Interface abstracting platform-specific navigation.</summary>
            <remarks>
                <para>Note that on the Android platform, <see cref="T:Xamarin.Forms.INavigation" /> operations do not generate activity lifecycle notifications. For each <see cref="T:Xamarin.Forms.Page" /> that you push or pop, the Android implementation of <see cref="T:Xamarin.Forms.NavigationPage" /> simply adds or removes the content of the page to or from a single activity.</para>
                <para>Also note that the Windows Phone platform provides navigation natively. Therefore, you do not need to use a <see cref="T:Xamarin.Forms.NavigationPage" /> object to get navigation on that platform.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.InsertPageBefore(Xamarin.Forms.Page,Xamarin.Forms.Page)">
            <param name="page">The page to add.</param>
            <param name="before">The existing page, before which <paramref name="page" /> will be inserted.</param>
            <summary>Inserts a page in the navigation stack before an existing page in the stack.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.INavigation.ModalStack">
            <summary>Gets the modal navigation stack.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.INavigation.NavigationStack">
            <summary>Gets the stack of pages in the navigation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopAsync">
            <summary>Asynchronously removes the most recent <see cref="T:Xamarin.Forms.Page" /> from the navigation stack.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Page" /> that had been at the top of the navigation stack.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopAsync(System.Boolean)">
            <param name="animated">To be added.</param>
            <summary>Asynchronously removes the most recent <see cref="T:Xamarin.Forms.Page" /> from the navigation stack, with optional animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopModalAsync">
            <summary>Asynchronously dismisses the most recent modally presented <see cref="T:Xamarin.Forms.Page" />.</summary>
            <returns>An awaitable Task&lt;Page&gt;, indicating the PopModalAsync completion. The Task.Result is the Page that has been popped.</returns>
            <remarks>
                <para>The following example shows PushModal and PopModal usage:</para>
                <example>
                    <code lang="C#"><![CDATA[
var modalPage = new ContentPage ();
await Navigation.PushModalAsync (modalPage);
Debug.WriteLine ("The modal page is now on screen");
var poppedPage = await Navigation.PopModalAsync ();
Debug.WriteLine ("The modal page is dismissed");
Debug.WriteLine (Object.ReferenceEquals (modalPage, poppedPage)); //prints "true"
        ]]></code>
                </example>
                <block subset="none" type="note">
                    <para>Application developers must <see langword="await" /> the result of <see cref="M:Xamarin.Forms.INavigation.PushModal" /> and <see cref="M:Xamarin.Forms.INavigation.PopModal" />. Calling <see cref="M:System.Threading.Tasks.Task.Wait" /> may cause a deadlock if a previous call to <see cref="M:Xamarin.Forms.INavigation.PushModal" /> or <see cref="M:Xamarin.Forms.INavigation.PopModal" /> has not completed.</para>
                </block>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopModalAsync(System.Boolean)">
            <param name="animated">To be added.</param>
            <summary>Asynchronously dismisses the most recent modally presented <see cref="T:Xamarin.Forms.Page" />, with optional animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopToRootAsync">
            <summary>Pops all but the root <see cref="T:Xamarin.Forms.Page" /> off the navigation stack.</summary>
            <returns>A task representing the asynchronous dismiss operation.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopToRootAsync(System.Boolean)">
            <param name="animated">To be added.</param>
            <summary>Pops all but the root <see cref="T:Xamarin.Forms.Page" /> off the navigation stack, with optional animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PushAsync(Xamarin.Forms.Page)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> to be pushed on top of the navigation stack.</param>
            <summary>Asynchronously adds a <see cref="T:Xamarin.Forms.Page" /> to the top of the navigation stack.</summary>
            <returns>A task representing the asynchronous dismiss operation.</returns>
            <remarks>
                <para>
						The following example shows <see cref="M:Xamarin.Forms.INavigation.Push" /> and <see cref="M:Xamarin.Forms.INavigation.Pop" /> usage:
					</para>
                <example>
                    <code lang="C#"><![CDATA[
var newPage = new ContentPage ();
await Navigation.PushAsync (newPage);
Debug.WriteLine ("the new page is now showing");
var poppedPage = await Navigation.PopAsync ();
Debug.WriteLine ("the new page is dismissed");
Debug.WriteLine (Object.ReferenceEquals (newPage, poppedPage)); //prints "true"
							]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PushAsync(Xamarin.Forms.Page,System.Boolean)">
            <param name="page">To be added.</param>
            <param name="animated">To be added.</param>
            <summary>Asynchronously adds a <see cref="T:Xamarin.Forms.Page" /> to the top of the navigation stack, with optional animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PushModalAsync(Xamarin.Forms.Page)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> to present modally.</param>
            <summary>Presents a <see cref="T:Xamarin.Forms.Page" /> modally.</summary>
            <returns>An awaitable Task, indicating the PushModal completion.</returns>
            <remarks>
                <para>The following example shows PushModalAsync and PopModalAsync usage:</para>
                <example>
                    <code lang="C#"><![CDATA[
var modalPage = new ContentPage ();
await Navigation.PushModalAsync (modalPage);
Debug.WriteLine ("The modal page is now on screen");
var poppedPage = await Navigation.PopModalAsync ();
Debug.WriteLine ("The modal page is dismissed");
Debug.WriteLine (Object.ReferenceEquals (modalPage, poppedPage)); //prints "true"
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PushModalAsync(Xamarin.Forms.Page,System.Boolean)">
            <param name="page">To be added.</param>
            <param name="animated">To be added.</param>
            <summary>Presents a <see cref="T:Xamarin.Forms.Page" /> modally, with optional animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.RemovePage(Xamarin.Forms.Page)">
            <param name="page">To be added.</param>
            <summary>Removes the specified page from the navigation stack.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.InputView">
            <summary>The base class of a view which can take keyboard input.</summary>
            <remarks>The constructor of this class is internal. Forms does not provide any renderer for InputView base class.</remarks>
        </member>
        <member name="P:Xamarin.Forms.InputView.Keyboard">
            <summary>Gets or sets the Keyboard for the InputView. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Keyboard" /> to use for the InputView.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.InputView.KeyboardProperty">
            <summary>Identifies the Keyboard bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.IOpenGLViewController">
            <summary>A view controller for displaying OpenGL content.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.IOpenGLViewController.DisplayRequested">
            <summary>Event that is raised when an OpenGL display is requested.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IPageContainer`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>Interface defining a container for <see cref="T:Xamarin.Forms.Page" />s and exposing a <see cref="P:Xamarin.Forms.IPageContainer`1.CurrentPage" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPageContainer`1.CurrentPage">
            <summary>Gets the current page.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IPlatform">
            <summary>Interface defining the abstraction of a native platform.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatform.BindingContext">
            <summary>The binding context for the native platform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.IPlatform.BindingContextChanged">
            <summary>Event that is raised when the binding context changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatform.Engine">
            <summary>The platform engine, useful for getting the screen size and for finding out if the paltform supports 3D.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatform.Page">
            <summary>Gets the root page of the platform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IPlatform.SetPage(Xamarin.Forms.Page)">
            <param name="newRoot">To be added.</param>
            <summary>Sets the root page of the platform.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IPlatformEngine">
            <summary>Interface defining a native platform rendering engine.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IPlatformEngine.GetNativeSize(Xamarin.Forms.VisualElement,System.Double,System.Double)">
            <param name="view">To be added.</param>
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Performs a size request on the native platform.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatformEngine.Supports3D">
            <summary>Gets a Boolean value that indicates whether the native platform supports 3D graphics.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IRegisterable">
            <summary>Internally-used flagging interface indicating types that can be registered with <see cref="T:Xamarin.Forms.Registrar" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IScrollViewController">
            <summary>Interface for a scrollview controller.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IScrollViewController.GetScrollPositionForElement(Xamarin.Forms.VisualElement,Xamarin.Forms.ScrollToPosition)">
            <param name="item">To be added.</param>
            <param name="position">To be added.</param>
            <summary>Calculates and returns a point that represents the scroll position that results in <paramref name="item" /> being displayed at <paramref name="position" /> in the scroll view.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.IScrollViewController.ScrollToRequested">
            <summary>Event that is raised when a request has been made to scroll the scroll view.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IScrollViewController.SendScrollFinished">
            <summary>Attempts to set the scroll task completion source state to <c>RanToCompletion</c>.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IScrollViewController.SetScrolledPosition(System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Sets the scroll position to (<paramref name="x" />,
        <paramref name="y" />).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ItemsView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemsView.ItemsSource">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ItemsView.ItemsSourceProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemsView.ItemTemplate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ItemsView.ItemTemplateProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView.Xamarin#Forms#IItemViewController#BindView(Xamarin.Forms.View,System.Object)">
            <param name="view">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemsView.Xamarin#Forms#IItemViewController#Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView.Xamarin#Forms#IItemViewController#CreateView(System.Object)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView.Xamarin#Forms#IItemViewController#GetItem(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView.Xamarin#Forms#IItemViewController#GetItemType(System.Object)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ItemsView`1">
            <typeparam name="TVisual">The type of visual that the <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemsSource" /> items will be templated into.</typeparam>
            <summary>A base class for a view that contains a templated list of items.</summary>
            <remarks>
                <para>
        This class is used as a base class for views that wish to take in a list of user objects and produce views for each of them to be displayed, such as <see cref="T:Xamarin.Forms.ListView" />. The generic
        argument is used to specify the type of visual that the view expects. In the case of <see cref="T:Xamarin.Forms.ListView" />, only <see cref="T:Xamarin.Forms.Cell" /> subclasses are accepted, so that's
        what it provides as its argument.
      </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.CreateDefault(System.Object)">
            <param name="item">The user object </param>
            <summary>Creates a default <typeparamref name="TVisual" /> instance for <paramref name="item" />.</summary>
            <returns>An instance of the <typeparamref name="TVisual" /> class.</returns>
            <remarks>
                <para>This method is called by the templating system when <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemTemplate" /> is <see langword="null" />.</para>
                <para>The <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> of the returned object will automatically be set to <paramref name="item" />, there is no
          need to set it yourself. If you do, it will be overridden.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemsView`1.ItemsSource">
            <summary>Gets or sets the source of items to template and display.</summary>
            <value>To be added.</value>
            <remarks>
                <para>While any <see cref="T:System.Collections.IEnumerable" /> implementer is accepted, any that do not implement <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.IReadOnlyList{T}" />
						(where T is a class) will be converted to list by iterating.</para>
                <para>If your collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />, any changes raised from the event on this interface will be reflected in the items view. Note that if the event
						is raised on another thread the main thread, the results will be unpredictable depending on the platform. To safely modify your collection (and raise the event) from another thread, call
						<see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" /> to enable proper synchronization of access to the thread.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.ItemsView`1.ItemsSourceProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemSource" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ItemsView`1.ItemTemplate">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.DataTemplate" /> to apply to the <see cref="M:Xamarin.Forms.ItemsView{TVisual}.ItemsSource" />.</summary>
            <value>The <see cref="T:Xamarin.Forms.DataTemplate" /> for the <see cref="T:Xamarin.Forms.ItemsView" />, or <see langword="null" /></value>
            <remarks>
                <para>The ItemTemplate is used to define the visual appearance of objects from the <see cref="P.Xamarin.Forms.ItemsView{TVisual}.ItemsSource" />. Through
          the item template you can set up data bindings to the user objects supplied to automatically fill in the visual and respond to any changes in the user
          object.</para>
                <para>If the item template is <see langword="null" />, <see cref="M.Xamarin.Forms.ItemsView{TVisual}.CreateDefault" /> is called and the result is used as the visual.</para>
                <example>
                    <para>In this example, a template for a <see cref="T:Xamarin.Forms.TextCell" /> is created for a simple user object.</para>
                    <code lang="C#"><![CDATA[
class Person
{
  public string FullName
  {
    get;
    set;
  }
  
  public string Address
  {
    get;
    set;
  }
}

void SetupView()
{
  var template = new DataTemplate (typeof (TextCell));
  
  // We can set data bindings to our supplied objects.
  template.SetBinding (TextCell.TextProperty, "FullName");
  template.SetBinding (TextCell.DetailProperty, "Address");
  
  // We can also set values that will apply to each item.
  template.SetValue (TextCell.TextColorProperty, Color.Red);
  
  itemsView.ItemTemplate = template;
  itemsView.ItemsSource = new[] {
    new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
    new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
  };
}
            ]]></code>
                </example>
            </remarks>
            <altmember cref="T:Xamarin.Forms.DataTemplate" />
            <altmember cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemsSource" />
            <altmember cref="M:Xamarin.Forms.ItemsView{TVisual}.CreateDefault" />
        </member>
        <member name="F:Xamarin.Forms.ItemsView`1.ItemTemplateProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemTemplate" /> property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.SetupContent(TVisual,System.Int32)">
            <param name="content">The visual content to setup.</param>
            <param name="index">The index of the content.</param>
            <summary>Performs any additional setup for the content at creation time.</summary>
            <remarks>
                <para>This method is called when the <see cref="T:Xamarin.Forms.ItemsView{TVisual}" /> is creating visuals for user items. At this point,
          the <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> will have been set. You can override this method to perform additional setup
          for content specific to your <see cref="T:Xamarin.Forms.ItemsView{TVisual}" /> subclass. <see cref="T:Xamarin.Forms.ListView" />, for example, uses
          this method to set <see cref="P:Xamarin.Forms.Element.Parent" /> to itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.UnhookContent(TVisual)">
            <param name="content">To be added.</param>
            <summary>Application developers override this method to unregister event handlers for items that they registered in <see cref="M:Xamarin.Forms.ItemsView{TVisual}.SetupContent(`0, int)" />.</summary>
            <remarks>
                <para>Application developers must call <see cref="M:Xamarin.Forms.ItemsView{TVisual}.UnhookContent(`0, int)" /> before performing any other action when overriding this method.</para>
                <block type="note">Application developers who override <see cref="M:Xamarin.Forms.ItemsView{TVisual}.SetupContent(`0, int)" /> to allocate resources must override this method in order to deallocate them.</block>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.Xamarin#Forms#IItemsView{TVisual}#CreateDefault(System.Object)">
            <param name="item">To be added.</param>
            <summary>Creates a default TVisual by using <paramref name="item" /></summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.Xamarin#Forms#IItemsView{TVisual}#SetupContent(TVisual,System.Int32)">
            <param name="content">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Configures <paramref name="content" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.Xamarin#Forms#IItemsView{TVisual}#UnhookContent(TVisual)">
            <param name="content">To be added.</param>
            <summary>Internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ItemTappedEventArgs">
            <summary>Event arguments for the <see cref="E:Xamarin.Forms.ListView.ItemTapped" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ItemTappedEventArgs(System.Object,System.Object)">
            <param name="group">To be added.</param>
            <param name="item">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.ItemTappedEventArgs" /> object for the specified <paramref name="item" /> that was tapped and the <paramref name="group" /> to which it belongs.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemTappedEventArgs.Group">
            <summary>The collection of elements to which the tapped item belongs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemTappedEventArgs.Item">
            <summary>The visual element that the user tapped.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ItemVisibilityEventArgs">
            <summary>Event args when an items visiblity has been changed in a <see cref="T:Xamarin.Forms.ListView" />.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ItemVisibilityEventArgs(System.Object)">
            <param name="item">The modified item.</param>
            <summary>Initializes a new instance of the ItemVisibilityEventArgs class with the item whose visibility has changed.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ItemVisibilityEventArgs.Item">
            <summary>The item from the <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> whose visibility has changed.</summary>
            <value>An object.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.IValueConverter">
            <summary>Interface defining methods for two-way value conversion between types.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <summary>Implement this method to convert <paramref name="value" /> to <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <summary>Implement this method to convert <paramref name="value" /> back from <paramref name="targetType" /> by using <paramref name="parameter" /> and <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IViewContainer`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>The type of element that can be added to the container.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.IViewContainer`1.Children">
            <summary>The children collection of a visual element.</summary>
            <value>The collection containing the visual elements children.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.IViewController">
            <summary>Contains methods that set values from renderers on bound properties without breaking the binding.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IVisualElementController">
            <summary>Method that is called when the native size of a visual element changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IVisualElementController.NativeSizeChanged">
            <summary>When implemented in a renderer, called to invalidate the layout when the native size of a visual element changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Keyboard">
            <summary>Default keyboard and base class for specialized keyboards, such as those for telephone numbers, email, and URLs.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Chat">
            <summary>Gets an instance of type "ChatKeyboard".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Keyboard.Create(Xamarin.Forms.KeyboardFlags)">
            <param name="flags">To be added.</param>
            <summary>Returns a new keyboard with the specified <see cref="T:Xamarin.Forms.KeyboardFlags" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Default">
            <summary>Gets an instance of type "Keyboard".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Email">
            <summary>Gets an instance of type "EmailKeyboard".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Numeric">
            <summary>Gets an instance of type "NumericKeyboard".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Telephone">
            <summary>Gets an instance of type "TelephoneKeyboard".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Text">
            <summary>Gets an instance of type "TextKeyboard".</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Url">
            <summary>Gets an instance of type "UrlKeyboard"..</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.KeyboardFlags">
            <summary>Flagging enumeration for Keyboard options such as Capitalization, Spellcheck, and Suggestions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.All">
            <summary>Capitalize the first words of sentences, and perform spellcheck and offer suggested word completions on text that the user enters.</summary>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.CapitalizeSentence">
            <summary>Capitalize the first words of sentences.</summary>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.Spellcheck">
            <summary>Perform spellcheck on text that the user enters.</summary>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.Suggestions">
            <summary>Offer suggested word completions on text that the user enters.</summary>
        </member>
        <member name="T:Xamarin.Forms.KeyboardTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts a string into a <see cref="T:Xamarin.Forms.Keyboard" />.</summary>
            <remarks>
                <para>The following XAML snippet illustrates a case where a KeyboardTypeConverter is used behind the scenes:</para>
                <example>
                    <code lang="XAML"><![CDATA[
<Entry Keyboard="Keyboard.Telephone" /> 
    ]]></code>
                </example>
                <para>The following shows some examples of <see cref="T:Xamarin.Forms.KeyboardTypeConverter" /> forms:</para>
                <example>
                    <code lang="C#"><![CDATA[
var converter = new KeyboardTypeConverter ();
foreach (var kvp in new Dictionary<string, Keyboard> {
	{"Keyboard.Default", Keyboard.Default},
	{"Keyboard.Email", Keyboard.Email},
	{"Keyboard.Text", Keyboard.Text},
	{"Keyboard.Url", Keyboard.Url},
	{"Keyboard.Telephone", Keyboard.Telephone},
	{"Keyboard.Chat", Keyboard.Chat},
})
Assert.AreSame (kvp.Value, converter.ConvertFrom (kvp.Key));
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.KeyboardTypeConverter">
            <summary>Initializes a new instance of the KayboardTypeConverter class.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.KeyboardTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">The type of the object.</param>
            <summary>Returns wheher this converter can convert an object of the given type.</summary>
            <returns>
                <see langword="true" /> if the KeyboardTypeConverter can convert from sourceType. <see langword="false" /> otherwise.</returns>
            <remarks>This method only returns <see langword="true" /> is sourceType is <see cref="T:System.String" />.</remarks>
        </member>
        <member name="M:Xamarin.Forms.KeyboardTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">The Culture fo the value parameter.</param>
            <param name="value">The object to convert from.</param>
            <summary>TConvert the given value into a Keyboard.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Keyboard" />.</returns>
            <remarks>This will throw an IvalidOperationException if the conversion failed.</remarks>
        </member>
        <member name="M:Xamarin.Forms.KeyboardTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a keyboard for a valid keyboard name.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Label">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that displays text.</summary>
            <remarks>
                <para>A Label is used to display single-line text elements as well as multi-line blocks of text.</para>
                <para>
                    <img href="Label.TripleScreenShot.png" />
                </para>
                <para>The following example, adapted from the default Xamarin Forms solution, shows a basic use:</para>
                <example>
                    <code lang="C#"><![CDATA[
public class App : Application
{
    public App ()
    {
    MainPage = new ContentPage { 
        Content = new Label {
            Text = "Hello, Forms!",
            FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
            VerticalOptions = LayoutOptions.CenterAndExpand,
            HorizontalOptions = LayoutOptions.CenterAndExpand,
        },
    };
}
]]></code>
                    <para>The FormsGallery sample, which can be found on the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">Sample Applications</a></format> page, has a LabelDemoPage.cs file. This file contains a longer and more complete example.</para>
                </example>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Label" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Font</term>
                        <description>
                            <para>Deprecated. Use <c>FontAttributes</c>, <c>FontFamily</c>, and <c>FontSize</c>, instead. A string of the format <c>[name],[attributes],[size]</c>. The font specification  may contain multiple attributes, e.g. <c>Georgia, Bold, Italic, 42</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>FontAttributes</term>
                        <description>
                            <para>
                                <c>Bold</c>, <c>Bold,Italic</c>, or <c>None</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>FontFamily</term>
                        <description>
                            <para>A font family, such as <c>sans-serif</c> or <c>monospace</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>FontSize</term>
                        <description>
                            <para>A named size, such as <c>Large</c>, or an integer that represents the size in device units.</para>
                        </description>
                    </item>
                    <!--TODO: Figure this out. ON HOLD from ermau 2014-01-20
                <item>
                    <term>FormattedText</term>
                    <description><para></para></description>
                </item>-->
                    <item>
                        <term>LineBreakMode</term>
                        <description>
                            <para>A string that corresponds to a <see cref="T:Xamarin.Forms.LineBreakMode" /> enumeration value.</para>
                        </description>
                    </item>
                    <item>
                        <term>Text</term>
                        <description>
                            <para>The text that will appear on the label.</para>
                        </description>
                    </item>
                    <item>
                        <term>TextColor</term>
                        <description>
                            <para>A color specification, with or without the prefix, "Color". For example, "Color.Red" and "Red" both specify the color red.</para>
                        </description>
                    </item>
                    <item>
                        <term>HorizontalTextAlignment</term>
                        <description>
                            <para>
                                <c>Center</c>, <c>End</c>, or <c>Start</c>, to indicate the horizontal placement of the label text.</para>
                        </description>
                    </item>
                    <item>
                        <term>VerticalTextAlignment</term>
                        <description>
                            <para>
                                <c>Center</c>, <c>End</c>, or <c>Start</c>, to indicate the vertical placement of the label text.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Label">
            <summary>Initializes a new instance of the Label class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.Font">
            <summary>Gets or sets the Font for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Font" /> value for the Label. The default is <see langword="null" />, which represents the default font on the platform.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.FontAttributes">
            <summary>Gets a value that indicates whether the font for the label is bold, italic, or neither.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Label.FontAttributesProperty">
            <summary>Backing store for the FontAttributes property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Label.FontFamily">
            <summary>Gets the font family to which the font for the label belongs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Label.FontFamilyProperty">
            <summary>Backing store for the FontFamily property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Label.FontProperty">
            <summary>Backing store for the Font bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.FontSize">
            <summary>Gets the size of the font for the label.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Label.FontSizeProperty">
            <summary>Backing store for the FontSize property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Label.FormattedText">
            <summary>Gets or sets the formatted text for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.FormattedString" /> value to be displayed inside of the Label. This is a bindable property.</value>
            <remarks>Setting FromattedText to a non-null value will set the Text property to null.
        </remarks>
        </member>
        <member name="F:Xamarin.Forms.Label.FormattedTextProperty">
            <summary>Backing store for the FormattedText property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Label.HorizontalTextAlignment">
            <summary>Gets or sets the horizontal alignement of the Text property. This is a bindable property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Label.HorizontalTextAlignmentProperty">
            <summary>Identifies the HorizontalTextAlignment bindable property</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Label.LineBreakMode">
            <summary>Gets or sets the LineBreakMode for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.LineBreakMode" /> value for the Label. The default is <see cref="E:Xamarin.Forms.LineBreakMode.WordWrap" /></value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.LineBreakModeProperty">
            <summary>Backing store for the LineBreakMode bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.Text">
            <summary>Gets or sets the text for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:System.String" /> value to be displayed inside of the Label.</value>
            <remarks>Setting Text to a non-null value will set the FormattedText property to null.
        </remarks>
        </member>
        <member name="P:Xamarin.Forms.Label.TextColor">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> for the text of this Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Color" /> value.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.TextColorProperty">
            <summary>Backing store for the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.TextProperty">
            <summary>Backing store for the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.VerticalTextAlignment">
            <summary>Gets or sets the vertical alignement of the Text property. This is a bindable property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Label.VerticalTextAlignmentProperty">
            <summary>Identifies the VerticalTextAlignment bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Label.XAlign">
            <summary>Gets or sets the horizontal alignment for the Text inside of the Label bound.</summary>
            <value>The <see cref="T:Xamarin.Forms.TextAlignment" /> value. The default is <see cref="E:Xamarin.Forms.TextAlignment.Start" />, i.e. the text is left-aligned.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.XAlignProperty">
            <summary>Backing store for the XAlign bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.YAlign">
            <summary>Gets or sets the vertical alignment for the Text inside of the Label bound.</summary>
            <value>The <see cref="T:Xamarin.Forms.TextAlignment" /> value. The default is <see cref="E:Xamarin.Forms.TextAlignment.Start" />, i.e. the text is top-aligned.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.YAlignProperty">
            <summary>Backing store for the YAlign bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Layout">
            <summary>
                <para>Provides the base class for all Layout elements. Use Layout elements to position and size child elements in Forms applications.</para>
            </summary>
            <remarks>
                <para>Subtypes of <see cref="T:Xamarin.Forms.Layout" /> include <see cref="T:Xamarin.Forms.ContentView" />, <see cref="T:Xamarin.Forms.ScrollView" />, and <see cref="T:Xamarin.Forms.Layout`1" />, as shown in the following diagram.</para>
                <para>The <see cref="P:Xamarin.Forms.Layout`1.Children" /> property of <see cref="T:Xamarin.Forms.Layout`1" /> contains a list of children of the parameterized type <c>T</c>, which must be a type of <see cref="T:Xamarin.Forms.View" />. Since <see cref="T:Xamarin.Forms.Layout" /> is itself a subclass of <see cref="T:Xamarin.Forms.View" />, this allows <see cref="T:Xamarin.Forms.Layout" />s to hold sub-layouts, scrolling regions, etc.</para>
                <!-- Until and unless we get a tool to do these graphics properl. Will need intro text for this, too.
      <para>
        <img href="Element.Hierarchy.png" />
      </para>-->
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Layout" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>IsClippedToBounds</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether the layout is clipped to its bounding rectangle.</para>
                        </description>
                    </item>
                    <item>
                        <term>Padding</term>
                        <description>
                            <para>A comma-separated list of 4 integers that represent a <see cref="T:Xamarin.Forms.Thickness" /> structure.</para>
                        </description>
                    </item>
                </list>
            </remarks>
            <altmember cref="T:Xamarin.Forms.ContentView" />
            <altmember cref="T:Xamarin.Forms.Layout`1" />
            <altmember cref="T:Xamarin.Forms.ScrollView" />
        </member>
        <member name="C:Xamarin.Forms.Layout">
            <summary>Intitializes a new <see cref="T:Xamarin.Forms.Layout" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.ForceLayout">
            <summary>Forces a layout cycle on the element and all of its descendants.</summary>
            <remarks>
                <para>Calling ForceLayout frequently can have negative impacts on performance.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.GetSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width that a parent Layout can allocate to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <param name="heightConstraint">The available height that a parent Layout can allocate to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <summary>Returns the <see cref="T:Xamarin.Forms.SizeRequest" /> of the Layout. Calling this method begins the measure pass of a layout cycle.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains a requested size and a minimum size.</returns>
            <remarks>
                <para>
            Calling GetSizeRequest causes a measure pass to occur for the subtree of elements it is called on. It is ideal to only call GetSizeRequest when needed as excessive calls can negatively impact the performance of the app. Overriding GetSizeRequest should only be done if the developer wants to ignore Width/HeightRequest. More likely a subclass would wish to override <see cref="M:Xamarin.Forms.VisualElement.OnSizeRequest (double, double)" />.
            </para>
            </remarks>
            <altmember cref="M:Xamarin.Forms.OnSizeRequest (double, double)" />
        </member>
        <member name="M:Xamarin.Forms.Layout.InvalidateLayout">
            <summary>Invalidates the current layout.</summary>
            <remarks>Calling this method will invalidate the measure and triggers a new layout cycle.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Layout.IsClippedToBounds">
            <summary>Gets or sets a value which determines if the Layout should clip its children to its bounds.</summary>
            <value>
                <see langword="true" /> if the Layout is clipped; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Layout.IsClippedToBoundsProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Layout.IsClippedToBounds" /> bindable property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Layout.LayoutChanged">
            <summary>Occurs at the end of a layout cycle if any of the child element's <see cref="P:Xamarin.Forms.VisualElement.Bounds" /> have changed.</summary>
            <remarks>
                <para>Developers wishing to implement animations may wish to begin them at the end of a LayoutChanged event.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement,Xamarin.Forms.Rectangle)">
            <param name="child">The child element to be positioned.</param>
            <param name="region">The bounding region in which the child should be positioned.</param>
            <summary>Positions a child element into a bounding region while respecting the child elements <see cref="P:Xamarin.Forms.VisualElement.HorizontalOptions" /> and <see cref="P:Xamarin.Forms.VisualElement.VerticalOptions" />.</summary>
            <remarks>This method is called in the layout cycle after the general regions for each child have been calculated. This method will handle positioning the element relative to the bounding region given if the bounding region given is larger than the child's desired size.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the width of the child region bounding box.</param>
            <param name="height">A value representing the height of the child region bounding box.</param>
            <summary>Positions and sizes the children of a Layout.</summary>
            <remarks>Implementors wishing to change the default behavior of a Layout should override this method. It is suggested to still call the base method and modify its calculated results.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View)">
            <param name="view">The view to lower in the visual stack.</param>
            <summary>Sends a child to the back of the visual stack.</summary>
            <remarks>Children are internally stored in visual stack order. This means that raising or lowering a child also changes the order in which the children are enumerated.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.OnChildMeasureInvalidated">
            <summary>Invoked whenever a child of the layout has emitted <see cref="E:Xamarin.Forms.VisualElement.MeaureInvalidated" />. Implement this method to add class handling for this event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object,System.EventArgs)">
            <param name="sender">The child element whose preferred size changed.</param>
            <param name="e">The event data.</param>
            <summary>Invoked whenever a child of the layout has emitted <see cref="E:Xamarin.Forms.VisualElement.MeaureInvalidated" />. Implement this method to add class handling for this event.</summary>
            <remarks>This method has a default implementation and and application developers must call the base implementation.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.OnSizeAllocated(System.Double,System.Double)">
            <param name="width">The new width of the element.</param>
            <param name="height">The new height of the element.</param>
            <summary>This method is called when the size of the element is set during a layout cycle. This method is called directly before the <see cref="E:Xamarin.Forms.VisualElement.SizeChanged" /> event is emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has a default implementation which triggers the layout cycle of the Layout to begin.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Layout.Padding">
            <summary>Gets or sets the inner padding of the Layout.</summary>
            <value>The Thickness values for the layout. The default value is a Thickness with all values set to 0.</value>
            <remarks>
                <para>
            The padding is the space between the bounds of a layout and the bounding region into which its children should be arranged into.
          </para>
                <para>
              The following example shows setting the padding of a Layout to inset its children.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  var stackLayout = new StackLayout {
    Padding = new Thickness (10, 10, 10, 20),
    Children = {
      new Label {Text = "Hello"},
      new Label {Text = "World"}
    }
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Layout.PaddingProperty">
            <summary>Identifies the Padding bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View)">
            <param name="view">The view to raise in the visual stack.</param>
            <summary>Sends a child to the front of the visual stack.</summary>
            <remarks>Children are internally stored in visual stack order. This means that raising or lowering a child also changes the order in which they are enumerated.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.ShouldInvalidateOnChildAdded(Xamarin.Forms.View)">
            <param name="child">To be added.</param>
            <summary>When implemented, should return <see langword="true" /> if <paramref name="child" /> should call <see cref="M:Xamarin.Forms.VisualElement.InvalidateMeasure" />, and to return <see langword="false" /> if it should not.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View)">
            <param name="child">To be added.</param>
            <summary>When implemented, should return <see langword="true" /> if <paramref name="child" /> should call <see cref="M:Xamarin.Forms.VisualElement.InvalidateMeasure" /> when it is removed, and to return <see langword="false" /> if it should not.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.UpdateChildrenLayout">
            <summary>Instructs the layout to relayout all of its children.</summary>
            <remarks>This method starts a new layout cycle for the layout. Invoking this method frequently can negatively impact performance.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Layout.Xamarin#Forms#ILayoutController#Children">
            <summary>Internal.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Layout`1">
            <typeparam name="T">The subclass of <see cref="T:Xamarin.Forms.View" /> the layout contains.</typeparam>
            <summary>A base implementation of a layout with undefined behavior and multiple children.</summary>
            <remarks>
                <para>
                    <see cref="T:Xamarin.Forms.Layout`1" />s contain <see cref="P:Xamarin.Forms.Layout`1.Children" /> that are of the type <c>T</c> with which the <see cref="T:Xamarin.Forms.Layout`1" /> was specified. This <c>T</c> must be of type <see cref="T:Xamarin.Forms.View" />. Since <see cref="T:Xamarin.Forms.Layout" />s are subclasses of <see cref="T:Xamarin.Forms.View" />, this means that layouts may be nested, contain scrolling regions, etc.  
      </para>
                <para>The following image shows the relationship between <see cref="T:Xamarin.Forms.View" />, <see cref="T:Xamarin.Forms.Layout" />, <see cref="T:Xamarin.Forms.Layout`1" />, and important subtypes.</para>
                <para>
                    <img href="Element.Hierarchy.png" />
                </para>
                <para>
          The following example shows adding and removing elements from a layout.
          </para>
                <example>
                    <code lang="C#"><![CDATA[
  void UpdateItems (Layout<View> layout, IEnumerable newItems)
  {
    layout.Children.Clear ();
    foreach (var item in newItems) {
      layout.Children.Add (item);
    }
  }
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Layout`1">
            <summary>Provides the base initialization for objects derived from the Layout&lt;T&gt; class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Layout`1.Children">
            <summary>Gets an IList&lt;View&gt; of child element of the Layout.</summary>
            <value>A IList&lt;View&gt;. The default is an empty list.</value>
            <remarks>
                <para>
            The Children collection of a Layout contains all the children added throught the public add/remove interface. Internal children will not be exposed through this collection.
          </para>
                <para>
              The following shows the creation of a layout, setting a property, and adding the children in the object initializer.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  var stack = new StackLayout {
    Spacing = 20,
    Children = {
      new Label {Text = "Hello World!"},
      new Button {Text = "Click Me!"}
    }
  };
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout`1.OnAdded(T)">
            <param name="view">The view which was added.</param>
            <summary>Invoked when a child is added to the layout. Implement this method to add class handling for this event.</summary>
            <remarks>This method is different from <see cref="M:Xamarin.Forms.Element.OnChildAdded (Xamarin.Forms.Element element)" /> in that it provides a typed child consistent with the type of the Layout&lt;T&gt;.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout`1.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">To be added.</param>
            <summary>Application developers can override this method to respond when a child is added.</summary>
            <remarks>Application developers who override this method must call base.OnChildAdded before performing any other actions in their override.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout`1.OnChildRemoved(Xamarin.Forms.Element)">
            <param name="child">To be added.</param>
            <summary>Application developers can override this method to respond when a child is removed.</summary>
            <remarks>Application developers who override this method must call base.OnChildRemoved before performing any other actions in their override.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout`1.OnRemoved(T)">
            <param name="view">The view which was removed.</param>
            <summary>Invoked when a child is removed from the layout. Implement this method to add class handling for this event.</summary>
            <remarks>This method is different from <see cref="M:Xamarin.Forms.Element.OnChildRemoved (Xamarin.Forms.Element element)" /> in that it provides a typed child consistent with the type of the Layout&lt;T&gt;.</remarks>
        </member>
        <member name="T:Xamarin.Forms.LayoutAlignment">
            <summary>Values that represent LayoutAlignment.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.Center">
            <summary>The center of an alignment.</summary>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.End">
            <summary>The end of an alignment. Usually the Bottom or Right.</summary>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.Fill">
            <summary>Fill the entire area if possible.</summary>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.Start">
            <summary>The start of an alignment. Usually the Top or Left.</summary>
        </member>
        <member name="T:Xamarin.Forms.LayoutOptions">
            <summary>A struct whose static members define various alignment and expansion options.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.LayoutOptions(Xamarin.Forms.LayoutAlignment,System.Boolean)">
            <param name="alignment">An alignment value.</param>
            <param name="expands">Whether or not an element will expand to fill available space in its parent.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.LayoutOptions" /> object with <paramref name="alignment" /> and <paramref name="expands" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.LayoutOptions.Alignment">
            <summary>Gets or sets a value that indicates how an element will be aligned.</summary>
            <value>The <see cref="T:Xamarin.Forms.LayoutAlignment" /> flags that describe the behavior of an element.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.Center">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> structure that describes an element that is centered and does not expand.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.CenterAndExpand">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> structure that describes an element that is centered and expands.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.End">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> structure that describes an element that appears at the end of its parent and does not expand.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.EndAndExpand">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> object that describes an element that appears at the end of its parent and expands.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.LayoutOptions.Expands">
            <summary>Gets or sets a value that indicates whether or not the element that is described by this <see cref="T:Xamarin.Forms.LayoutOptions" /> structure will occupy the largest space that its parent will give to it.</summary>
            <value>Whether or not the element that is described by this <see cref="T:Xamarin.Forms.LayoutOptions" /> structure will occupy the largest space that its parent will give it. <see langword="true" /> if the element will occupy the largest space the parent will give to it. <see langword="false" /> if the element will be as compact as it can be.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.Fill">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> stucture that describes an element that has no padding around itself and does not expand.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.FillAndExpand">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> structure that describes an element that has no padding around itself and expands.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.Start">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> structure that describes an element that appears at the start of its parent and does not expand.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.StartAndExpand">
            <summary>A <see cref="T:Xamarin.Forms.LayoutOptions" /> structure that describes an element that appears at the start of its parent and expands.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.LayoutOptionsConverter">
            <summary>Class that takes a string representation of a <see cref="T:Xamarin.Forms.LayoutOptions" /> and returns a corresponding <see cref="T:Xamarin.Forms.LayoutOptions" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.LayoutOptionsConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.LayoutOptions" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.LayoutOptionsConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">A type to query.</param>
            <summary>Returns <see langword="true" /> if the converter can create and return a <see cref="T:Xamarin.Forms.LayoutOptions" /> for items of the specified source type. Otherwise, <see langword="false" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.LayoutOptionsConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Creates and returns a <see cref="T:Xamarin.Forms.LayoutOptions" /> for the specified <paramref name="value" /> and <paramref name="culture" />.</summary>
            <returns>A <see cref="T:Xamarin.Forms.LayoutOptions" /> for the specified <paramref name="value" /> and <paramref name="culture" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.LayoutOptionsConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a  <see cref="T:Xamarin.Forms.LayoutOptions" /> for a valid layout options string.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.LineBreakMode">
            <summary>Enumeration specifying various options for line breaking.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.CharacterWrap">
            <summary>Wrap at character boundaries.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.HeadTruncation">
            <summary>Truncate the head of text.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.MiddleTruncation">
            <summary>Truncate the middle of text. This may be done, for example, by replacing it with an ellipsis.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.NoWrap">
            <summary>Do not wrap text.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.TailTruncation">
            <summary>Truncate the tail of text.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.WordWrap">
            <summary>Wrap at word boundaries.</summary>
        </member>
        <member name="T:Xamarin.Forms.ListStringTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ListStringTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListStringTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ListView">
            <summary>An <see cref="T:Xamarin.Forms.ItemsView" /> that displays a collection of data as a vertical list.</summary>
            <remarks>
                <para>
                    <img href="ListView.TripleScreenShot.png" />
                </para>
                <para>The following example shows a basic use:</para>
                <example>
                    <code lang="C#"><![CDATA[
using System;
using System.Collections.Generic;
using Xamarin.Forms;

namespace FormsGallery
{
class ListViewDemoPage : ContentPage
    {
        class Person
        {
            public Person(string name, DateTime birthday, Color favoriteColor)
            {
                this.Name = name;
                this.Birthday = birthday;
                this.FavoriteColor = favoriteColor;
            }

            public string Name { private set; get; }

            public DateTime Birthday { private set; get; }

            public Color FavoriteColor { private set; get; }
        };

        public ListViewDemoPage()
        {
            Label header = new Label
            {
                Text = "ListView",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            // Define some data.
            List<Person> people = new List<Person>
            {
                new Person("Abigail", new DateTime(1975, 1, 15), Color.Aqua),
                new Person("Bob", new DateTime(1976, 2, 20), Color.Black),
                // ...etc.,...
                new Person("Yvonne", new DateTime(1987, 1, 10), Color.Purple),
                new Person("Zachary", new DateTime(1988, 2, 5), Color.Red)
            };

            // Create the ListView.
            ListView listView = new ListView
            {
                // Source of data items.
                ItemsSource = people,

                // Define template for displaying each item.
                // (Argument of DataTemplate constructor is called for 
                //      each item; it must return a Cell derivative.)
                ItemTemplate = new DataTemplate(() =>
                    {
                        // Create views with bindings for displaying each property.
                        Label nameLabel = new Label();
                        nameLabel.SetBinding(Label.TextProperty, "Name");

                        Label birthdayLabel = new Label();
                        birthdayLabel.SetBinding(Label.TextProperty,
                            new Binding("Birthday", BindingMode.OneWay, 
                                null, null, "Born {0:d}"));

                        BoxView boxView = new BoxView();
                        boxView.SetBinding(BoxView.ColorProperty, "FavoriteColor");

                        // Return an assembled ViewCell.
                        return new ViewCell
                        {
                            View = new StackLayout
                            {
                                Padding = new Thickness(0, 5),
                                Orientation = StackOrientation.Horizontal,
                                Children = 
                                {
                                    boxView,
                                    new StackLayout
                                    {
                                        VerticalOptions = LayoutOptions.Center,
                                        Spacing = 0,
                                        Children = 
                                        {
                                            nameLabel,
                                            birthdayLabel
                                        }
                                        }
                                }
                                }
                        };
                    })
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children = 
                {
                    header,
                    listView
                }
                };
        }
    }
}

]]></code>
                </example>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.ListView" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <!-- TODO: Ask about these bindings.
                <item>
                    <term>GroupDisplayBinding</term>
                    <description><para></para></description>
                </item>
                <item>
                    <term>GroupHeaderTemplate</term>
                    <description><para></para></description>
                </item>
                <item>
                <item>
                    <term>GroupShortNameBinding</term>
                    <description><para></para></description>
                </item>-->
                    <item>
                        <term>HasUnevenRows</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether the items in the list all have the same height.</para>
                        </description>
                    </item>
                    <item>
                        <term>IsGroupingEnabled</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether grouping is enabled.</para>
                        </description>
                    </item>
                    <item>
                        <term>RowHeight</term>
                        <description>
                            <para>An integer that describes the height of the items in the list. This is ignored if <c>HasUnevenRows</c> is <c>true</c>.</para>
                        </description>
                    </item>
                    <!-- TODO: Named item? Index? What works?
                <item>
                    <term>SelectedItem</term>
                    <description><para></para></description>
                </item>-->
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ListView">
            <summary>Creates and initializes a new instance of the <see cref="T:Xamarin.Forms.ListView" /> class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ListView(Xamarin.Forms.ListViewCachingStrategy)">
            <param name="cachingStrategy">A value that indicates how the List View should manage memory when displaying data items using a data template.</param>
            <summary>Creates and initializes a new instance of the <see cref="T:Xamarin.Forms.ListView" /> class, with the specified caching strategy.</summary>
            <remarks>
                <para>For memory and performance reasons, application developers should strongly prefer <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" />, when possible. See <see cref="T:Xamarin.Forms.ListViewCachingStrategy" /> for more details.</para>
                <para>
                    <block type="note">When devolopers specify <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" />, <c>OnElementChanged</c> events are not raised when cells are recycled. Instead,  the cell is retained and its property values change when the binding context is updated to that of an available cell, <c>OnElementPropertyChanged</c> events are raised. Application developers should remember to listen for the correct events, and should note that their renderers will need to be updated if the default behavior changes to <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" /> in a future release. </block>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.BeginRefresh">
            <summary>Enters the refreshing state by setting the <see cref="P:Xamarin.Forms.ListView.IsRefreshing" /> property to <see langword="true" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.CreateDefault(System.Object)">
            <param name="item">The item to create a default visual for.</param>
            <summary>Creates an instance of the default visual representation of an item.</summary>
            <returns>
          A <see cref="T:Xamarin.Forms.TextCell" /> instance with its text set to the string representation of the object (<see cref="M:System.Object.ToString" />).
        </returns>
            <remarks>
                <para>
            This method is called by the templating system when <see cref="P:Xamarin.Forms.ListView.ItemTemplate" /> is <see langword="null" />.
          </para>
                <para>
            The <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> of the returned object will automatically be set to <paramref name="item" />, there is no
            need to set it yourself. If you do, it will be overridden.
          </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.EndRefresh">
            <summary>Exits the refreshing state by setting the <see cref="P:Xamarin.Forms.ListView.IsRefreshing" /> property to <see langword="false" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.Footer">
            <summary>Gets or sets the string, binding, or view that will be displayed at the bottom of the list view.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.FooterProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.Footer" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.FooterTemplate">
            <summary>Gets or sets a data template to use to format a data object for display at the bottom of the list view.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.FooterTemplateProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.FooterTemplate" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.GroupDisplayBinding">
            <summary>Gets or sets the binding to use for display the group header.</summary>
            <value>The <see cref="T:Xamarin.Forms.BindingBase" /> instance to apply to grouped lists, or <see cref="null" />.</value>
            <remarks>
                <para>
                        This binding can be used to simply set a the text of the group headers without defining a full template and uses the default visuals
                        of the platform to display it. The binding is applied to the <see cref="T:System.Collections.IEnumerable" /> of the group.
                    </para>
                <para>
                        This property is mutually exclusive with <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> property. Setting it will set
                        <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> to <see langword="null" />.
                    </para>
            </remarks>
            <example>
                <para>This example shows an alphabetized list of people, grouped by first initial with the display binding set.</para>
                <code lang="C#"><![CDATA[
    class Person
    {
        public string FullName
        {
            get;
            set;
        }

        public string Address
        {
            get;
            set;
        }
    }
                        ]]></code>
                <code lang="C#"><![CDATA[
    class Group : ObservableCollection<Person>
    {
        public Group (string firstInitial)
        {
            FirstInitial = firstInitial;
        }

        public string FirstInitial
        {
            get;
            private set;
        }
    }
                        ]]></code>
                <code lang="C#"><![CDATA[
    ListView CreateListView()
    {
        var listView = new ListView {
            IsGroupingEnabled = true,
            GroupDisplayBinding = new Binding ("FirstInitial"),
            GroupShortNameBinding = new Binding ("FirstInitial")
        };

        var template = new DataTemplate (typeof (TextCell));
        template.SetBinding (TextCell.TextProperty, "FullName");
        template.SetBinding (TextCell.DetailProperty, "Address");

        itemsView.ItemTemplate = template;
        itemsView.ItemsSource = new[] {
            new Group ("C") {
                new Person { FullName = "Caprice Nave" }
            },

            new Group ("J") {
                new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
                new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
            }
        };
    }
                        ]]></code>
            </example>
        </member>
        <member name="F:Xamarin.Forms.ListView.GroupDisplayBindingProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.GroupHeaderTemplate">
            <summary>Gets or sets a <see cref="T:Xamarin.Forms.DataTemplate" /> for group headers.</summary>
            <value>The <see cref="T:Xamarin.Forms.DataTemplate" /> for group headers, or <see langword="null" />.</value>
            <remarks>
                <para>
            Use this property to define a template for a <see cref="T:Xamarin.Forms.Cell" /> that will be used as the header for groups in this
            <see cref="T:Xamarin.Forms.ListView" />. The <see cref="P:Xamarin.BindableObject.BindingContext" /> will be the <see cref="T:System.Collections.IEnumerable" />
            for each group.
          </para>
                <para>
            GroupHeaderTemplate is mutually exclusive with <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />. Setting this property
            will set <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" /> to <see langword="null" />.
          </para>
                <para>Empty groups will still display a group header.</para>
            </remarks>
            <altmember cref="P:Xamarin.Forms.ListView.ItemsSource" />
            <altmember cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />
            <altmember cref="P:Xamarin.Forms.ListView.IsGroupingEnabled" />
        </member>
        <member name="F:Xamarin.Forms.ListView.GroupHeaderTemplateProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.GroupShortNameBinding">
            <summary>Gets or sets a binding for the name to display in grouped jump lists.</summary>
            <value>The <see cref="T:Xamarin.Forms.BindingBase" /> instance to apply to grouped lists, or <see langword="null" />.</value>
            <remarks>
                <para>
            When grouping items in a <see cref="T:Xamarin.Forms.ListView" />, it is often useful to have jump lists to jump to specific
            sections in the list. For example, in an alphabetically grouped lists, the jump list would be the the letter of each group.
            This binding is applied against the <see cref="T:System.Collections.IEnumerable" /> of each group to select the short name to display
            in the jump list.
          </para>
                <para>
            Note: On Android, there is no displayed jump list.
          </para>
            </remarks>
            <example>
                <para>This example shows an alphabetized list of people, grouped by first initial with the short name binding set.</para>
                <code lang="C#"><![CDATA[
class Person
{
  public string FullName
  {
    get;
    set;
  }

  public string Address
  {
    get;
    set;
  }
}
          ]]></code>
                <code lang="C#"><![CDATA[
class Group : ObservableCollection<Person>
{
  public Group (string firstInitial)
  {
    FirstInitial = firstInitial;
  }

  public string FirstInitial
  {
    get;
    private set;
  }
}
          ]]></code>
                <code lang="C#"><![CDATA[
ListView CreateListView()
{
  var listView = new ListView {
    IsGroupingEnabled = true,
    GroupDisplayBinding = new Binding ("FirstInitial"),
    GroupShortNameBinding = new Binding ("FirstInitial")
  };

  var template = new DataTemplate (typeof (TextCell));
  template.SetBinding (TextCell.TextProperty, "FullName");
  template.SetBinding (TextCell.DetailProperty, "Address");

  itemsView.ItemTemplate = template;
  itemsView.ItemsSource = new[] {
        new Group ("C") {
            new Person { FullName = "Caprice Nave" }
        },

    new Group ("J") {
            new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
            new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
        }
  };
}
          ]]></code>
            </example>
        </member>
        <member name="F:Xamarin.Forms.ListView.GroupShortNameBindingProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.GroupShortNameBinding" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.HasUnevenRows">
            <summary>Gets or sets a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.ListView" /> element has uneven rows.</summary>
            <value>
                <see langword="true" /> if this <see cref="T:Xamarin.Forms.ListView" /> control has uneven rows. Otherwise, <see langword="false" /></value>
            <remarks>
                <para>Application developers will find that the easiest and least error-prone way to automatically size list view rows for content is: first, to set the <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> property to <see langword="true" />; and, second, to either leave <see cref="P:Xamarin.Forms.ListView.RowHeight" /> at its default value of -1, or set it to -1 if it has been changed.</para>
                <para>Application developers will find that the easiest and least error-prone way to set all rows to a constant size is to first set <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> to <see langword="false" />, and then either: leave <see cref="P:Xamarin.Forms.ListView.RowHeight" /> at its default value of -1 (or set it back to that value if it has been changed) in order to get the default height for the system; or set the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property to the desired uniform row height.</para>
                <para>A more detailed discussion follows, below.</para>
                <para>When the app developer sets the <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> property to <see langword="false" />, the behavior of the list view depends on the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property. First, if the developer sets the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property to a positive value, then all rows in the <see cref="T:Xamarin.Forms.ListView" />, irrespective of the height of their content, will be as tall as the specified <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property value. Second, if the develper instead does not set the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property, or sets it to a nonpositive value, then all rows in the <see cref="T:Xamarin.Forms.ListView" />, irrespective of the height of their content, will have the default row height for the system.</para>
                <para>When the app developer sets the <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> property to <see langword="true" />, the behavior of the list view still depends on the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property. First, if the developer either does not set the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property or sets it to -1, list view items are autosized to fit their contents. This is the desired behavior and the intended use case for a <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> value of <see langword="true" />, as noted above. Second, if the developer sets the <see cref="P:Xamarin.Forms.ListView.RowHeight" /> property to 0 or to a negative value other than -1, then all rows in the <see cref="T:Xamarin.Forms.ListView" /> will, irrespective of the height of their content, have the default height for the system. Third, and finally, if the developer sets <see cref="P:Xamarin.Forms.ListView.RowHeight" /> to a positive value, then all rows in the <see cref="T:Xamarin.Forms.ListView" /> will, irrespective of the height of their content, be as tall as <see cref="P:Xamarin.Forms.ListView.RowHeight" />, as if <see cref="P:Xamarin.Forms.ListView.HasUnevenRows" /> had been set to <see langword="false" />.
      </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.HasUnevenRowsProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.HasUnevenRowsProperty" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.Header">
            <summary>Gets or sets the string, binding, or view that will be displayed at the top of the list view.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.HeaderProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.Header" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.HeaderTemplate">
            <summary>Gets or sets a data template to use to format a data object for display at the top of the list view.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.HeaderTemplateProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.HeaderTemplate" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.IsGroupingEnabled">
            <summary>Gets or sets whether or not grouping is enabled for <see cref="T:Xamarin.Forms.ListView" />.</summary>
            <value>
                <see langword="true" /> if grouping is enabled, <see langword="false" /> otherwise and by default.
        </value>
            <remarks />
            <altmember cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />
            <altmember cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" />
        </member>
        <member name="F:Xamarin.Forms.ListView.IsGroupingEnabledProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.IsGroupingEnabledProperty" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.IsPullToRefreshEnabled">
            <summary>Gets or sets a value that tells whether the user can swipe down to cause the application to refresh.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.IsPullToRefreshEnabledProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.IsPullToRefreshEnabled" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.IsRefreshing">
            <summary>Gets or sets a value that tells whether the list view is currently refreshing.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.IsRefreshingProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.IsRefreshing" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemAppearing">
            <summary>Occurs when the visual representation of an item is being added to the visual layout.</summary>
            <remarks>This method is guaranteed to fire at some point before the element is on screen.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemDisappearing">
            <summary>Occurs when the visual representation of an item is being removed from the visual layout.</summary>
            <remarks>This method is for virtualization usage only. It is not guaranteed to fire for all visible items when the List is removed from the screen. Additionally it fires during virtualization, which may not correspond directly with removal from the screen depending on the platform virtualization technique used.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemSelected">
            <summary>Event that is raised when a new item is selected.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemTapped">
            <summary>Event that is raised when an item is tapped.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Method that is called when a size request is made..</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.RefreshCommand">
            <summary>Gets or sets the command that is run when the list view enters the refreshing state.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.RefreshCommandProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.RefreshCommand" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.Refreshing">
            <summary>Event that is raised when the list view refreshes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.RowHeight">
            <summary>Gets or sets a value that represents the height of a row.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.RowHeightProperty">
            <summary>The backing store for the <see cref="P:Xamarin.Forms.ListView.RowHeightProperty" /> property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ListView.ScrollTo(System.Object,Xamarin.Forms.ScrollToPosition,System.Boolean)">
            <param name="item">The item from your <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> to scroll to.</param>
            <param name="position">How the item should be positioned on screen.</param>
            <param name="animated">Whether or not the scroll should be animated.</param>
            <summary>Scrolls the ListView to the <paramref name="item" />.</summary>
            <remarks>
                <para>A linear search is done for the item, so if the same reference appears multiple times in the list, the first item will be scrolled to. This includes if grouping is enabled.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="position" /> contains an invalid value for <see cref="T:Xamarin.Forms.ScrollToPosition" />.</exception>
        </member>
        <member name="M:Xamarin.Forms.ListView.ScrollTo(System.Object,System.Object,Xamarin.Forms.ScrollToPosition,System.Boolean)">
            <param name="item">The item from your <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> to scroll to.</param>
            <param name="group">The group from your <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> to scroll to.</param>
            <param name="position">How the item should be positioned on screen.</param>
            <param name="animated">Whether or not the scroll should be animated.</param>
            <summary>Scrolls the ListView to the <paramref name="item" /> in the <paramref name="group" /></summary>
            <remarks>
                <para>A linear search is done for the item, so if the same reference appears multiple times in the <paramref name="group" />, the first item will be scrolled to. The same item in a different group will be ignored.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="position" /> contains an invalid value for <see cref="T:Xamarin.Forms.ScrollToPosition" />.
                </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:Xamarin.Forms.ListView.IsGroupingEnabled" /> is <see langword="false" />.</exception>
        </member>
        <member name="P:Xamarin.Forms.ListView.SelectedItem">
            <summary>Gets or sets the currently selected item from the <see cref="P:Xamarin.Forms.ListView.ItemsSource" />.</summary>
            <value>The selected item or <see langword="null" /> if no item is selected.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ListView.SelectedItemProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.SelectedItemProperty" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.SeparatorColor">
            <summary>Gets or sets the color of the bar that separates list items.</summary>
            <value>To be added.</value>
            <remarks>The default value is <c>Color.Default</c>. This property has no effect if <see cref="P:Xamarin.Forms.ListView.SeparatorVisibility" /> is <see langword="false" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.SeparatorColorProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.SeparatorColor" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.SeparatorVisibility">
            <summary>Gets or sets a value that tells whether separators are visible between items.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.SeparatorVisibilityProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ListView.SeparatorVisibility" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell,System.Int32)">
            <param name="content">The cell to set up.</param>
            <param name="index">The index of the cell in the list of items.</param>
            <summary>Application developers override this method to register event handlers for list view items.</summary>
            <remarks>
                <para>Application developers must call <see cref="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, int)" /> before performing any other action when overriding this method.</para>
                <block type="note">Application developers who override this method to allocate resources must override <see cref="M:Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell)" /> in order to deallocate them.</block>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell)">
            <param name="content">To be added.</param>
            <summary>Application developers override this method to unregister event handlers for list view items that they registered in <see cref="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, int)" />.</summary>
            <remarks>
                <para>Application developers must call <see cref="M:Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell, int)" /> before performing any other action when overriding this method.</para>
                <block type="note">Application developers who override <see cref="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, int)" /> to allocate resources must override this method in order to deallocate them.</block>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.Xamarin#Forms#ICellVisibilityProxy#SendCellAppearing(Xamarin.Forms.Cell)">
            <param name="cell">To be added.</param>
            <summary>Raises the <see cref="E:Xamarin.Forms.ListView.ItemAppearing" /> event for <paramref name="cell" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.Xamarin#Forms#ICellVisibilityProxy#SendCellDisappearing(Xamarin.Forms.Cell)">
            <param name="cell">To be added.</param>
            <summary>Raises the <see cref="E:Xamarin.Forms.ListView.ItemDisappearing" /> event for <paramref name="cell" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.Xamarin#Forms#IListViewController#FooterElement">
            <summary>Internal.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.Xamarin#Forms#IListViewController#HeaderElement">
            <summary>Internal.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.Xamarin#Forms#IListOrCarouselViewController#SendCellAppearing(Xamarin.Forms.Cell)">
            <param name="cell">To be added.</param>
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.Xamarin#Forms#IListOrCarouselViewController#SendCellDisappearing(Xamarin.Forms.Cell)">
            <param name="cell">To be added.</param>
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.Xamarin#Forms#IListViewController#SendRefreshing">
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ListViewCachingStrategy">
            <summary>Enumerates caching strategies for a ListView.</summary>
            <remarks>
                <para>Application developers can specify one of these values when constructing a <see cref="T:Xamarin.Forms.ListView" /> to determine whether the List View will minimize their memory footprint and speed execution by recycling list cells, or will instead generate a cell for every item in the list. Currently, the default behavior is to retain item data in their generated cells when they are not needed. (Items are not needed, for example, when they are far enough off screen that their display is not imminent.) This behavior corresponds to a value of <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RetainElement" />. For performance reasons, it is likely that the default behavior will be changed to <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" /> in a future release. In the meantime, for memory and performance reasons, app developers should specify <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" /> when constructing a new List View.</para>
                <para>The performance advantage of <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" /> is so great that application developers have been provided with a XAML syntax shortcut for initializing List Views. Instead of <c>x:TypeArguments</c> syntax that specifies a parameter for the <see cref="M:Xamarin.Forms.ListView.ListView(Xamarin.Forms.ListViewCachingStrategy)" /> constructor, XAML for Xamarin.Forms provides a XAML attribute for a non-existent property that corresponds to the caching strategy argument of the constructor. Application developers can set the <c>CachingStrategy</c> attribute to either of the <c>RecycleElement</c> (preferred) or <c>RetainElement</c> values to choose a caching strategy. For example:</para>
                <code lang="XAML"><![CDATA[
<ListView CachingStrategy="RecycleElement" >
    <ListView.ItemTemplate>
        <DataTemplate>
            <ViewCell>
                <!-- ... -->
            </ViewCell>
        </DataTemplate>
    </ListView.ItemTemplate>
</ListView>]]></code>
                <para>
                    <block type="note">When devolopers specify <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" />, <c>OnElementChanged</c> events are not raised when cells are recycled. Instead,  the cell is retained and its property values change when the binding context is updated to that of an available cell, <c>OnElementPropertyChanged</c> events are raised. Application developers should remember to listen for the correct events, and should note that their renderers will need to be updated if the default behavior changes to <see cref="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement" /> in a future release. </block>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.ListViewCachingStrategy.RecycleElement">
            <summary>Indicates that unneeded cells will have their binding contexts updated to that of a cell that is needed.</summary>
        </member>
        <member name="F:Xamarin.Forms.ListViewCachingStrategy.RetainElement">
            <summary>Indicates that for every item in the List View's <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemsSource" /> property, a single unique element will be constructed from the DataTemplate.</summary>
        </member>
        <member name="T:Xamarin.Forms.MasterBehavior">
            <summary>Enumerates values that control how detail content is displayed in a master-detail page.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MasterBehavior.Default">
            <summary>Details are displayed in the default way for the platform.</summary>
        </member>
        <member name="F:Xamarin.Forms.MasterBehavior.Popover">
            <summary>Details pop over the page.</summary>
        </member>
        <member name="F:Xamarin.Forms.MasterBehavior.Split">
            <summary>Details are always displayed in a split screen.</summary>
        </member>
        <member name="F:Xamarin.Forms.MasterBehavior.SplitOnLandscape">
            <summary>Details are displayed in a split screen when the device is in landscape orientation.</summary>
        </member>
        <member name="F:Xamarin.Forms.MasterBehavior.SplitOnPortrait">
            <summary>Details are displayed in a split screen when the device is in portrait orientation.</summary>
        </member>
        <member name="T:Xamarin.Forms.MasterDetailPage">
            <summary>A <see cref="T:Xamarin.Forms.Page" /> that manages two panes of information: A master page that presents data at a high level, and a detail page that displays low-level details about information in the master.</summary>
            <remarks>
                <para>The following example code, taken from the <format type="text/html"><a href="https://github.com/xamarin/xamarin-forms-samples/tree/master/FormsGallery/FormsGallery/FormsGallery">FormsGallery</a></format> sample application, creates a <see cref="T:Xamarin.Forms.MasterDetailPage" /> that allows the user to view detailed information about a color that she chooses from a list. Note that the <c>NamedColorPage</c> class, defined in as a sublcass of <see cref="T:Xamarin.Forms.ContentPage" /> in another file in the sample application, simply displays RGB data, a <see cref="T:Xamarin.Forms.BoxView" /> with its background color set to the color that the user selected, and, finally, hue, saturation, and luminosity data.</para>
                <para>The sample below illustrates three key concepts. First, the "Master" portion of the MasterDetailPage is represented by the <see cref="P:Xamarin.Forms.MasterDetailPage.Master" /> property, which is set to a <see cref="T:Xamarin.Forms.ListView" /> element in this example. This <see cref="T:Xamarin.Forms.ListView" /> element contains a label and a list of colors. Second, the "Detail" portion of the <see cref="T:Xamarin.Forms.MasterDetailPage" /> is represented by the <see cref="P:Xamarin.Forms.MasterDetailPage.Detail" /> property, which, in this example, is set to the <c>NamedColorPage</c> that was noted above. Third, and finally, the page that is represented by the <see cref="P:Xamarin.Forms.MasterDetailPage.Detail" /> property is displayed by setting the <see cref="P:Xamarin.Forms.MasterDetailPage.IsPresented" /> property to <see langword="false" />; That is, the <see cref="P:Xamarin.Forms.MasterDetailPage.IsPresented" /> property controls whether or not the page that is represented by the <see cref="P:Xamarin.Forms.MasterDetailPage.Master" /> is presented to the user.</para>
                <block type="note">The <see cref="P:Xamarin.Forms.MasterDetailPage.Master" /> page must have its <see cref="P:Xamarin.Forms.Page.Title" /> property set. Additionally, the <see cref="P:Xamarin.Forms.MasterDetailPage.Detail" /> page will only display a navigation bar if it is an instance of <see cref="T:Xamarin.Forms.NavigationPage" />.</block>
                <example>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class MasterDetailPageDemoPage :  MasterDetailPage
    {
        public MasterDetailPageDemoPage()
        {
            Label header = new Label
            {
                Text = "MasterDetailPage",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            // Assemble an array of NamedColor objects.
            NamedColor[] namedColors = 
                {
                    new NamedColor("Aqua", Color.Aqua),
                    new NamedColor("Black", Color.Black),
                    new NamedColor("Blue", Color.Blue),
                    new NamedColor("Fuschia", Color.Fuschia),
                    new NamedColor("Gray", Color.Gray),
                    new NamedColor("Green", Color.Green),
                    new NamedColor("Lime", Color.Lime),
                    new NamedColor("Maroon", Color.Maroon),
                    new NamedColor("Navy", Color.Navy),
                    new NamedColor("Olive", Color.Olive),
                    new NamedColor("Purple", Color.Purple),
                    new NamedColor("Red", Color.Red),
                    new NamedColor("Silver", Color.Silver),
                    new NamedColor("Teal", Color.Teal),
                    new NamedColor("White", Color.White),
                    new NamedColor("Yellow", Color.Yellow)
                };

            // Create ListView for the master page.
            ListView listView = new ListView
            {
                ItemsSource = namedColors
            };

            // Create the master page with the ListView.
            this.Master = new ContentPage
            {
            	Title = header.Text,
                Content = new StackLayout
                {
                    Children = 
                    {
                        header, 
                        listView
                    }
                }
            };

            // Create the detail page using NamedColorPage and wrap it in a
            // navigation page to provide a NavigationBar and Toggle button
            this.Detail = new NavigationPage(new NamedColorPage(true));

            // For Windows Phone, provide a way to get back to the master page.
            if (Device.OS == TargetPlatform.WinPhone)
            {
                (this.Detail as ContentPage).Content.GestureRecognizers.Add(
                    new TapGestureRecognizer((view) =>
                    {
                        this.IsPresented = true;
                    }));
            }

            // Define a selected handler for the ListView.
            listView.ItemSelected += (sender, args) =>
                {
                    // Set the BindingContext of the detail page.
                    this.Detail.BindingContext = args.SelectedItem;

                    // Show the detail page.
                    this.IsPresented = false;
                };

            // Initialize the ListView selection.
            listView.SelectedItem = namedColors[0];

            
        }
    }
}
          ]]></code>
                </example>
                <block subset="none" type="note">
                    <para>The Windows Phone and Android platforms do not support sliding the detail screen in order to show or hide it. Application developers can use a <see cref="T:Xamarin.Forms.TapGestureRecognizer" /> to provide the user an additional way to show and hide the Detail screen on these platforms. On Windows Phone, developers could consider using a user interface class that provides an experience that is more consistent with that platform, such as <see cref="T:Xamarin.Forms.CarouselPage" />.</para>
                </block>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.MasterDetailPage">
            <summary>Creates a new empty <see cref="T:Xamarin.Forms.MasterDetailPage" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.Detail">
            <summary>Gets or sets the detail page that is used to display details about items on the master page.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.IsGestureEnabled">
            <summary>Gets or sets a value that turns on or off the gesture to reveal the master page. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if gesture is enabled; otherwise <see langword="false" />. Default is <see langword="true" />.</value>
            <remarks>Has no effect on Windows Phone.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MasterDetailPage.IsGestureEnabledProperty">
            <summary>Backing store for the IsGestureEnabled bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.IsPresented">
            <summary>Gets or sets a value that indicates whether or not the visual element that is represented by the <see cref="P:Xamarin.Forms.MasterDetailPage.Master" /> property is presented to the user.</summary>
            <value>To be added.</value>
            <remarks>Setting this property causes the <see cref="E:Xamarin.Forms.MasterDetailPage.IsPresentedChanged" /> event to be raised.</remarks>
        </member>
        <member name="E:Xamarin.Forms.MasterDetailPage.IsPresentedChanged">
            <summary>Event that is raised when the visual element that is represented by the <see cref="P:Xamarin.Forms.MasterDetailPage.Master" /> property is presented or hidden.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MasterDetailPage.IsPresentedProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.MasterDetailPage.IsPresented" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Lays out the master and detail pages.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.Master">
            <summary>Gets or sets the master page.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.MasterBehavior">
            <summary>Gets or sets a value that indicates how detail content is displayed.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MasterDetailPage.MasterBehaviorProperty">
            <summary>Backing store for the MasterBehavior property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.OnAppearing">
            <summary>Event that is raised when a detail appears.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.OnBackButtonPressed">
            <summary>Event that is raised when the back button is pressed.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.OnDisappearing">
            <summary>Event that is raised when a detail disappears.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.OnParentSet">
            <summary>Method that is called when the <see cref="P:Xamarin.Forms.Element.Parent" /> property of this <see cref="Xamarin.Forms.MasterDetailPage" /> is set.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.ShouldShowToolbarButton">
            <summary>Returns a value that tells whether the list view should display a toolbar button.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.MeasureFlags">
            <summary>Enumerates values that tell whether margins are included when laying out windows.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MeasureFlags.IncludeMargins">
            <summary>Include margins in a layout measurement.</summary>
        </member>
        <member name="F:Xamarin.Forms.MeasureFlags.None">
            <summary>Do not include margins in a layout measurement.</summary>
        </member>
        <member name="T:Xamarin.Forms.MenuItem">
            <summary>Class that presents a menu item and associates it with a command.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.MenuItem" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Command</term>
                        <description>
                            <para>A binding to a command.</para>
                        </description>
                    </item>
                    <item>
                        <term>CommandParameter</term>
                        <description>
                            <para>A parameter to pass to the command.</para>
                        </description>
                    </item>
                    <!-- TODO: Getting info from Jason on how to specify images
                  <item>
                      <term>Icon</term>
                      <description><para></para></description>
                  </item> -->
                    <item>
                        <term>IsDestructive</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether the command deletes an item in a list.</para>
                        </description>
                    </item>
                    <item>
                        <term>Text</term>
                        <description>
                            <para>The text to display on the menu item.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.MenuItem">
            <summary>Intitializes a new <see cref="T:Xamarin.Forms.MenuItem" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.MenuItem.Clicked">
            <summary>Event that is raised when the menu item is clicked.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MenuItem.Command">
            <summary>Gets or sets the command that is run when the menu is clicked.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MenuItem.CommandParameter">
            <summary>Gets or sets the parameter that is passed to the command.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MenuItem.CommandParameterProperty">
            <summary>Identifies the command parameter bound property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MenuItem.CommandProperty">
            <summary>Identifies the command bound property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MenuItem.Icon">
            <summary>Gets or sets the icon for the menu item.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MenuItem.IconProperty">
            <summary>Identfies the icon bound property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MenuItem.IsDestructive">
            <summary>Gets or sets a value that indicates whether or not the menu item removes its associated UI element.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MenuItem.IsDestructiveProperty">
            <summary>Identifies the IsDestructive bound property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MenuItem.OnClicked">
            <summary>When overriden by an app dev, implements behavior when the menu item is clicked.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MenuItem.Text">
            <summary>The text of the menu item.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MenuItem.TextProperty">
            <summary>Identifies the text bound property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.MessagingCenter">
            <summary>Associates a callback on subscribers with a specific message name.</summary>
            <remarks>
                <para>The following shows a simple example of a strongly-typed callback using <see cref="T:Xamarin.Forms.MessagingCenter" /> is:</para>
                <example>
                    <code lang="C#"><![CDATA[
public class SubscriberThing 
{
	public int IntProperty { get; set; }
}

var subscriber = new SubscriberThing();
MessagingCenter.Subscribe<MyPage, int> (subscriber, "IntPropertyMessage", (s, e) => {
	subscriber.IntProperty = e; 
});

//...later...

MessagingCenter.Send<MyPage, int>(this, "IntPropertyMessage", 2);
Assert.AreEqual(2, subscriber.IntProperty);
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Send``1(``0,System.String)">
            <typeparam name="TSender">To be added.</typeparam>
            <param name="sender">To be added.</param>
            <param name="message">To be added.</param>
            <summary>Sends a named message that has no arguments.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Send``2(``0,System.String,``1)">
            <typeparam name="TSender">To be added.</typeparam>
            <typeparam name="TArgs">To be added.</typeparam>
            <param name="sender">To be added.</param>
            <param name="message">To be added.</param>
            <param name="args">To be added.</param>
            <summary>Sends a named message with the specified arguments.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Subscribe``1(System.Object,System.String,System.Action{``0},``0)">
            <typeparam name="TSender">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="source">To be added.</param>
            <summary>Run the <paramref name="callback" /> on <paramref name="subscriber" /> in response to messages that are named <paramref name="message" /> and that are created by <paramref name="source" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Subscribe``2(System.Object,System.String,System.Action{``0,``1},``0)">
            <typeparam name="TSender">To be added.</typeparam>
            <typeparam name="TArgs">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="source">To be added.</param>
            <summary>Run the <paramref name="callback" /> on <paramref name="subscriber" /> in response to parameterized messages that are named <paramref name="message" /> and that are created by <paramref name="source" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Unsubscribe``1(System.Object,System.String)">
            <typeparam name="TSender">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <summary>Unsubscribes a subscriber from the specified messages that come from the specified sender.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Unsubscribe``2(System.Object,System.String)">
            <typeparam name="TSender">To be added.</typeparam>
            <typeparam name="TArgs">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <summary>Unsubscribes from the specified parameterless subscriber messages.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ModalEventArgs">
            <summary>Base class for <see cref="T:Xamarin.Forms.ModalPushedEventArgs" />, <see cref="T:Xamarin.Forms.ModalPushingEventArgs" />, <see cref="T:Xamarin.Forms.ModalPoppedEventArgs" />, and <see cref="T:Xamarin.Forms.ModalPoppingEventArgs" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ModalEventArgs(Xamarin.Forms.Page)">
            <param name="modal">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.ModalEventArgs" /> object for a navigation event that happened to the <paramref name="modal" /> page.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ModalEventArgs.Modal">
            <summary>Gets or sets the page whose navigation triggered the event.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ModalPoppedEventArgs">
            <summary>Arguments for the event that is raised when a modal window is popped from the navigation stack.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ModalPoppedEventArgs(Xamarin.Forms.Page)">
            <param name="modal">To be added.</param>
            <summary>Constructs a new <see cref="T:Xamarin.Forms.ModalPoppedEventArgs" /> object for the page that was just popped.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ModalPoppingEventArgs">
            <summary>Arguments for the event that is raised when a modal window is popping from the navigation stack.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ModalPoppingEventArgs(Xamarin.Forms.Page)">
            <param name="modal">To be added.</param>
            <summary>Constructs a new <see cref="T:Xamarin.Forms.ModalPoppingEventArgs" /> object for the page that is being popped.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ModalPoppingEventArgs.Cancel">
            <summary>Gets or sets a value that tells whether the modal navigation was canceled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ModalPushedEventArgs">
            <summary>Arguments for the event that is raised when a modal window is pushed onto the navigation stack.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ModalPushedEventArgs(Xamarin.Forms.Page)">
            <param name="modal">To be added.</param>
            <summary>Constructs a new <see cref="T:Xamarin.Forms.ModalPushedEventArgs" /> object for the page that was just popped.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ModalPushingEventArgs">
            <summary>Arguments for the event that is raised when a modal window is being pushed onto the navigation stack.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ModalPushingEventArgs(Xamarin.Forms.Page)">
            <param name="modal">To be added.</param>
            <summary>Constructs a new <see cref="T:Xamarin.Forms.ModalPushingEventArgs" /> object for the page that is being pushed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.MultiPage`1">
            <typeparam name="T">The particular subclass of <see cref="T:Xamarin.Forms.Page" /> that the MultiPage services.</typeparam>
            <summary>A bindable, templatable base class for pages which contain multiple sub-pages.</summary>
            <remarks>
                <para>Provides a base implementation for binding and templating pages.</para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.MultiPage`1" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>ItemsSource</term>
                        <description>
                            <para>A static collection of data objects.</para>
                        </description>
                    </item>
                    <item>
                        <term>ItemTemplate</term>
                        <description>
                            <para>A view that has bindings to properties on the members of the collection that is specified by <c>ItemsSource</c>.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.MultiPage`1">
            <summary>Provides the base initialization for objects derived from the MultiPage&lt;T&gt; class.</summary>
            <remarks>
                <see cref="N:Xamarin.Forms" /> provides two classes that are derived from <see cref="T:Xamarin.Forms.Multipage`1" />, <see cref="T:Xamarin.Forms.TabbedPage" /> and <see cref="T:Xamarin.Forms.CarouselPage" />.
        </remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.Children">
            <summary>Gets an IList&lt;Page&gt; of child elements of the MultiPage.</summary>
            <value>A IList&lt;Page&gt;. The default is an empty list.</value>
            <remarks>
                <para>
            The <see cref="P:Xamarin.Forms.Multipage`1.Children" /> collection of a <see cref="T:Xamarin.Forms.Multipage`1" /> contains all the children added through the public add/remove interface. Internal children will not be exposed through this collection.
          </para>
                <para>
              The following shows the creation of a <see cref="T:Xamarin.Forms.TabbedPage" />, which descends from <see cref="T:Xamarin.Forms.Multipage`1" />.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
Page pageOne = CreatePageOne ();
Page pageTwo = CreatePageTwo ();

var tabbedPage = new TabbedPage {
Title = "My App",
Children = {
  pageOne,
  pageTwo
}
};
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.CreateDefault(System.Object)">
            <param name="item">The object which the default page should be templated from.</param>
            <summary>Create default provides a default method of creating new pages from objects in a binding scenario.</summary>
            <returns>The newly created page.</returns>
            <remarks>Most implementors will not need to use or override CreateDefault.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.CurrentPage">
            <summary>Gets or sets the currently selected page.</summary>
            <value>The current page. The default value is null.</value>
            <remarks>The default page will usually get set when the multi-page is displayed or templated.</remarks>
        </member>
        <member name="E:Xamarin.Forms.MultiPage`1.CurrentPageChanged">
            <summary>Raised when the <see cref="P:Xamarin.MultiPage{T}.CurrentPage" /> property changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.ItemsSource">
            <summary>The source for the items to be displayed.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MultiPage`1.ItemsSourceProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.MultiPage`1.ItemsSource" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.ItemTemplate">
            <summary>The template for displaying items.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MultiPage`1.ItemTemplateProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.MultiPage`1.ItemTemplate" /> bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnBackButtonPressed">
            <summary>Event that is raised when the back button is pressed.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">The child that was added.</param>
            <summary>Called when a child has been added to the <see cref="T:Xamarin.Forms.MultiPage`1" />.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnCurrentPageChanged">
            <summary>Raises the <see cref="E:Xamarin.Forms.MultiPage{T}.CurrentPageChanged" /> event.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnPagesChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <param name="e">To be added.</param>
            <summary>Called when the pages of the <see cref="T:Xamarin.Forms.MultiPage`1" /> have been changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnPropertyChanged(System.String)">
            <param name="propertyName">The name of the property that was changed.</param>
            <summary>Called when a bindable property has changed.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.MultiPage`1.PagesChanged">
            <summary>Raised when the children pages of the <see cref="T:Xamarin.Forms.MultiPage`1" /> have changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.SelectedItem">
            <summary>The currently selected item.</summary>
            <value>The selected item from the <see cref="P:Xamarin.MultiPage{T}.ItemsSource" /> or <see langword="null" /> if nothing selected.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.MultiPage`1.SelectedItemProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.MultiPage`1.SelectedItem" /> bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.SetupContent(T,System.Int32)">
            <param name="content">To be added.</param>
            <param name="index">To be added.</param>
            <summary>When overriden in a derived class, performs initialization of <paramref name="content" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.UnhookContent(T)">
            <param name="content">To be added.</param>
            <summary>Application developers override this method to unregister event handlers for items that they registered in <see cref="M:Xamarin.Forms.MultiPage{TVisual}.SetupContent(`0, int)" />.</summary>
            <remarks>
                <para>Application developers must call <see cref="M:Xamarin.Forms.MultiPage{TVisual}.UnhookContent(`0, int)" /> before performing any other action when overriding this method.</para>
                <block type="note">Application developers who override <see cref="M:Xamarin.Forms.MultiPage{TVisual}.SetupContent(`0, int)" /> to allocate resources must override this method in order to deallocate them.</block>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.Xamarin#Forms#IItemsView{T}#CreateDefault(System.Object)">
            <param name="item">To be added.</param>
            <summary>Sets the page that is specified by <paramref name="item" /> as the default page.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.Xamarin#Forms#IItemsView{T}#SetupContent(T,System.Int32)">
            <param name="content">To be added.</param>
            <param name="index">To be added.</param>
            <summary>Performs initialization of <paramref name="content" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.Xamarin#Forms#IItemsView{T}#UnhookContent(T)">
            <param name="content">To be added.</param>
            <summary>Internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.MultiTrigger">
            <summary>Class that represents a list of property and binding conditions, and a list of setters that are applied when all of the conditions in the list are met.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.MultiTrigger" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Conditions</term>
                        <description>
                            <para>A list of <c>PropertyCondition</c> and/or <c>BindingCondition</c> markup instances that specify the conditions that all must be met before all of the setters that are listed in <c>Setters</c> are applied.</para>
                        </description>
                    </item>
                    <item>
                        <term>Setters</term>
                        <description>
                            <para>A list of setters that are applied when all of the property conditions are met. Each <c>Setter</c> tag or tag pair in the list has a <c>Property</c> and <c>Value</c> that represents the assignments to perform when the condition is met.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.MultiTrigger(System.Type)">
            <param name="targetType">To be added.</param>
            <summary>Initializes a new <see cref="T:Xamarin.Forms.MultiTrigger" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiTrigger.Conditions">
            <summary>Gets the list of conditions that must be satisfied in ordeer for the setters in the <see cref="P:Xamarin.Forms.MultiTrigger.Setters" /> list to be invoked.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiTrigger.Setters">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.Setter" /> objects that will be applied when the list of conditions in the <see cref="P:Xamarin.Forms.MultiTrigger.Conditions" /> property are all met.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.NamedSize">
            <summary>Represents pre-defined font sizes.</summary>
            <remarks>The exact pixel-value depends on the platform on which Forms runs.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Default">
            <summary>The default font size.</summary>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Large">
            <summary>A Large font size, for titles or other important text elements.</summary>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Medium">
            <summary>A default font size, to be used in stand alone labels or buttons.</summary>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Micro">
            <summary>The smallest readable font size for the device. Think about this like legal footnotes.</summary>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Small">
            <summary>A small but readable font size. Use this for block of text.</summary>
        </member>
        <member name="T:Xamarin.Forms.NameScopeExtensions">
            <summary>Extension methods for <see cref="T:Xamarin.Forms.Element" /> and <see cref="T:Xamarin.Forms.INameScope" /> that add strongly-typed FindByName methods.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NameScopeExtensions.FindByName``1(Xamarin.Forms.Element,System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="element">To be added.</param>
            <param name="name">To be added.</param>
            <summary>Returns the instance of type <paramref name="T" /> that has name <paramref name="T" /> in the scope that includes <paramref name="element" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.NavigationEventArgs">
            <summary>EventArgs for the NavigationPage's navigation events.</summary>
            <remarks />
            <altmember cref="E:Xamarin.Forms.NavigationPage.Pushed" />
            <altmember cref="E:Xamarin.Forms.NavigationPage.Popped" />
            <altmember cref="E:Xamarin.Forms.NavigationPage.PoppedToRoot" />
        </member>
        <member name="C:Xamarin.Forms.NavigationEventArgs(Xamarin.Forms.Page)">
            <param name="page">The page that was popped or is newly visible.</param>
            <summary />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.NavigationEventArgs.Page">
            <summary>Gets the page that was removed or is newly visible.</summary>
            <value />
            <remarks>
                <para>For <see cref="E:Xamarin.Forms.NavigationPage.Pushed" />, this is the <see cref="T:Xamarin.Forms.Page" /> that was removed. For <see cref="E:Xamarin.Forms.NavigationPage.Pushed" />
					and <see cref="E:Xamarin.Forms.NavigationPage.PoppedToRoot" /> it is the newly visible page, the pushed page or the root respectively.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.NavigationMenu">
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.NavigationMenu">
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationMenu.Add(Xamarin.Forms.Page)">
            <param name="target">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationMenu.Remove(Xamarin.Forms.Page)">
            <param name="target">To be added.</param>
            <summary>For internal use only.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.NavigationMenu.Targets">
            <summary>For internal use only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.NavigationPage">
            <summary>A <see cref="T:Xamarin.Forms.Page" /> that manages the navigation and user-experience of a stack of other pages.</summary>
            <remarks>
                <para>Note that on the Android platform, <see cref="T:Xamarin.Forms.INavigation" /> operations do not generate activity lifecycle notifications. For each <see cref="T:Xamarin.Forms.Page" /> that you push or pop, the Android implementation of <see cref="T:Xamarin.Forms.NavigationPage" /> simply adds or removes the content of the page to or from a single activity.</para>
                <para>Also note that the Windows Phone platform provides navigation natively. Therefore, you do not need to use a <see cref="T:Xamarin.Forms.NavigationPage" /> object to get navigation on that platform.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.NavigationPage">
            <summary>Initializes a new <see cref="T:Xamarin.Forms.NavigationPage" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.NavigationPage(Xamarin.Forms.Page)">
            <param name="root">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.NavigationPage" /> element with <paramref name="root" /> as its root element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.BackButtonTitleProperty">
            <summary>Identifies the property associated with the title of the back button.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.NavigationPage.BarBackgroundColor">
            <summary>Gets or sets the background color for the bar at the top of the NavigationPage.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.BarBackgroundColorProperty">
            <summary>Identifies the property associated with the color of the NavigationPage's bar background color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.NavigationPage.BarTextColor">
            <summary>Gets or sets the text that appears on the bar at the top of the NavigationPage.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.BarTextColorProperty">
            <summary>Identifies the property associated with the color of the NavigationPage's bar text color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.NavigationPage.CurrentPage">
            <summary>The <see cref="T:Xamarin.Forms.Page" /> that is currently top-most on the navigation stack.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.CurrentPageProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.NavigationPage.CurrentPage" /> property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.GetBackButtonTitle(Xamarin.Forms.BindableObject)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> whose back-button's title is being requested.</param>
            <summary>The title of the back button for the specified <paramref name="page" />.</summary>
            <returns>The title of the back button that would be shown if the specified <paramref name="page" /> were the <see cref="P:Xamarin.Forms.CurrentPage" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.GetHasBackButton(Xamarin.Forms.Page)">
            <param name="page">To be added.</param>
            <summary>Returns a value that indicates whether <paramref name="page" /> has a back button.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.GetHasNavigationBar(Xamarin.Forms.BindableObject)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> being queried.</param>
            <summary>Returns a value that indicates whether the <paramref name="page" /> has a navigation bar.</summary>
            <returns>
                <see langword="true" /> if <paramref name="page" /> would display a navigation bar were it the <see cref="P:Xamarin.Forms.NavigationPage.CurrentPage" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.GetTitleIcon(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> whose title icon is being set.</param>
            <summary>Retrieves the path to the file providing the title icon for the <paramref name="bindable" />.</summary>
            <returns>The path to the file providing the title icon for the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.HasBackButtonProperty">
            <summary>Backing store for the HasBackButton property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.HasNavigationBarProperty">
            <summary>Backing store for the HasNavigationBar property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.OnBackButtonPressed">
            <summary>Event that is raised when the hardware back button is pressed. This event is not raised on iOS.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PopAsync">
            <summary>Asynchronously removes the top <see cref="T:Xamarin.Forms.Page" /> from the navigation stack.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Page" /> that had been at the top of the navigation stack.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PopAsync(System.Boolean)">
            <param name="animated">To be added.</param>
            <summary>Asynchronously removes the top <see cref="T:Xamarin.Forms.Page" /> from the navigation stack, with optional animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.NavigationPage.Popped">
            <summary>Event that is raised after a page is popped from this <see cref="T:Xamarin.Forms.NavigationPage" /> element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.NavigationPage.PoppedToRoot">
            <summary>Event that is raised when the last nonroot element is popped from this <see cref="T:Xamarin.Forms.NavigationPage" /> element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PopToRootAsync">
            <summary>Pops all but the root <see cref="T:Xamarin.Forms.Page" /> off the navigation stack.</summary>
            <returns>A task that represents the asynchronous dismiss operation.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PopToRootAsync(System.Boolean)">
            <param name="animated">To be added.</param>
            <summary>A task for asynchronously popping all pages off of the navigation stack.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PushAsync(Xamarin.Forms.Page)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> to present modally.</param>
            <summary>Presents a <see cref="T:Xamarin.Forms.Page" /> modally.</summary>
            <returns>An awaitable Task, indicating the PushModal completion.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PushAsync(Xamarin.Forms.Page,System.Boolean)">
            <param name="page">To be added.</param>
            <param name="animated">To be added.</param>
            <summary>A task for asynchronously pushing a page onto the navigation stack, with optional animation.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.NavigationPage.Pushed">
            <summary>Event that is raised when a page is pushed onto this <see cref="T:Xamarin.Forms.NavigationPage" /> element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.SetBackButtonTitle(Xamarin.Forms.BindableObject,System.String)">
            <param name="page">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets the title that appears on the back button for <paramref name="page" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.SetHasBackButton(Xamarin.Forms.Page,System.Boolean)">
            <param name="page">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Adds or removes a back button to <paramref name="page" />, with optional animation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.SetHasNavigationBar(Xamarin.Forms.BindableObject,System.Boolean)">
            <param name="page">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Sets a value that indicates whether or not this <see cref="T:Xamarin.Forms.NavigationPage" /> element has a navigation bar.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.SetTitleIcon(Xamarin.Forms.BindableObject,Xamarin.Forms.FileImageSource)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> whose title icon is being set.</param>
            <param name="value">The FileImageSource of the icon.</param>
            <summary>Sets the title icon of the <paramref name="bindable" /> to the icon file at <paramref name="value" />.</summary>
            <remarks>
                <example>
                    <code lang="C#"><![CDATA[
public class MyPage : NavigationPage
{
	public MyPage ()
	{
		var myContentPage = new MyContentPage (Color.White);
		this.Push (myContentPage);

		var s = "icon-45.png";
		NavigationPage.SetTitleIcon (myContentPage, s);
	}
}
          ]]></code>
                </example>
                <para>
                    <img href="NavigationPage.TitleIcon.png" />
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.NavigationPage.Tint">
            <summary>The color to be used as the Tint of the <see cref="T:Xamarin.Forms.NavigationPage" />.</summary>
            <value>To be added.</value>
            <remarks>
                <para>Tint is especially important in iOS 7 and later, where the Tint is primary way to specify which controls on screen are active or have an action associated with them.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.TintProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.NavigationPage.Tint" /> bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.TitleIconProperty">
            <summary>Indicates the <see cref="M:Xamarin.Forms.NavigationPage.SetTitleIcon" />/<see cref="M:Xamarin.Forms.NavigationPage.GetTitleIcon" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.OnIdiom`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>Provides idiom-specific implementation of T for the current TargetIdiom.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.OnIdiom`1">
            <summary>Initializes a new instance of OnIdiom</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.OnIdiom`1.op_Implicit(`0Xamarin`0.`0Forms`0.`0OnIdiom`0{`0T`0})~`0T`0">
            <param name="onIdiom">To be added.</param>
            <summary>Implicitly converts OnIdiom to T, depending on Device.Idiom.</summary>
            <returns>The value of the Phone or Tablet property, depending on the current Device.Idiom.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.OnIdiom`1.Phone">
            <summary>Gets or sets the value applied on Phone-like devices.</summary>
            <value>A T.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.OnIdiom`1.Tablet">
            <summary>Gets or sets the value applied on Tablet-like devices.</summary>
            <value>A T.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.OnPlatform`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>Provides the platform-specific implementation of T for the current <see cref="P:Xamarin.Forms.Device.OS" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.OnPlatform`1">
            <summary>Creates a new instance of the <see cref="T:Xamarin.Forms.OnPlatform" /> type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OnPlatform`1.Android">
            <summary>The type as it is implemented on the Android platform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OnPlatform`1.iOS">
            <summary>The type as it is implemented on the iOS platform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.OnPlatform`1.op_Implicit(`0Xamarin`0.`0Forms`0.`0OnPlatform`0{`0T`0})~`0T`0">
            <param name="onPlatform">To be added.</param>
            <summary>Casts the type to the version that corresponds to the platform.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OnPlatform`1.WinPhone">
            <summary>The type as it is implemented on the WinPhone platform.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.OpenGLView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that displays OpenGL content.</summary>
            <remarks>
                <para>
                    <see cref="T:Xamarin.Forms.OpenGLView" />s are easiest to program using Shared Projects, in which case the reference to OpenTK is straightforward. The following example shows a simple OpenGL app with a render loop:</para>
                <example>
                    <code lang="C#"><![CDATA[
using Xamarin.Forms;
using OpenTK.Graphics.ES30;

namespace opengl
{
    public class OpenGLPage : ContentPage
    {
        float red, green, blue;

        public OpenGLPage ()
        {
            Title = "OpenGL";
            var view = new OpenGLView { HasRenderLoop = true };
            var toggle = new Switch { IsToggled = true };
            var button = new Button { Text = "Display" };

            view.HeightRequest = 300;
            view.WidthRequest = 300;

            view.OnDisplay = r => {

                GL.ClearColor (red, green, blue, 1.0f);
                GL.Clear ((ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit));

                red += 0.01f;
                if (red >= 1.0f)
                    red -= 1.0f;
                green += 0.02f;
                if (green >= 1.0f)
                    green -= 1.0f;
                blue += 0.03f;
                if (blue >= 1.0f)
                    blue -= 1.0f;
            };

            toggle.Toggled += (s, a) => {
                view.HasRenderLoop = toggle.IsToggled;
            };
            button.Clicked += (s, a) => view.Display ();

            var stack = new StackLayout { 
                Padding = new Size (20, 20),
                Children = {view, toggle, button}
            };

            Content = stack;
        }
    }
}

          ]]></code>
                </example>
                <para>
                    <img href="OpenGL.Example.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.OpenGLView">
            <summary>Creates a new <see cref="T:Xamarin.Forms.OpenGLView" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.OpenGLView.Display">
            <summary>Called prior to rendering.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OpenGLView.HasRenderLoop">
            <summary>Whether this <see cref="T:Xamarin.Forms.OpenGLView" /> has a custom rendering loop.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.OpenGLView.HasRenderLoopProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.OpenGLView.HasRenderLoop" /> bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OpenGLView.OnDisplay">
            <summary>Overridden to create a custom rendering loop.</summary>
            <value>To be added.</value>
            <remarks>
                <para>When overridden, creates a custom renderer: </para>
                <example>
                    <code lang="C#"><![CDATA[
    var view = new OpenGLView { HasRenderLoop = true };
    view.OnDisplay = r => {

        GL.ClearColor (red, green, blue, 1.0f);
        GL.Clear ((ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit));

        red += 0.01f;
        if (red >= 1.0f)
            red -= 1.0f;
        green += 0.02f;
        if (green >= 1.0f)
            green -= 1.0f;
        blue += 0.03f;
        if (blue >= 1.0f)
            blue -= 1.0f;
    };
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.Page">
            <summary>A <see cref="T:Xamarin.Forms.VisualElement" /> that occupies the entire screen.</summary>
            <remarks>
                <para>
                    <see cref="T:Xamarin.Forms.Page" /> is primarily a base class for more useful derived types. Objects that are derived from the see <see cref="T:Xamarin.Forms.Page" /> class are most prominently used as the top level UI element in Xamarin.Forms applications. Typically, application developers will provide such an object to the target platforms by returning it from a static method that the developer created in a project that references <see cref="N:Xamarin.Forms" />. The contents of a typical App.cs file that would appear in a project that reference <see cref="N:Xamarin.Forms" /> are shown below:</para>
                <example>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace MyFirstFormsApp
{
	public class App : Application
	{
		
		public App()
		{
			MainPage = new ContentPage {
				Content = new Label {
					Text = "Hello, Forms!",
					VerticalOptions = LayoutOptions.CenterAndExpand,
					HorizontalOptions = LayoutOptions.CenterAndExpand,
				}
			}; 
		}
		protected override void OnStart ()
		{
			// Handle when your app starts
		}

		protected override void OnSleep ()
		{
			// Handle when your app sleeps
		}

		protected override void OnResume ()
		{
			// Handle when your app resumes
		}
	}
}]]></code>
                </example>
                <para>While a <see cref="T:Xamarin.Forms.ContentPage" /> object was returned in the example above, note that any class that extends <see cref="T:Xamarin.Forms.Page" /> could have been passed, instead. For example, by using conditional compilation or by checking the platform, the developr can pass a <see cref="T:Xamarin.Forms.CarouselPage" /> to Windows Phone applications, in order to better match the style of the user interface on that platform, while passing <see cref="T:Xamarin.Forms.ContentPage" /> objects or other Page types to the other platforms.</para>
                <para>The other projects in the solution that target the Windows Phone, iOS, and Android platforms can call the GetMainPage method to obtain the <see cref="T:Xamarin.Forms.Page" /> descendant that describes the portable user interface. This object can then be used with platform-specific static methods or extension methods to incorporate it into the native UI for each platform.</para>
                <note>In each platform-specific project, Application developers must call the <c>Xamarin.Forms.Forms.Init()</c> method, with platform-specific parameters, before they get or create any <see cref="N:Xamarin.Forms" /> elements.</note>
                <para>Each targeted platform uses the returned page in a different way. The <c>Xamarin.Forms.Platform.iOS</c> library provides <c>Xamarin.Forms.Page.CreateViewController()</c> extension method, which returns a UIViewController that application developers can assign to the <c>UIWindow.RootViewController</c> property of the top-level UI. This code is typically placed inside the <c>UIApplicationDelegate.FinishedLaunching</c> override for the main application class. A typical example is shown below:</para>
                <example>
                    <code lang="C#">
using System;
using Xamarin.Forms;

namespace MyFirstFormsApp.iOS
{
    [Register("AppDelegate")]
    public partial class AppDelegate : UIApplicationDelegate
    {
        UIWindow window;

        public override bool FinishedLaunching(UIApplication app,
                                               NSDictionary options)
        {
            Forms.Init();

            window = new UIWindow(UIScreen.MainScreen.Bounds);

            window.RootViewController = App.GetMainPage().CreateViewController();
            window.MakeKeyAndVisible();

            return true;
        }
    }
}

</code>
                </example>
                <para>The Xamarin.Forms.Platform.Android.AndroidActivity class provides the <c>Xamarin.Forms.Platform.Android.AndroidActivity.SetPage</c> method, which performs the work that is necessary to make its page argument the top-level UI element of the <c>Xamarin.Forms.Platform.Android.AndroidActivity</c>. A typical example is shown below:</para>
                <example>
                    <code lang="C#">
using System;
using Android.App;
using Android.OS;
using Xamarin.Forms.Platform.Android;


namespace MyFirstFormsApp.Android
{
    [Activity(Label = "MyFirstFormsApp", MainLauncher = true)]
    public class MainActivity : AndroidActivity
    {
        protected override void OnCreate(Bundle bundle)
        {
            base.OnCreate(bundle);

            Xamarin.Forms.Forms.Init(this, bundle);

            SetPage(App.GetMainPage());
        }
    }
}
</code>
                </example>
                <para>For Windows Phone, <see cref="N:Xamarin.Forms" /> provides an extension method for <see cref="T:Xamarin.Forms.Page" /> that is called <see cref="M:Xamarin.Forms.Page.ConvertPageToUIElement" />. This method returns a System.Windows.UIElement object that has the page that was passed to it as its current page. A typical example is shown below:</para>
                <example>
                    <code lang="C#">
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Navigation;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Shell;

using Xamarin.Forms;


namespace MyFirstFormsApp.WinPhone
{
    public partial class MainPage : PhoneApplicationPage
    {
        public MainPage()
        {
            InitializeComponent();

            Forms.Init();
            Content = Phoneword.App.GetMainPage().ConvertPageToUIElement(this);
        }
    }
} </code>
                </example>
                <para>In addition to their role as the main pages of <see cref="N:Xamarin.Forms" /> applications, <see cref="T:Xamarin.Forms.Page" /> objects and their descendants can be used with navigation classes, such as <see cref="T:Xamarin.Forms.Navigation" /> or <see cref="T:Xamarin.Forms.MasterDetailPage" />, among others, to provide rich user experiences that conform to the expected behaviors on each platform.</para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Page" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>BackgroundImage</term>
                        <description>
                            <para>A local file specification that identifies an image.</para>
                        </description>
                    </item>
                    <item>
                        <term>Icon</term>
                        <description>
                            <para>A local file specification that identifies an image.</para>
                        </description>
                    </item>
                    <item>
                        <term>Padding</term>
                        <description>
                            <para>A comma-separated list of 4 integers that represent a <see cref="T:Xamarin.Forms.Thickness" /> structure.</para>
                        </description>
                    </item>
                    <item>
                        <term>Title</term>
                        <description>
                            <para>Text that represents the title of the page.</para>
                        </description>
                    </item>
                    <item>
                        <term>ToolbarItems</term>
                        <description>
                            <para>A list of <c>ToolBarItem</c> elements.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Page">
            <summary>Creates a new <see cref="T:Xamarin.Forms.Page" /> element with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Page.Appearing">
            <summary>Indicates that the <see cref="T:Xamarin.Forms.Page" /> is about to appear.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.BackgroundImage">
            <summary>Identifies the image used as a background for the <see cref="T:Xamarin.Forms.Page" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.BackgroundImageProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.BackgroundImage" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Page.Disappearing">
            <summary>Indicates that the <see cref="T:Xamarin.Forms.Page" /> is about to cease displaying.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.DisplayActionSheet(System.String,System.String,System.String,System.String[])">
            <param name="title">Title of the displayed action sheet. Must not be <see langword="null" />.</param>
            <param name="cancel">Text to be displayed in the 'Cancel' button. Can be <see langword="null" /> to hide the cancel action.</param>
            <param name="destruction">Text to be displayed in the 'Destruct' button.  Can be <see langword="null" /> to hide the destructive option.</param>
            <param name="buttons">Text labels for additional buttons. Must not be <see langword="null" />.</param>
            <summary>Displays a native platform action sheet, allowing the application user to choose from several buttons.</summary>
            <returns>An awaitable Task that displays an action sheet and returns the Text of the button pressed by the user.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.DisplayAlert(System.String,System.String,System.String)">
            <param name="title">The title of the alert dialog.</param>
            <param name="message">The body text of the alert dialog.</param>
            <param name="cancel">Text to be displayed on the 'Cancel' button.</param>
            <summary>Presents an alert dialog to the application user with a single cancel button.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.DisplayAlert(System.String,System.String,System.String,System.String)">
            <param name="title">The title of the alert dialog.</param>
            <param name="message">The body text of the alert dialog.</param>
            <param name="accept">Text to be displayed on the 'Accept' button.</param>
            <param name="cancel">Text to be displayed on the 'Cancel' button.</param>
            <summary>Presents an alert dialog to the application user with an accept and a cancel button.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.ForceLayout">
            <summary>Forces the <see cref="T:Xamarin.Forms.Page" /> to perform a layout pass.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.Icon">
            <summary>Resource identifier for the <see cref="T:Xamarin.Forms.Page" />'s associated icon.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.IconProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.Icon" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.IsBusy">
            <summary>Marks the Page as busy. This will cause the platform specific global activity indicator to show a busy state.</summary>
            <value>A bool indicating if the Page is busy or not.</value>
            <remarks>Setting IsBusy to true on multiple pages at once will cause the global activity indicator to run until both are set back to false. It is the authors job to unset the IsBusy flag before cleaning up a Page.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.IsBusyProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.IsBusy" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Page.LayoutChanged">
            <summary>Raised when the layout of the <see cref="T:Xamarin.Forms.Page" /> has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">Left-hand side of layout area.</param>
            <param name="y">Top of layout area.</param>
            <param name="width">Width of layout area.</param>
            <param name="height">Height of layout area.</param>
            <summary>Lays out children <see cref="T:Xamarin.Forms.Element" />s into the specified area.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnAppearing">
            <summary>When overridden, allows application developers to customize behavior immediately prior to the <see cref="T:Xamarin.Forms.Page" /> becoming visible.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnBackButtonPressed">
            <summary>Application developers can override this method to provide behavior when the back button is pressed.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnBindingContextChanged">
            <summary>
          Invoked whenever the binding context of the <see cref="T:Xamarin.Forms.Page" /> changes. Override this method to add class handling for this event.
        </summary>
            <remarks>
                <para>Overriders must call the base method.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object,System.EventArgs)">
            <param name="sender">To be added.</param>
            <param name="e">To be added.</param>
            <summary>Indicates that the preferred size of a child <see cref="T:Xamarin.Forms.Element" /> has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnDisappearing">
            <summary>When overridden, allows the application developer to customize behavior as the <see cref="T:Xamarin.Forms.Page" /> disappears.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnParentSet">
            <summary>Called when the <see cref="T:Xamarin.Forms.Page" />'s <see cref="P:Xamarin.Forms.Element.Parent" /> property has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnSizeAllocated(System.Double,System.Double)">
            <param name="width">The width allocated to the <see cref="T:Xamarin.Forms.Page" />.</param>
            <param name="height">The height allocated to the <see cref="T:Xamarin.Forms.Page" />.</param>
            <summary>Indicates that the <see cref="T:Xamarin.Forms.Page" /> has been assigned a size.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.Padding">
            <summary>The space between the content of the <see cref="T:Xamarin.Forms.Page" /> and it's border.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.PaddingProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.Padding" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.SendBackButtonPressed">
            <summary>Calls <see cref="M:Xamarin.Forms.Page.OnBackButtonPressed" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.Title">
            <summary>The <see cref="T:Xamarin.Forms.Page" />'s title.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.TitleProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.Title" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.ToolbarItems">
            <summary>A set of <see cref="T:Xamarin.Forms.ToolbarItem" />s, implemented in a platform-specific manner.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.UpdateChildrenLayout">
            <summary>Requests that the children <see cref="T:Xamarin.Forms.Element" />s of the <see cref="T:Xamarin.Forms.Page" /> update their layouts.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PanGestureRecognizer">
            <summary>A gesture recognizer for panning content that is larger than its parent view.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PanGestureRecognizer">
            <summary>Creates a new <see cref="T:Xamarin.Forms.PanGestureRecognizer" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.PanGestureRecognizer.PanUpdated">
            <summary>Event that is raised when the pan gesture changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PanGestureRecognizer.TouchPoints">
            <summary>Gets or sets the number of touch points in the gesture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.PanGestureRecognizer.TouchPointsProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.PanGestureRecognizer.TouchPoints" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PanUpdatedEventArgs">
            <summary>Event that is raised when a pan gesture updates.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PanUpdatedEventArgs(Xamarin.Forms.GestureStatus,System.Int32)">
            <param name="type">Whether the gesture just began, is continuing, was completed, or is canceled.</param>
            <param name="gestureId">An identifier for the gesture.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.PanUpdatedEventArgs" /> with the specified values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PanUpdatedEventArgs(Xamarin.Forms.GestureStatus,System.Int32,System.Double,System.Double)">
            <param name="type">Whether the gesture just began, is continuing, was completed, or is canceled.</param>
            <param name="gestureId">An identifier for the gesture.</param>
            <param name="totalx">The total change in the X direction since the beginning of the gesture.</param>
            <param name="totaly">The total change in the Y direction since the beginning of the gesture.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.PanUpdatedEventArgs" /> with the specified values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PanUpdatedEventArgs.GestureId">
            <summary>Gets the identifier for the gesture that raised the event.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PanUpdatedEventArgs.StatusType">
            <summary>Gets a value that tells if this event is for a newly started gesture, a running gesture, a completed gesture, or a canceled gesture.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PanUpdatedEventArgs.TotalX">
            <summary>Gets the total change in the X direction since the beginning of the gesture..</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PanUpdatedEventArgs.TotalY">
            <summary>Gets the total change in the Y direction since the beginning of the gesture..</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Picker">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control for picking an element in a list.</summary>
            <remarks>
                <para>The visual representation of a Picker is similar to a <see cref="T:Xamarin.Forms.Entry" />, but a picker control appears in place of a keyboard.</para>
                <para>The following example shows the creation of a Picker.</para>
                <example>
                    <code lang="C#"><![CDATA[using System;
using System.Collections.Generic;
using Xamarin.Forms;

namespace FormsGallery
{
    class PickerDemoPage : ContentPage
    {
        // Dictionary to get Color from color name.
        Dictionary<string, Color> nameToColor = new Dictionary<string, Color>
        {
            { "Aqua", Color.Aqua }, { "Black", Color.Black },
            { "Blue", Color.Blue }, { "Fuschia", Color.Fuschia },
            { "Gray", Color.Gray }, { "Green", Color.Green },
            { "Lime", Color.Lime }, { "Maroon", Color.Maroon },
            { "Navy", Color.Navy }, { "Olive", Color.Olive },
            { "Purple", Color.Purple }, { "Red", Color.Red },
            { "Silver", Color.Silver }, { "Teal", Color.Teal },
            { "White", Color.White }, { "Yellow", Color.Yellow }
        };

        public PickerDemoPage()
        {
            Label header = new Label
            {
                Text = "Picker",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            Picker picker = new Picker
            {
                Title = "Color",
                VerticalOptions = LayoutOptions.CenterAndExpand
            };

            foreach (string colorName in nameToColor.Keys)
            {
                picker.Items.Add(colorName);
            }

            // Create BoxView for displaying picked Color
            BoxView boxView = new BoxView
            {
                WidthRequest = 150,
                HeightRequest = 150,
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };

            picker.SelectedIndexChanged += (sender, args) =>
                {
                    if (picker.SelectedIndex == -1)
                    {
                        boxView.Color = Color.Default;
                    }
                    else
                    {
                        string colorName = picker.Items[picker.SelectedIndex];
                        boxView.Color = nameToColor[colorName];
                    }
                };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children =
                {
                    header,
                    picker,
                    boxView
                }
            };

        }
    }
}
]]></code>
                </example>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Picker" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Items</term>
                        <description>
                            <para>A local file specification that identifies an image.</para>
                        </description>
                    </item>
                    <item>
                        <term>SelectedIndex</term>
                        <description>
                            <para>An integer, from 0 to 1 less than the count of items that are listed in <c>Items</c>. Currently, this element must be specified in a tag that appears lexically below <c>Items</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>Title</term>
                        <description>
                            <para>Text that represents the title of the picker.</para>
                        </description>
                    </item>
                </list>
                <para>
                    <img href="Picker.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Picker">
            <summary>Initializes a new instance of the Picker class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Picker.Items">
            <summary>Gets the list of choices.</summary>
            <value>An IList&lt;string&gt; representing the Picker choices.</value>
            <remarks>This property is read-only, but exposes the IList&lt;&gt; interface, so items can be added using Add().</remarks>
        </member>
        <member name="P:Xamarin.Forms.Picker.SelectedIndex">
            <summary>Gets or sets the index of the slected item of the picker. This is a bindable property.</summary>
            <value>An 0-based index representing the selected item in the list. Default is -1.</value>
            <remarks>A value of -1 represents no item selected.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Picker.SelectedIndexChanged">
            <summary>Raised when the value of the SelectIndex property has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Picker.SelectedIndexProperty">
            <summary>Identifies the SelectedIndex bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Picker.TextColor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Picker.TextColorProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Picker.Title">
            <summary>Gets or sets the title for the Picker. This is a bindable property.</summary>
            <value>A string.</value>
            <remarks>Depending on the platform, the Title is shown as a placeholder, headline, or not showed at all.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Picker.TitleProperty">
            <summary>Identifies the Title bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.PinchGestureRecognizer">
            <summary>Recognizer for pinch gestures.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PinchGestureRecognizer">
            <summary>Constructs a new pinch gesture recognizer.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.PinchGestureRecognizer.PinchUpdated">
            <summary>Event that is raised when a pinch gesture updates.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PinchGestureUpdatedEventArgs">
            <summary>Event arguments for the <see cref="E:Xamarin.Forms.PinchGestureRecognizer.PinchUpdated" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PinchGestureUpdatedEventArgs(Xamarin.Forms.GestureStatus)">
            <param name="status">To be added.</param>
            <summary>Constructs a new <see cref="T:Xamarin.Forms.PinchGestureUpdatedEventArgs" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PinchGestureUpdatedEventArgs(Xamarin.Forms.GestureStatus,System.Double,Xamarin.Forms.Point)">
            <param name="status">Whether the gesture is starting, running, or has ended.</param>
            <param name="scale">The current scale of the pinch gesture.</param>
            <param name="origin">The updated origin of the pinch gesture.</param>
            <summary>Constructs a new <see cref="T:Xamarin.Forms.PinchGestureUpdatedEventArgs" /> object with the specified values.</summary>
            <remarks>
                <para>The origin of the pinch is the center of the pinch gesture, and changes if the user translates their pinch while they scale. Application developers may want to store the pinch origin when the gesture begins and use it for all scaling operations for that gesture.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.PinchGestureUpdatedEventArgs.Scale">
            <summary>The relative size of the user's pinch gesture.</summary>
            <value>The distance between the user's digits, divided by the initial distance between the user's digits in the pinch gesture.</value>
            <remarks>
                <para>The initial value of the <see cref="P:Xamarin.Forms.PinchGestureUpdatedEventArgs.Scale" /> property for each new pinch gesture is <c>1.0</c>.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.PinchGestureUpdatedEventArgs.ScaleOrigin">
            <summary>The updated origin of the pinch gesture.</summary>
            <value>The midpoint of the pinch gesture.</value>
            <remarks>
                <para>The origin of the pinch is the center of the pinch gesture, and changes if the user translates their pinch while they scale. Application developers may want to store the pinch origin when the gesture begins and use it for all scaling operations for that gesture.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.PinchGestureUpdatedEventArgs.Status">
            <summary>Whether the gesture started, is running, or has finished.</summary>
            <value>Whether the gesture started, is running, or has finished.</value>
            <remarks>
                <para>The origin of the pinch, <see cref="P:Xamarin.Forms.PinchGestureUpdatedEventArgs.ScaleOrigin" />, is the center of the pinch gesture, and changes if the user translates their pinch while they scale. Application developers may want to store the pinch origin when the gesture begins and use it for all scaling operations for that gesture.</para>
                <para>The initial value of the <see cref="P:Xamarin.Forms.PinchGestureUpdatedEventArgs.Scale" /> property for each new pinch gesture is <c>1.0</c>.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.PlatformEffect`2">
            <typeparam name="TContainer">To be added.</typeparam>
            <typeparam name="TControl">To be added.</typeparam>
            <summary>Base class for platform-specific effect classes.</summary>
            <remarks>
                <para>App developers derive from the
        <list type="bullet"><item><term><c>Xamarin.Forms.Platform.Android.PlatformEffect</c>,</term></item><item><term><c>Xamarin.Forms.Platform.iOS.PlatformEffect</c>,</term></item><item><term><c>Xamarin.Forms.Platform.UWP.PlatformEffect</c></term></item><item><term><c>Xamarin.Forms.Platform.WinPhone.PlatformEffect</c>, or</term></item><item><term><c>Xamarin.Forms.Platform.WinRT.PlatformEffect,</c></term></item></list>
            classes to implement effects on the respective platforms.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.PlatformEffect`2">
            <summary>Creates a new platform-specific effect with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PlatformEffect`2.Container">
            <summary>Returns the container for the platform-specific effect.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PlatformEffect`2.Control">
            <summary>Returns the control for the platform-specific effect.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.PlatformEffect`2.OnElementPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <param name="args">The arguments for the property changed event.</param>
            <summary>Method that is called when a element property has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Point">
            <summary>Struct defining a 2-D point as a pair of doubles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Point(Xamarin.Forms.Size)">
            <param name="sz">
                <see cref="T:Xamarin.Forms.Size" /> that specifies a <see cref="T:Xamarin.Forms.Point" /> that has the coordinates (<see cref="P:Xamarin.Forms.Size.width" />, <see cref="P:Xamarin.Forms.Size.height" />).</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Point" /> object that has coordinates that are specified by the width and height of <paramref name="sz" />, in that order.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Point(System.Double,System.Double)">
            <param name="x">The horizontal coordinate.</param>
            <param name="y">The vertical coordinate.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Point" /> object that represents the point (<paramref name="x" />,<paramref name="y" />).</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Distance(Xamarin.Forms.Point)">
            <param name="other">The <see cref="T:Xamarin.Forms.Point" /> to which the distance is calculated.</param>
            <summary>Calculates the distance between two points.</summary>
            <returns>The distance between <c>this</c> and the <paramref name="other" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Equals(System.Object)">
            <param name="o">Another <see cref="T:Xamarin.Forms.Point" />.</param>
            <summary>Returns <see langword="true" /> if the X and Y values of this are exactly equal to those in the argument.</summary>
            <returns>
                <see langword="true" /> if the X and Y values are equal to those in <paramref name="o" />. Returns <see langword="false" /> if <paramref name="o" /> is not a <see cref="T:Xamarin.Forms.Point" />.</returns>
            <remarks>
                <para>The <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> values of the <see cref="T:Xamarin.Forms.Point" /> are stored as <see langword="double" />s. Developers should be aware of the precision limits and issues that can arise when comparing floating-point values. In some circumstances, developers should consider the possibility of measuring approximate equality using the (considerably slower) <see cref="M:Xamarin.Forms.Point.Distance" /> method.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.GetHashCode">
            <summary>Returns a hash value for the <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>A value intended for efficient insertion and lookup in hashtable-based data structures.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Point.IsEmpty">
            <summary>Whether both X and Y are 0.</summary>
            <value>
                <see langword="true" /> if both <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> are 0.0.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Offset(System.Double,System.Double)">
            <param name="dx">The amount to add along the X axis.</param>
            <param name="dy">The amount to add along the Y axis.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> that translates the current <see cref="T:Xamarin.Forms.Point" /> by <paramref name="dx" /> and <paramref name="dy" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> at <c>[this.X + dx, this.Y + dy]</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Addition(Xamarin.Forms.Point,Xamarin.Forms.Size)">
            <param name="pt">The <see cref="T:Xamarin.Forms.Point" /> to which <paramref name="sz" /> is being added.</param>
            <param name="sz">The values to add to <paramref name="pt" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> by adding a <see cref="T:Xamarin.Forms.Size" /> to a <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> at <c>[pt.X + sz.Width, pt.Y + sz.Height]</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Equality(Xamarin.Forms.Point,Xamarin.Forms.Point)">
            <param name="pt_a">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <param name="pt_b">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <summary>Whether the two <see cref="T:Xamarin.Forms.Point" />s are equal.</summary>
            <returns>
                <see langword="true" /> if the two <see cref="T:Xamarin.Forms.Point" />s have equal values.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Explicit(Xamarin.Forms.Point)~Xamarin.Forms.Size">
            <param name="pt">The <see cref="T:Xamarin.Forms.Point" /> to be translated as a <see cref="T:Xamarin.Forms.Size" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> and equivalent to the <paramref name="pt" />'s <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> properties.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Size" /> based on the <paramref name="pt" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Inequality(Xamarin.Forms.Point,Xamarin.Forms.Point)">
            <param name="pt_a">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <param name="pt_b">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <summary>Whether two points are not equal.</summary>
            <returns>
                <see langword="true" /> if <paramref name="pt_a" /> and <paramref name="pt_b" /> do not have equivalent X and Y values.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Subtraction(Xamarin.Forms.Point,Xamarin.Forms.Size)">
            <param name="pt">The <see cref="T:Xamarin.Forms.Point" /> from which <paramref name="sz" /> is to be subtracted.</param>
            <param name="sz">The <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> will be subtracted from <paramref name="pt" />'s <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> by subtracting a <see cref="T:Xamarin.Forms.Size" /> from a <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> at <c>[pt.X - sz.Width, pt.Y - sz.Height]</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Round">
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> whose <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> have been rounded to the nearest integral value.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> whose <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> have been rounded to the nearest integral value, per the behavior of Math.Round(Double).</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.ToString">
            <summary>A human-readable representation of the <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>The string is formatted as "{{X={0} Y={1}}}".</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Point.X">
            <summary>Location along the horizontal axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Point.Y">
            <summary>Location along the vertical axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Point.Zero">
            <summary>The <see cref="T:Xamarin.Forms.Point" /> at {0,0}.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PointTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from a string to a <see cref="T:Xamarin.Forms.Point" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PointTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.PointTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.PointTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.PointTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.Point" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.PointTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Point" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.PointTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a point for a valid point description.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ProgressBar">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that displays progress.</summary>
            <remarks>
                <para>The following example shows the usage of a ProgressBar.</para>
                <example>
                    <code lang="C#"><![CDATA[

//initial progress is 20%
var progressBar = new ProgressBar {
  Progress = .2,
};

// animate the progression to 80%, in 250ms
await progressBar.ProgressTo (.8, 250, Easing.Linear);

Debug.WriteLine ("Animation completed");
]]></code>
                </example>
                <para>
                    <img href="ProgressBar.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.ProgressBar" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Progress</term>
                        <description>
                            <para>A decimal value between 0 and 1, inclusive, that specifies the fraction of the bar that is colored.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ProgressBar">
            <summary>Initializes a new instance of the ProgressBar class</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ProgressBar.Progress">
            <summary>Gets or sets the progress value. This is s bindable property.</summary>
            <value>Gets or sets a value that specifies the fraction of the bar that is colored.</value>
            <remarks>Values less than 0 or larger than 1 will be clamped to the range [0-1].</remarks>
        </member>
        <member name="F:Xamarin.Forms.ProgressBar.ProgressProperty">
            <summary>Identifies the Progress bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ProgressBar.ProgressTo(System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="value">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Animate the Progress property to value.</summary>
            <returns>A Task&lt;bool&gt; you can await on.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.PropertyChangingEventArgs">
            <summary>Event arguments for the <see cref="T:Xamarin.Forms.PropertyChangingEventHandler" /> delegate.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PropertyChangingEventArgs(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.PropertyChangingEventArgs" /> object that indicates that <paramref name="propertyName" /> is changing.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PropertyChangingEventArgs.PropertyName">
            <summary>Gets the name of the property that is changing.</summary>
            <value>The name of the property that is changing.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PropertyChangingEventHandler">
            <param name="sender">To be added.</param>
            <param name="e">To be added.</param>
            <summary>Delegate for the <see cref="E:Xamarin.Forms.BindableObject.PropertyChanging" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PropertyCondition">
            <summary>Class that represents a value comparison with a property.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.PropertyCondition" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Property</term>
                        <description>
                            <para>The name of the property to check.</para>
                        </description>
                    </item>
                    <item>
                        <term>Value</term>
                        <description>
                            <para>The value for which the condition is met.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.PropertyCondition">
            <summary>Initializes a new <see cref="T:Xamarin.Forms.PropertyCondition" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PropertyCondition.Property">
            <summary>Gets or sets the property against which the <see cref="P:Xamarin.Forms.PropertyCondition.Value" /> property will be compared.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PropertyCondition.Value">
            <summary>The binding value that satisfies the condition.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.PropertyCondition.Xamarin#Forms#Xaml#IValueProvider#ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>Provides a value by using the supplied service provider.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Rectangle">
            <summary>Struct defining a rectangle, using doubles.</summary>
            <remarks>
                <para>Application developers should be aware of the limits of floating-point representations, specifically the possibility of incorrect comparisons and equality checks for values with small differences. David Goldberg's paper <format type="text/html"><a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></format> describes the issues excellently. </para>
                <block type="note">Where Xamarin.Forms supports XAML for <see cref="T:Xamarin.Forms.Rectangle" /> structures, app devs can represent the rectangle as a comma-separated list of the X-coordinate, Y-Coordinate, Width, and Height.</block>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Rectangle(Xamarin.Forms.Point,Xamarin.Forms.Size)">
            <param name="loc">To be added.</param>
            <param name="sz">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Rectangle" /> object with its top left corner at <paramref name="loc" /> with a height and width that are specified by <paramref name="sz" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Rectangle(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Rectangle" /> object with its top left corner at (<paramref name="x" />, <paramref name="y" />) and  <paramref name="width" /> wide and <paramref name="height" /> tall.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Bottom">
            <summary>The bottom of the <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <value>To be added.</value>
            <remarks>
                <para>Modifying this value also modifies the <see cref="P:Xamarin.Forms.Rectangle.Height" /> property.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Center">
            <summary>The <see cref="T:Xamarin.Forms.Point" /> halfway between <see cref="P:Xamarin.Forms.Rectangle.Left" /> and <see cref="P:Xamarin.Forms.Rectangle.Right" />, <see cref="P:Xamarin.Forms.Rectangle.Top" /> and <see cref="P:Xamarin.Forms.Rectangle.Bottom" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Contains(Xamarin.Forms.Point)">
            <param name="pt">The  <see cref="T:Xamarin.Forms.Point" /> being checked for containment.</param>
            <summary>Whether the <paramref name="pt" /> is within, or along the periphery, of this <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>
                <see langword="true" /> if <paramref name="pt" /> is within, or along the periphery, of <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Contains(Xamarin.Forms.Rectangle)">
            <param name="rect">The <see cref="T:Xamarin.Forms.Rectangle" /> being checked for containment.</param>
            <summary>Whether <paramref name="rect" /> is entirely within, or along the periphery, of this <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>
                <see langword="true" /> if the borders of <paramref name="rect" /> are entirely within, or along the periphery, of <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Contains(System.Double,System.Double)">
            <param name="x">The X location of the point being checked.</param>
            <param name="y">The Y location of the point being checked.</param>
            <summary>Whether the point described by <paramref name="x" /> and <paramref name="y" /> is within, or along the periphery of, this <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>
                <see langword="true" /> if  the point described by <paramref name="x" /> and <paramref name="y" /> is within, or along the periphery of, <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Equals(System.Object)">
            <param name="obj">An Object to compare to <c>this</c>.</param>
            <summary>Whether an <see cref="T:System.Object" /> is a <see cref="T:Xamarin.Forms.Rectangle" /> and has exactly the same values as <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>
                <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:Xamarin.Forms.Rectangle" /> that has exactly the same values as <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Equals(Xamarin.Forms.Rectangle)">
            <param name="other">The <see cref="T:Xamarin.Forms.Rectangle" /> being compared to <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</param>
            <summary>Whether a <see cref="T:Xamarin.Forms.Rectangle" /> has exactly the same values as <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>
                <see langword="true" /> if <paramref name="other" /> has exactly the same values as <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>Factory method to create a <see cref="T:Xamarin.Forms.Rectangle" /> from <paramref name="left" />, <paramref name="top" />, <paramref name="right" />, and <paramref name="bottom" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose values are equal to the arguments.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.GetHashCode">
            <summary>The hashcode for the <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>A value optimized for fast insertion and retrieval in a hash-based data structure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Height">
            <summary>Extent along the Y axis.</summary>
            <value>To be added.</value>
            <remarks>
                <para>Modifying this value modifies the <see cref="P:Xamarin.Forms.Rectangle.Bottom" /> property.</para>.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Inflate(Xamarin.Forms.Size)">
            <param name="sz">Values to inflate all the borders.</param>
            <summary>Creates a <see cref="T:Xamarin.Forms.Rectangle" /> whose borders are inflated in every direction.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose <see cref="P:Xamarin.Forms.Rectangle.Left" /> and <see cref="P:Xamarin.Forms.Rectangle.Right" /> are inflated by <paramref name="sz" />'s <see cref="P:Xamarin.Forms.Size.Width" /> and whose <see cref="P:Xamarin.Forms.Rectangle.Top" /> and <see cref="P:Xamarin.Forms.Rectangle.Bottom" /> are inflated by <paramref name="sz" />'s <see cref="P:Xamarin.Forms.Size.Height" />.</returns>
            <remarks>
                <para>Application developers should note that since the inflation occurs in every direction, the returned <see cref="T:Xamarin.Forms.Rectangle" /> is larger in each dimension by twice <paramref name="sz" />.</para>
                <example>
                    <code lang="C#"><![CDATA[
var rect = new Rectangle (10, 10, 5, 5);
var larger = rect.Inflate (new Size (1, 1));
Assert.AreEqual (larger, new Rectangle (9, 9, 7, 7));
]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Inflate(System.Double,System.Double)">
            <param name="width">Value to shift <see cref="P:Xamarin.Forms.Rectangle.Left" /> to the left and <see cref="P:Xamarin.Forms.Rectangle.Right" /> to the right.</param>
            <param name="height">Value to shift <see cref="P:Xamarin.Forms.Rectangle.Top" /> upward and <see cref="P:Xamarin.Forms.Rectangle.Bottom" /> downward.</param>
            <summary>Creates a <see cref="T:Xamarin.Forms.Rectangle" /> whose borders are inflated in every direction.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose <see cref="P:Xamarin.Forms.Rectangle.Left" /> and <see cref="P:Xamarin.Forms.Rectangle.Right" /> are inflated by <paramref name="width" /> and whose <see cref="P:Xamarin.Forms.Rectangle.Top" /> and <see cref="P:Xamarin.Forms.Rectangle.Bottom" /> are inflated by <paramref name="height" />.</returns>
            <remarks>
                <para>Application developers should note that since the inflation occurs in every direction, the returned <see cref="T:Xamarin.Forms.Rectangle" /> is larger in X by twice <paramref name="width" /> and larger in Y by twice <paramref name="height" />.</para>
                <example>
                    <code lang="C#"><![CDATA[
var rect = new Rectangle (10, 10, 5, 5);
var larger = rect.Inflate (1,1);
Assert.AreEqual (larger, new Rectangle (9, 9, 7, 7));
]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Intersect(Xamarin.Forms.Rectangle)">
            <param name="r">A <see cref="T:Xamarin.Forms.Rectangle" /><c>this</c> will be intersected with.</param>
            <summary>A new <see cref="T:Xamarin.Forms.Rectangle" /> that is the intersection of <c>this</c> and <paramref name="r" />.</summary>
            <returns>Returns a new <see cref="T:Xamarin.Forms.Rectangle" /> that is the intersection of <c>this</c><see cref="T:Xamarin.Forms.Rectangle" /> and <paramref name="r" />, or <see cref="P:Xamarin.Forms.Rectangle.Zero" /> if there is no intersection.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Intersect(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">A <see cref="T:Xamarin.Forms.Rectangle" /> being intersected.</param>
            <param name="r2">A <see cref="T:Xamarin.Forms.Rectangle" /> being intersected.</param>
            <summary>A new <see cref="T:Xamarin.Forms.Rectangle" /> that is the intersection of <paramref name="r1" /> and <paramref name="r2" />.</summary>
            <returns>Returns a new <see cref="T:Xamarin.Forms.Rectangle" /> that is the intersection of <paramref name="r1" /> and <paramref name="r2" />, or <see cref="P:Xamarin.Forms.Rectangle.Zero" /> if there is no intersection.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.IntersectsWith(Xamarin.Forms.Rectangle)">
            <param name="r">The <see cref="T:Xamarin.Forms.Rectangle" /> being intersected.</param>
            <summary>Whether <c>this</c><see cref="T:Xamarin.Forms.Rectangle" /> intersects <paramref name="r" />.</summary>
            <returns>
                <see langword="true" /> if <c>this</c><see cref="T:Xamarin.Forms.Rectangle" /> intersects <paramref name="r" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.IsEmpty">
            <summary>Whether <c>this</c><see cref="T:Xamarin.Forms.Rectangle" /> has either <see cref="P:Xamarin.Forms.Rectangle.Height" /> or <see cref="P:Xamarin.Forms.Rectangle.Width" /> less than or equal to 0.</summary>
            <value>
                <see langword="true" /> if either <see cref="P:Xamarin.Forms.Rectangle.Width" /> or <see cref="P:Xamarin.Forms.Rectangle.Height" /> is less than or equal to 0.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Left">
            <summary>The position of the <see cref="T:Xamarin.Forms.Rectangle" /> on the X axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Location">
            <summary>The <see cref="T:Xamarin.Forms.Point" /> defined by <see cref="P:Xamarin.Forms.Rectangle.Left" /> and <see cref="P:Xamarin.Forms.Rectangle.Top" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Offset(Xamarin.Forms.Point)">
            <param name="dr">A <see cref="T:Xamarin.Forms.Point" /> whose X and Y values should be added to <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />'s <see cref="P:Xamarin.Forms.Rectangle.Location" />.</param>
            <summary>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose <see cref="P:Xamarin.Forms.Rectangle.Location" /> is offset by <paramref name="dr" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose <see cref="P:Xamarin.Forms.Rectangle.Location" /> is equal to <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />'s <see cref="P:Xamarin.Forms.Rectangle.Location" /> translated by <paramref name="dr" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Offset(System.Double,System.Double)">
            <param name="dx">Change along the  X axis.</param>
            <param name="dy">Change along the Y axis.</param>
            <summary>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose <see cref="P:Xamarin.Forms.Rectangle.Location" /> is offset by <paramref name="dx" /> and <paramref name="dy" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose <see cref="P:Xamarin.Forms.Rectangle.Location" /> is equal to <c>this</c><see cref="T:Xamarin.Forms.Rectangle" />'s <see cref="P:Xamarin.Forms.Rectangle.Location" /> translated by <paramref name="dx" /> and <paramref name="dy" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.op_Equality(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">A <see cref="T:Xamarin.Forms.Rectangle" /> being compared.</param>
            <param name="r2">A <see cref="T:Xamarin.Forms.Rectangle" /> being compared.</param>
            <summary>Whether two <see cref="T:Xamarin.Forms.Rectangle" />s have equal values.</summary>
            <returns>
                <see langword="true" /> if both the <see cref="P:Xamarin.Forms.Rectangle.Position" /> and <see cref="P:Xamarin.Forms.Rectangle.Size" /> of the two rectangles are equivalent.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.op_Inequality(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">A <see cref="T:Xamarin.Forms.Rectangle" /> being compared.</param>
            <param name="r2">A <see cref="T:Xamarin.Forms.Rectangle" /> being compared.</param>
            <summary>Whether two <see cref="T:Xamarin.Forms.Rectangle" />s have unequal values.</summary>
            <returns>
                <see langword="true" /> if either the <see cref="P:Xamarin.Forms.Rectangle.Position" /> or <see cref="P:Xamarin.Forms.Rectangle.Size" /> of the two rectangles have differences.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Right">
            <summary>The furthest extent along the X axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Round">
            <summary>Returns a new <see cref="T:Xamarin.Forms.Rectangle" /> whose values have been rounded to their nearest integral value.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose <see cref="P:Xamarin.Forms.Rectangle.X" />, <see cref="P:Xamarin.Forms.Rectangle.Y" />, <see cref="P:Xamarin.Forms.Rectangle.Width" />, and <see cref="P:Xamarin.Forms.Rectangle.Height" /> have been rounded to their nearest integral values.</returns>
            <remarks>
                <para>The rounding is applied to each property independently.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Size">
            <summary>The extent of the <see cref="T:Xamarin.Forms.Rectangle" /> along its X and Y axes.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Top">
            <summary>The top of the <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.ToString">
            <summary>A human-readable description of the <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <returns>The format is "{X={0} Y={1} Width={2} Height={3}}".</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Union(Xamarin.Forms.Rectangle)">
            <param name="r">The <see cref="T:Xamarin.Forms.Rectangle" /> whose union is being calculated.</param>
            <summary>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose bounds cover the union of <c>this</c><see cref="T:Xamarin.Forms.Rectangle" /> and <paramref name="r" />.</summary>
            <returns>Returns a new <see cref="T:Xamarin.Forms.Rectangle" /> whose bounds cover the union of <c>this</c><see cref="T:Xamarin.Forms.Rectangle" /> and <paramref name="r" />. </returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Union(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">A <see cref="T:Xamarin.Forms.Rectangle" /> whose union is being calculated.</param>
            <param name="r2">A <see cref="T:Xamarin.Forms.Rectangle" /> whose union is being calculated.</param>
            <summary>A new <see cref="T:Xamarin.Forms.Rectangle" /> whose bounds cover the union of <paramref name="r1" /> and <paramref name="r2" />.</summary>
            <returns>Returns a new <see cref="T:Xamarin.Forms.Rectangle" /> whose bounds cover the union of <paramref name="r1" /> and <paramref name="r2" />. </returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Width">
            <summary>The extent of this <see cref="T:Xamarin.Forms.Rectangle" /> along the X axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.X">
            <summary>The position of this <see cref="T:Xamarin.Forms.Rectangle" /> on the X axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Y">
            <summary>The position of this <see cref="T:Xamarin.Forms.Rectangle" /> on the Y axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Rectangle.Zero">
            <summary>The <see cref="T:Xamarin.Forms.Rectangle" /> at {0,0} whose Size is {0,0}.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RectangleTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts a string to a <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RectangleTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.RectangleTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RectangleTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.RectangleTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.Rectangle" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RectangleTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Rectangle" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RectangleTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Rectangle" /> for a comma-separated list of <c>double</c> values.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RelativeLayout">
            <summary>A <see cref="T:Xamarin.Forms.Layout`1" /> that uses <see cref="T:Xamarin.Forms.Constraint" />s to layout its children.</summary>
            <remarks>
                <para>The <c>RelativeLayoutExample</c> class in the following code extends the <see cref="T:Xamarin.Forms.ContentPage" /> class by adding a <see cref="T:Xamarin.Forms.RelativeLayout" /> that contains a heading and another label. Both labels are positioned relative to the <see cref="T:Xamarin.Forms.ContentPage" />:</para>
                <example>
                    <code lang="C#"><![CDATA[
public class RelativeLayoutExample : ContentPage
{
    public RelativeLayoutExample ()
    {
        this.Padding = new Thickness (10, Device.OnPlatform (20, 0, 0), 10, 5);

        Label heading = new Label {
            Text = "RelativeLayout Example",
            TextColor = Color.Red,
        };

        Label relativelyPositioned = new Label {
            Text = "Positioned relative to my parent."
        };

        RelativeLayout relativeLayout = new RelativeLayout ();

        relativeLayout.Children.Add (heading, Constraint.RelativeToParent ((parent) => {
            return 0;
        }));

        relativeLayout.Children.Add (relativelyPositioned,
            Constraint.RelativeToParent ((parent) => {
                return parent.Width / 3;
            }),
            Constraint.RelativeToParent ((parent) => {
                return parent.Height / 2;
            }));
        this.Content = relativeLayout;
    }
}
]]></code>
                </example>
                <para>For a more complete example that exercises many more of the layout options for the <see cref="T:Xamarin.Forms.RelativeLayout" /> class, see the FormsGallery sample that can be found on the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">Sample Applications</a></format> page.</para>
                <para>XAML for Xamarin.Forms supports the following attached properties for the <see cref="T:Xamarin.Forms.RelativeLayout" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>AttachedProperty</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>XConstraint</term>
                        <description>
                            <para>XAML markup extension for a constraint expression. See <see cref="T:Xamarin.Forms.ConstraintExpression" />.</para>
                        </description>
                    </item>
                    <item>
                        <term>YConstraint</term>
                        <description>
                            <para>XAML markup extension for a constraint expression. See <see cref="T:Xamarin.Forms.ConstraintExpression" />.</para>
                        </description>
                    </item>
                    <item>
                        <term>WidthConstraint</term>
                        <description>
                            <para>XAML markup extension for a constraint expression. See <see cref="T:Xamarin.Forms.ConstraintExpression" />.</para>
                        </description>
                    </item>
                    <item>
                        <term>HeightConstraint</term>
                        <description>
                            <para>XAML markup extension for a constraint expression. See <see cref="T:Xamarin.Forms.ConstraintExpression" />.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.RelativeLayout">
            <summary>Creates a new <see cref="T:Xamarin.Forms.RelativeLayout" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.BoundsConstraintProperty">
            <summary>Identifies the bindable property associated with <see cref="M:Xamarin.Forms.RelativeLayout.GetBoundsConstraint" />/<see cref="M:Xamarin.Forms.RelativeLayout.SetBoundsConstraint" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.RelativeLayout.Children">
            <summary>List of <see cref="T:Xamarin.Forms.View" />s that are children of this <see cref="T:Xamarin.Forms.RelativeLayout" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetBoundsConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the bounds constraint is being requested.</param>
            <summary>Returns the bounds constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.BoundsConstraint" /> of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetHeightConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the height constraint is being requested.</param>
            <summary>Returns the height constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the height of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetWidthConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the width constraint is being requested.</param>
            <summary>Returns the width constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the width of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetXConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the X constraint is being requested.</param>
            <summary>Returns the X constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the X position of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetYConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the Y constraint is being requested.</param>
            <summary>Returns the Y constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the Y position of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.HeightConstraintProperty">
            <summary>Identifies the bindable property associated with the <see cref="M:Xamarin.Forms.RelativeLayout.GetHeightConstraint" /> / <see cref="M:Xamarin.Forms.RelativeLayout.SetHeightConstraint" /> methods.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">The left-side bound of the rectangle into which the children will be laid out.</param>
            <param name="y">The top bound of the rectangle into which the children will be laid out.</param>
            <param name="width">The width of the rectangle into which the children will be laid out.</param>
            <param name="height">The height of the rectangle into which the children will be laid out.</param>
            <summary>Lays out the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> in the specified rectangle.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.OnAdded(Xamarin.Forms.View)">
            <param name="view">The <see cref="T:Xamarin.Forms.View" /> added to the <see cref="P:Xamarin.Forms.RelativeLayout.Children" />.</param>
            <summary>Called when a <see cref="T:Xamarin.Forms.View" /> is added to the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> collection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.OnRemoved(Xamarin.Forms.View)">
            <param name="view">The <see cref="T:Xamarin.Forms.View" /> removed from the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> collection.</param>
            <summary>Called when a <see cref="T:Xamarin.Forms.View" /> is removed from the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> collection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Called when this <see cref="T:Xamarin.Forms.RelativeLayout" /> has received a size request.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.SetBoundsConstraint(Xamarin.Forms.BindableObject,Xamarin.Forms.BoundsConstraint)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> to which the constraint will be applied.</param>
            <param name="value">The <see cref="T:Xamarin.Forms.BoundsConstraint" /> on the <paramref name="bindable" />.</param>
            <summary>Sets <paramref name="value" /> as a constraint on the bounds of <paramref name="bindable" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.WidthConstraintProperty">
            <summary>Identifies the width constraint.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.XConstraintProperty">
            <summary>Identifies the constraint on X.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.YConstraintProperty">
            <summary>Identifies the constraint on Y.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RelativeLayout.IRelativeList`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xamarin.Forms.View" />s used by a <see cref="T:Xamarin.Forms.RelativeLayout" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.IRelativeList`1.Add(T,System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.Rectangle}})">
            <param name="view">To be added.</param>
            <param name="bounds">To be added.</param>
            <summary>Constrains <paramref name="view" /> to <paramref name="bounds" /> and adds it to the layout.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.IRelativeList`1.Add(T,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}})">
            <param name="view">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Constrains <paramref name="view" /> to the rectangle that is defined by <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" />, and adds it to the layout.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.IRelativeList`1.Add(T,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint)">
            <param name="view">To be added.</param>
            <param name="xConstraint">To be added.</param>
            <param name="yConstraint">To be added.</param>
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Constrains <paramref name="view" /> by <paramref name="xConstraint" />, <paramref name="yConstraint" />, <paramref name="widthConstraint" />, and <paramref name="heightConstraint" />, and adds it to the layout.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RenderWithAttribute">
            <summary>Associate view with renderer.</summary>
            <remarks>Lazily assoicate a view with it's renderer.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RenderWithAttribute(System.Type)">
            <param name="type">The view to render.</param>
            <summary>The view to render.</summary>
            <remarks>The view to render.</remarks>
        </member>
        <member name="P:Xamarin.Forms.RenderWithAttribute.Type">
            <summary>The renderer for this view.</summary>
            <value>The renderer for this view.</value>
            <remarks>The renderer for this view.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ResolutionGroupNameAttribute">
            <summary>Attribute that identifies a group name, typically a company name or reversed company URL, that provides a scope for effect names.</summary>
            <remarks>
                <para>Developers must supply a name to <see cref="T:Xamarin.Forms.ExportEffectAttribute" /> that is unique over the scope of  the <param name="name" /> that they supply to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />. The <see cref="T:Xamarin.Forms.Effect.Resolve" /> method takes a string that is the concatenation of <paramref name="name" /> (the resolution group name), <c>'.'</c>, and the unique name that was supplied to <see cref="T:Xamarin.Forms.ExportEffectAttribute" />, and returns the specified effect.</para>
                <example>
                    <para>For example, with the declarations:</para>
                    <code lang="c#"><![CDATA[
        [assembly: ResolutionGroupName ("com.YourCompany")]
        [assembly: ExportEffect (typeof (ShadowEffect), "ShadowEffect")]]]></code>
                    <para>Then the code below will add the effect to a button:</para>
                    <code lang="c#"><![CDATA[
        [var button = new Button { Text = "I have a shadow" };
button.Effects.Add (Effect.Resolve ("com.YourCompany.ShadowEffect"));]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ResolutionGroupNameAttribute(System.String)">
            <param name="name">A name, such as a company name or reversed company URL, that helps to uniquely identify effects.</param>
            <summary>Creates a new resolution group name attribute.</summary>
            <remarks>
                <para>Developers must supply a name to <see cref="T:Xamarin.Forms.ExportEffectAttribute" /> that is unique over the scope of  the <param name="name" /> that they supply to <see cref="T:Xamarin.Forms.ResolutionGroupNameAttribute" />. The <see cref="T:Xamarin.Forms.Effect.Resolve" /> method takes a string that is the concatenation of <paramref name="name" /> (the resolution group name), <c>'.'</c>, and the unique name that was supplied to <see cref="T:Xamarin.Forms.ExportEffectAttribute" />, and returns the specified effect.</para>
                <example>
                    <para>For example, with the declarations:</para>
                    <code lang="c#"><![CDATA[
            [assembly: ResolutionGroupName ("com.YourCompany")]
            [assembly: ExportEffect (typeof (ShadowEffect), "ShadowEffect")]]]></code>
                    <para>Then the code below will add the effect to a button:</para>
                    <code lang="c#"><![CDATA[
            [var button = new Button { Text = "I have a shadow" };
    button.Effects.Add (Effect.Resolve ("com.YourCompany.ShadowEffect"));]]></code>
                </example>
            </remarks>
            <altmember cref="T:Xamarin.Forms.ExportEffectAttribute" />
        </member>
        <member name="T:Xamarin.Forms.ResourceDictionary">
            <summary>An IDictionary that maps identifier strings to arbitrary resource objects.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ResourceDictionary">
            <summary>Creates a new empty <see cref="T:Xamarin.Forms.ResourceDictionary" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Add(Xamarin.Forms.Style)">
            <param name="style">To be added.</param>
            <summary>
                <para>Add an implicit Style to the ResourceDictionary. Implicit Styles are applied to all VisualElements matching TargetType in the descendants of this ResourceDictionary owner, unless a Style is explicitely applied to the Element.</para>
                <para />
                <para>Implicit Styles are added to a ResourceDictionary in XAML by not specifying an x:Key for the Element.</para>
            </summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Add(System.String,System.Object)">
            <param name="key">The identifier to be used to retrieve the <paramref name="value" />.</param>
            <param name="value">The <see cref="T:System.Object" /> associated with the <paramref name="key" />.</param>
            <summary>Adds <paramref name="key" /> and <paramref name="value" /> to the <see cref="T:Xamarin.Forms.ResourceDictionary" /> as a key-value pair.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Clear">
            <summary>Empties the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.ContainsKey(System.String)">
            <param name="key">The identifier being searched for.</param>
            <summary>Whether the <see cref="T:Xamarin.Forms.ResourceDictionary" /> contains a key-value pair identified by <paramref name="key" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Count">
            <summary>The number of entries in the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.GetEnumerator">
            <summary>Returns a <see cref="T:System.Collections.Generic.IEnumerator`1" /> of the <see cref="T:Xamarin.Forms.ResourceDictionary" />'s <see cref="T:System.Collections.Generic.KeyValuePair`1" />s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Item(System.String)">
            <param name="index">The identifier of the desired object.</param>
            <summary>Retrieves the <see cref="T:System.Object" /> value associated with the key <paramref name="index" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Keys">
            <summary>The collection of identifier <see langword="string" />s that are keys in the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.MergedWith">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Remove(System.String)">
            <param name="key">The identifier of the key-value pair to be removed.</param>
            <summary>Removes the key and value identified by <paramref name="key" /> from the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <returns>
                <see langword="true" /> if the key existed and the removal was successful.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">To be added.</param>
            <summary>Adds an item to the collection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">To be added.</param>
            <summary>Returns a value that indicates whether the dictionary contains the value in <paramref name="item" />, indexed by the key in <paramref name="item" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>Copies the values in the dictionary to <paramref name="array" />, starting at position <paramref name="arrayIndex" /> in <paramref name="array" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <summary>Gets a value that indicates whether the resource dictionary is read-only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">To be added.</param>
            <summary>Removes the value in <paramref name="item" />, indexed by the key in <paramref name="item" />, from the dictionary, if present.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns a <see cref="T:System.Collections.IEnumerator" /> of the <see cref="T:Xamarin.Forms.ResourceDictionary" />'s <see cref="T:System.Collections.Generic.KeyValuePair`1" />s.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> of the <see cref="T:Xamarin.Forms.ResourceDictionary" />'s <see cref="T:System.Collections.Generic.KeyValuePair`1" />s.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.TryGetValue(System.String,System.Object@)">
            <param name="key">The identifier of the object to be retrieved.</param>
            <param name="value">An <see langword="out" /> reference to the object being retrieved, or it's default value.</param>
            <summary>Retrieves the object specified by <paramref name="key" /> or, if not present, the default value of <see langword="null" />.</summary>
            <returns>The object specified by <paramref name="key" /> or, if not present, the default value of <see langword="null" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Values">
            <summary>Retrieves the values of the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RoutingEffect">
            <summary>Platform-independent effect that wraps an inner effect, which is usually platform-specific.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RoutingEffect(System.String)">
            <param name="effectId">To be added.</param>
            <summary>Creates a new routing effect with the specified <paramref name="effectId" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RoutingEffect.OnAttached">
            <summary>Method that is called after the effect is attached and made valid.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RoutingEffect.OnDetached">
            <summary>Method that is called after the effect is detached and invalidated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RowDefinition">
            <summary>An <see cref="T:Xamarin.Forms.IDefinition" /> that defines properties for a row in a <see cref="T:Xamarin.Forms.Grid" />.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.RowDefinition" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Height</term>
                        <description>
                            <para>"*" or "Auto" to indicate the corresponding <see cref="T:Xamarin.Forms.GridUnitType" /> enumeration values, or a number to indicate an absolute height.</para>
                        </description>
                    </item>
                </list>
                <example>
                    <para>App developers can specify <see cref="T:Xamarin.Forms.GridUnitType" /> values for the <see cref="P:Xamarin.Forms.ColumnDefinition.Height" /> property in XAML. This is typically done inside tags for the <see cref="P:Xamarin.Forms.Grid.RowDefinitions" /> collection property. The following example demonstrates setting three row heights to each of the three valid <see cref="T:Xamarin.Forms.GridUnitType" /> values:</para>
                    <code lang="XAML"><![CDATA[
<Grid.RowDefinitions>
    <RowDefinition Height="Auto" />
    <RowDefinition Height="*" />
    <RowDefinition Height="100" />
</Grid.RowDefinitions>
]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.RowDefinition">
            <summary>Creates a new <see cref="T:Xamarin.Forms.RowDefinition" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.RowDefinition.Height">
            <summary>Gets or sets the height of the row.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RowDefinition.HeightProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.RowDefinition.Height" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.RowDefinition.SizeChanged">
            <summary>Event that is raised when the size of the row is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RowDefinitionCollection">
            <summary>A <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> for <see cref="T:Xamarin.Forms.RowDefinition" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RowDefinitionCollection">
            <summary>Creates a new empty <see cref="T:Xamarin.Forms.RowDefinitionCollection" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ScrolledEventArgs">
            <summary>Arguments for the event that is raised when a window is scrolled.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ScrolledEventArgs(System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Constructs a new <see cref="T:Xamarin.Forms.ScrolledEventArgs" /> object for a scroll to <paramref name="x" /> and <paramref name="y" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrolledEventArgs.ScrollX">
            <summary>The X position of the finished scroll.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrolledEventArgs.ScrollY">
            <summary>The Y position of the finished scroll.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ScrollOrientation">
            <summary>Enumeration specifying vertical or horizontal scrolling directions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ScrollOrientation.Both">
            <summary>Scroll both horizontally and vertically.</summary>
        </member>
        <member name="F:Xamarin.Forms.ScrollOrientation.Horizontal">
            <summary>Scroll Horizontally.</summary>
        </member>
        <member name="F:Xamarin.Forms.ScrollOrientation.Vertical">
            <summary>Scroll vertically.</summary>
        </member>
        <member name="T:Xamarin.Forms.ScrollToMode">
            <summary>Enumerates values that describe how a scroll request is made.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ScrollToMode.Element">
            <summary>Scroll positions are specified by element.</summary>
        </member>
        <member name="F:Xamarin.Forms.ScrollToMode.Position">
            <summary>Scroll positions are specified by a float.</summary>
        </member>
        <member name="T:Xamarin.Forms.ScrollToPosition">
            <summary>Enumerates values that describe a scroll request.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ScrollToPosition.Center">
            <summary>Scroll to the center of a list.</summary>
        </member>
        <member name="F:Xamarin.Forms.ScrollToPosition.End">
            <summary>Scroll to the end of a list.</summary>
        </member>
        <member name="F:Xamarin.Forms.ScrollToPosition.MakeVisible">
            <summary>Scroll to make a specified list item visible.</summary>
        </member>
        <member name="F:Xamarin.Forms.ScrollToPosition.Start">
            <summary>Scroll to the start of a list.</summary>
        </member>
        <member name="T:Xamarin.Forms.ScrollToRequestedEventArgs">
            <summary>Arguments for the event that is raised when a scroll is requested.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollToRequestedEventArgs.Element">
            <summary>An element to scroll to.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollToRequestedEventArgs.Mode">
            <summary>Whether to scroll by element or by position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollToRequestedEventArgs.Position">
            <summary>An enumeration value that describes which part of an element to scroll to.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollToRequestedEventArgs.ScrollX">
            <summary>The X position to scroll to.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollToRequestedEventArgs.ScrollY">
            <summary>The Y position to scroll to.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollToRequestedEventArgs.ShouldAnimate">
            <summary>Gets a value that tells whether the scroll operation should be animated.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ScrollView">
            <summary>An element capable of scrolling if its Content requires.</summary>
            <remarks>
                <para>  The following example shows the creation of a ScrollView with a large <see cref="T:Xamarin.Forms.StackLayout" /> in it.</para>
                <example>
                    <code lang="C#"><![CDATA[
StackLayout stack;
var scrollview = new ScrollView {
  Content = new StackLayout {
    Padding = new Thickness (20),
  },
};

for (var i=0; i<100; i++)
  stack.Children.Add (new Button { Text = "Foo"});
              ]]></code>
                </example>
                <block type="note">Application developers should not nest one <see cref="T:Xamarin.Forms.ScrollView" /> within another. Additionally, they should refrain from nesting them  other elements that can scroll, such as <see cref="T:Xamarin.Forms.WebView" />.</block>
                <para>
                    <img href="ScrollView.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.ScrollView" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Content</term>
                        <description>
                            <para>Markup that specifies a <see cref="T:Xamarin.Forms.View" /> to display in the <see cref="T:Xamarin.Forms.ScrollView" />.</para>
                        </description>
                    </item>
                    <item>
                        <term>Orientation</term>
                        <description>
                            <para>
                                <c>Horizontal</c> or <c>Vertical</c>, to indicate the scroll direction.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ScrollView">
            <summary>Initializes a new instance of the ScrollView class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ScrollView.Content">
            <summary>Gets or sets a <see cref="T:Xamarin.Forms.View" /> to display in the <see cref="T:Xamarin.Forms.ScrollView" />.</summary>
            <value>The <see cref="T:Xamarin.Forms.View" /> that is displayed.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ScrollView.ContentSize">
            <summary>Gets the size of the Content. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Size" /> that represents the size of the content.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ScrollView.ContentSizeProperty">
            <summary>Identifies the ContentSize bindable property.</summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ScrollView.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value that represents the x coordinate of the child region bounding box.</param>
            <param name="y">A value that represents the y coordinate of the child region bounding box.</param>
            <param name="width">A value that represents  the y coordinate of the child region bounding box.</param>
            <param name="height">A value that represents the y coordinate of the child region bounding box.</param>
            <summary>Positions and sizes the content of a ScrollView.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ScrollView.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the element to use.</param>
            <param name="heightConstraint">The available height for the element to use.</param>
            <summary>This method is called during the measure pass of a layout cycle to get the desired size of an element.</summary>
            <returns>
          A <see cref="T:Xamarin.Forms.SizeRequest&gt;" /> which contains the desired size of the element.
        </returns>
            <remarks>The results of this method will be (-1, -1) if the element has not yet been realized with a platform specific backing control. Overriding this method does not require a call to the base class so long as a valid SizeRequest is returned.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollView.Orientation">
            <summary>Gets or sets the scrolling direction of the ScrollView. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ScrollView.OrientationProperty">
            <summary>Identifies the Orientation bindable property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.ScrollView.Scrolled">
            <summary>Event that is raised after a scroll completes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ScrollView.ScrollToAsync(System.Double,System.Double,System.Boolean)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="animated">To be added.</param>
            <summary>Returns a task that scrolls the scroll view to a position asynchronously.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ScrollView.ScrollToAsync(Xamarin.Forms.Element,Xamarin.Forms.ScrollToPosition,System.Boolean)">
            <param name="element">To be added.</param>
            <param name="position">To be added.</param>
            <param name="animated">To be added.</param>
            <summary>Returns a task that scrolls the scroll view to an element asynchronously.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollView.ScrollX">
            <summary>Gets the current X scroll position.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ScrollView.ScrollXProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ScrollView.ScrollX" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ScrollView.ScrollY">
            <summary>Gets the current Y scroll position..</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ScrollView.ScrollYProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ScrollView.ScrollY" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ScrollView.Xamarin#Forms#IScrollViewController#GetScrollPositionForElement(Xamarin.Forms.VisualElement,Xamarin.Forms.ScrollToPosition)">
            <param name="item">To be added.</param>
            <param name="pos">To be added.</param>
            <summary>Internal.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ScrollView.Xamarin#Forms#IScrollViewController#SendScrollFinished">
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ScrollView.Xamarin#Forms#IScrollViewController#SetScrolledPosition(System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Internal.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SearchBar">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that provides a search box.</summary>
            <remarks>
                <para>The following example shows a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[
public class App : Application
{
    Label resultsLabel;
    SearchBar searchBar;
    public App ()
    {
        resultsLabel = new Label {
            Text = "Result will appear here.",
            VerticalOptions = LayoutOptions.FillAndExpand,
            FontSize = 25
        };

        searchBar = new SearchBar {
            Placeholder = "Enter search term",
            SearchCommand = new Command(() => {resultsLabel.Text = "Result: " + searchBar.Text + " is what you asked for.";})
        };
                
        MainPage = new ContentPage {
            Content = new StackLayout {
                VerticalOptions = LayoutOptions.Start,
                Children = {
                    new Label {
                        HorizontalTextAlignment = TextAlignment.Center,
                        Text = "SearchBar",
                        FontSize = 50
                    },
                    searchBar,
                    new ScrollView
                    {
                        Content = resultsLabel,
                        VerticalOptions = LayoutOptions.FillAndExpand
                    }
                },
                Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5)
            }
        };
    }
    
    // OnStart, OnSleep, and OnResume implementations, & etc.
    
}]]></code>
                </example>
                <para>
                    <img href="SearchBar.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.SearchBar" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>CancelButtonColor</term>
                        <description>
                            <para>A color specification, with or without the prefix, "Color". For example, "Color.Red" and "Red" both specify the color red.</para>
                        </description>
                    </item>
                    <item>
                        <term>Placeholder</term>
                        <description>
                            <para>The default text that will appear in the search bar when it is empty.</para>
                        </description>
                    </item>
                    <item>
                        <term>SearchCommand</term>
                        <description>
                            <para>XAML markup extension that describes a binding to a command.</para>
                        </description>
                    </item>
                    <item>
                        <term>SearchCommandParameter</term>
                        <description>
                            <para>The parameter for the search command.</para>
                        </description>
                    </item>
                    <item>
                        <term>Text</term>
                        <description>
                            <para>The initial text that will appear in the search bar.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.SearchBar">
            <summary>Creates a new <see cref="T:Xamarin.Forms.SearchBar" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.CancelButtonColor">
            <summary>Gets or sets the color of the cancel button.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.CancelButtonColorProperty">
            <summary>Backing store for the CancelButtonColor property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.FontAttributes">
            <summary>Gets a value that indicates whether the font for the searchbar text is bold, italic, or neither.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.FontAttributesProperty">
            <summary>Backing store for the FontAttributes property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.FontFamily">
            <summary>Gets or sets the font family for the search bar text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.FontFamilyProperty">
            <summary>Backing store for the FontFamily property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.FontSize">
            <summary>Gets the size of the font for the text in the searchbar.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.FontSizeProperty">
            <summary>Backing store for the FontSize property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.HorizontalTextAlignment">
            <summary>Gets or sets the horizontal text alignment.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.HorizontalTextAlignmentProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.SearchBar.HorizontalTextAlignment" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.Placeholder">
            <summary>Gets or sets the text that is displayed when the <see cref="T:Xamarin.Forms.SearchBar" /> is empty.</summary>
            <value>The text that is displayed when the <see cref="T:Xamarin.Forms.SearchBar" /> is empty.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.PlaceholderColor">
            <summary>Gets or sets the color of the placheholder text.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.PlaceholderColorProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.SearchBar.PlaceholderColor" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.PlaceholderProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.SearchBar.Placeholder" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.SearchBar.SearchButtonPressed">
            <summary>Event that is raised when the user presses the Search button.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.SearchCommand">
            <summary>Gets or sets the command that is run when the user presses Search button.</summary>
            <value>The command that is run when the user presses Search button.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.SearchCommandParameter">
            <summary>Gets or sets the parameter that is sent to the <see cref="P:Xamarin.Forms.SearchBar.SearchCommand" />.</summary>
            <value>The parameter that is sent to the <see cref="P:Xamarin.Forms.SearchBar.SearchCommand" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.SearchCommandParameterProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.SearchBar.SearchCommandParameter" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.SearchCommandProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.SearchBar.SearchCommand" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.Text">
            <summary>Gets or sets the text that is displayed in the <see cref="T:Xamarin.Forms.SearchBar" />.</summary>
            <value>The text that is displayed in the <see cref="T:Xamarin.Forms.SearchBar" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.SearchBar.TextChanged">
            <summary>Event that is raised when the <see cref="P:Xamarin.Forms.SearchBar.Text" /> property is changed. For example, this event is raised as the user edits the text in the SearchBar.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.TextColor">
            <summary>Gets or sets the text color.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.TextColorProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.SearchBar.TextColor" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.TextProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.SearchBar.Text" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SelectedItemChangedEventArgs">
            <summary>Event arguments for the <see cref="E:Xamarin.Forms.ListView.ItemSelected" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SelectedItemChangedEventArgs(System.Object)">
            <param name="selectedItem">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.SelectedItemChangedEventArgs" /> event that indicates that the user has selected <paramref name="selectedItem" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SelectedItemChangedEventArgs.SelectedItem">
            <summary>Gets the new selected item.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SelectedPositionChangedEventArgs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SelectedPositionChangedEventArgs(System.Int32)">
            <param name="selectedPosition">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SelectedPositionChangedEventArgs.SelectedPosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SeparatorVisibility">
            <summary>Enumerates values that control the visibility of list item separators.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SeparatorVisibility.Default">
            <summary>Use the default visibility for the platform.</summary>
        </member>
        <member name="F:Xamarin.Forms.SeparatorVisibility.None">
            <summary>Do not display separators.</summary>
        </member>
        <member name="T:Xamarin.Forms.Setter">
            <summary>Represents an assignment of a property to a value, typically in a style or in response to a trigger.</summary>
            <remarks>
                <para>Setters are used with triggers and styles.</para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Setter" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Property</term>
                        <description>
                            <para>The name of the property to set.</para>
                        </description>
                    </item>
                    <item>
                        <term>Value</term>
                        <description>
                            <para>The value to apply to the property.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Setter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.Setter" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Setter.Property">
            <summary>The property on which to apply the assignment.</summary>
            <value>To be added.</value>
            <remarks>
                <para>Only bindable properties can be set with a <see cref="T:Xamarin.Forms.Setter" />.</para>.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Setter.Value">
            <summary>The value to assign to the property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Setter.Xamarin#Forms#Xaml#IValueProvider#ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>
                <para />
            </summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SettersExtensions">
            <summary>Defines extensions methods for IList&lt;Setter&gt;</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.SettersExtensions.Add(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,System.Object)">
            <param name="setters">To be added.</param>
            <param name="property">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Add a Setter with a value to the IList&lt;Setter&gt;</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.SettersExtensions.AddBinding(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,Xamarin.Forms.Binding)">
            <param name="setters">To be added.</param>
            <param name="property">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>Add a Setter with a Binding to the IList&lt;Setter&gt;</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.SettersExtensions.AddDynamicResource(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,System.String)">
            <param name="setters">To be added.</param>
            <param name="property">To be added.</param>
            <param name="key">To be added.</param>
            <summary>Add a Setter with a DynamicResource to the IList&lt;Setter&gt;</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Size">
            <summary>Struct defining height and width as a pair of doubles.</summary>
            <remarks>
                <para>Application developers should be aware of the limits of floating-point representations, specifically the possibility of incorrect comparisons and equality checks for values with small differences. David Goldberg's paper <format type="text/html"><a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></format> describes the issues excellently. </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Size(System.Double,System.Double)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Size" /> object with <paramref name="width" /> and <paramref name="height" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.Equals(System.Object)">
            <param name="obj">The object to which <c>this</c> is being compared.</param>
            <summary>Whether <c>this</c><see cref="T:Xamarin.Forms.Size" /> is equivalent to <paramref name="obj" />.</summary>
            <returns>
                <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:Xamarin.Forms.Size" /> whose values are identical to <c>this</c><see cref="T:Xamarin.Forms.Size" />'s <see cref="P:Xamarin.Forms.Size.Height" /> and <see cref="P:Xamarin.Forms.Size.Width" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.Equals(Xamarin.Forms.Size)">
            <param name="other">The <see cref="T:Xamarin.Forms.Size" /> to which <c>this</c> is being compared.</param>
            <summary>Whether <c>this</c><see cref="T:Xamarin.Forms.Size" /> is equivalent to <paramref name="other" />.</summary>
            <returns>
                <see langword="true" /> if <paramref name="other" />'s values are identical to <c>this</c><see cref="T:Xamarin.Forms.Size" />'s <see cref="P:Xamarin.Forms.Size.Height" /> and <see cref="P:Xamarin.Forms.Size.Width" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.GetHashCode">
            <summary>Returns a hash value for the <see cref="T:Xamarin.Forms.Size" />.</summary>
            <returns>A value intended for efficient insertion and lookup in hashtable-based data structures.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Size.Height">
            <summary>Magnitude along the vertical axis, in platform-specific units.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Size.IsZero">
            <summary>Whether the <see cref="T:Xamarin.Forms.Size" /> has <see cref="P:Xamarin.Forms.Size.Height" /> and <see cref="P:Xamarin.Forms.Size.Width" /> of 0.0.</summary>
            <value>
                <see langword="true" /> if both <see cref="P:Xamarin.Forms.Size.Height" /> and <see cref="P:Xamarin.Forms.Width" /> are 0.0.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Addition(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">A <see cref="T:Xamarin.Forms.Size" /> to be added.</param>
            <param name="s2">A <see cref="T:Xamarin.Forms.Size" /> to be added.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Height" /> and <see cref="P:Xamarin.Forms.Size.Width" /> are the sum of the component's height and width.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Width" /> is equal to <c>s1.Width + s2.Width</c> and whose <see cref="P:Xamarin.Forms.Size.Height" /> is equal to <c>sz1.Height + sz2.Height</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Equality(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">A <see cref="T:Xamarin.Forms.Size" /> to be compared.</param>
            <param name="s2">A <see cref="T:Xamarin.Forms.Size" /> to be compared.</param>
            <summary>Whether two <see cref="T:Xamarin.Forms.Size" />s have equal values.</summary>
            <returns>
                <see langword="true" /> if <paramref name="s1" /> and <paramref name="s2" /> have equal values for <see cref="P:Xamarin.Forms.Size.Height" /> and <see cref="P:Xamarin.Forms.Size.Width" />.</returns>
            <remarks>
                <para>Application developers should be aware that <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> are stored internally as <see langword="double" />s. Values with small differences may compare incorrectly due to internal rounding limitations.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Explicit(Xamarin.Forms.Size)~Xamarin.Forms.Point">
            <param name="size">The <see cref="T:Xamarin.Forms.Size" /> to be converted to a <see cref="T:Xamarin.Forms.Point" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> based on a <see cref="T:Xamarin.Forms.Size" />.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Point" /> whose <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> are equal to <paramref name="size" />'s <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" />, respectively.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Inequality(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">To be added.</param>
            <param name="s2">To be added.</param>
            <summary>Whether two <see cref="T:Xamarin.Forms.Size" />s have unequal values.</summary>
            <returns>
                <see langword="true" /> if <paramref name="s1" /> and <paramref name="s2" /> have unequal values for either <see cref="P:Xamarin.Forms.Size.Height" /> or <see cref="P:Xamarin.Forms.Size.Width" />.</returns>
            <remarks>
                <para>Application developers should be aware that <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> are stored internally as <see langword="double" />s. Values with small differences may compare incorrectly due to internal rounding limitations.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Multiply(Xamarin.Forms.Size,System.Double)">
            <param name="s1">A <see cref="T:Xamarin.Forms.Size" /> to be scaled.</param>
            <param name="value">A factor by which to multiple <paramref name="s1" />'s <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> values.</param>
            <summary>Scales both <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> have been scaled by <paramref name="value" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Subtraction(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">A <see cref="T:Xamarin.Forms.Size" /> from whose values a size will be subtracted.</param>
            <param name="s2">The <see cref="T:Xamarin.Forms.Size" /> to subtract from <paramref name="s1" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Height" /> and <see cref="P:Xamarin.Forms.Size.Width" /> are <paramref name="s1" />'s height and width minus the values in <paramref name="s2" />.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Width" /> is equal to <c>s1.Width - s2.Width</c> and whose <see cref="P:Xamarin.Forms.Size.Height" /> is equal to <c>sz1.Height - sz2.Height</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.ToString">
            <summary>Returns a human-readable representation of the <see cref="T:Xamarin.Forms.Size" />.</summary>
            <returns>The format has the pattern "{Width={0} Height={1}}".</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Size.Width">
            <summary>Magnitude along the horizontal axis, in platform-defined units.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Size.Zero">
            <summary>The <see cref="T:Xamarin.Forms.Size" /> whose values for height and width are 0.0.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SizeRequest">
            <summary>Struct that definse minimum and maximum <see cref="T:Xamarin.Forms.Size" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SizeRequest(Xamarin.Forms.Size)">
            <param name="request">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.SizeRequest" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SizeRequest(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="request">To be added.</param>
            <param name="minimum">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.SizeRequest" /> object that requests at least the size <paramref name="minimum" />, but preferably the size <paramref name="request" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SizeRequest.Minimum">
            <summary>The minimum acceptable size.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SizeRequest.Request">
            <summary>The requested size.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.SizeRequest.ToString">
            <summary>Returns a string representation of the size request.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Slider">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that inputs a linear value.</summary>
            <remarks>
                <para>
                    <img href="Slider.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Slider" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Maximum</term>
                        <description>
                            <para>An integer or decimal literal.</para>
                        </description>
                    </item>
                    <item>
                        <term>Minimum</term>
                        <description>
                            <para>An integer or decimal literal. If this value is nonnegative, it must appear lexically below <c>Maximum</c>, so that validation can succeed.</para>
                        </description>
                    </item>
                    <item>
                        <term>Value</term>
                        <description>
                            <para>An integer or decimal literal that represents a number that is in the range[<c>Minimum</c>,<c>Maximum</c>].</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Slider">
            <summary>Initializes a new instance of the Slider class.</summary>
            <remarks>
                <para>The following example shows a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class SliderDemoPage : ContentPage
    {
        Label label;

        public SliderDemoPage()
        {
            Label header = new Label
            {
                Text = "Slider",
                Font = Font.BoldSystemFontOfSize(50),
                HorizontalOptions = LayoutOptions.Center
            };

            Slider slider = new Slider
            {
                Minimum = 0,
                Maximum = 100,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };
            slider.ValueChanged += OnSliderValueChanged;

            label = new Label
            {
                Text = "Slider value is 0",
                Font = Font.SystemFontOfSize(NamedSize.Large),
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children =
                {
                    header,
                    slider,
                    label
                }
            };
        }

        void OnSliderValueChanged(object sender, ValueChangedEventArgs e)
        {
            label.Text = String.Format("Slider value is {0:F1}", e.NewValue);
        }
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Slider(System.Double,System.Double,System.Double)">
            <param name="min">The minimum selectable value.</param>
            <param name="max">The maximum selectable value.</param>
            <param name="val">The actual value.</param>
            <summary>Initializes a new instance of the Slider class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Slider.Maximum">
            <summary>Gets or sets the maximum selectable value for the Slider. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Slider.MaximumProperty">
            <summary>Identifies the Maximum bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Slider.Minimum">
            <summary>Gets or sets the minimum selectable value for the Slider. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Slider.MinimumProperty">
            <summary>Identifies the Minimum bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Slider.Value">
            <summary>Gets or sets the current value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Slider.ValueChanged">
            <summary>The ValueChanged event is fired when the Value property changes.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Slider.ValueProperty">
            <summary>Identifies the Value bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Span">
            <summary>Represents a part of a FormattedString.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Span">
            <summary>Initialize a new instance of the Span class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Span.BackgroundColor">
            <summary>Gets or sets the Color of the span background.</summary>
            <value>To be added.</value>
            <remarks>Not supported on WindowsPhone.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Span.Font">
            <summary>Gets or sets the Font for the text in the span.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Span.FontAttributes">
            <summary>Gets a value that indicates whether the font for the span is bold, italic, or neither.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Span.FontFamily">
            <summary>Gets the font family to which the font for the text in the span belongs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Span.FontSize">
            <summary>Gets the size of the font for the text in the span.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Span.ForegroundColor">
            <summary>Gets or sets the Color for the text in the span.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Span.PropertyChanged">
            <summary>Event that is raised when a property is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Span.Text">
            <summary>Gets or sets the text of the span.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.StackLayout">
            <summary>A <see cref="T:Xamarin.Forms.Layout`1" /> that positions child elements in a single line which can be oriented vertically or horizontally.</summary>
            <remarks>
                <para>Because <see cref="T:Xamarin.Forms.StackLayout" /> layouts override the bounds on their child elements, application developers should not set bounds on them.</para>
                <example>
                    <para>The following example code, adapted from the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">FormsGallery</a></format> example shows how to create a new <see cref="T:Xamarin.Forms.StackLayout" /> with children that explore many of the layout behaviors of <see cref="T:Xamarin.Forms.StackLayout" />:</para>
                    <code lang="C#"><![CDATA[
StackLayout stackLayout = new StackLayout
{
    Spacing = 0,
    VerticalOptions = LayoutOptions.FillAndExpand,
    Children = 
    {
        new Label
        {
            Text = "StackLayout",
            HorizontalOptions = LayoutOptions.Start
        },
        new Label
        {
            Text = "stacks its children",
            HorizontalOptions = LayoutOptions.Center
        },
        new Label
        {
            Text = "vertically",
            HorizontalOptions = LayoutOptions.End
        },
        new Label
        {
            Text = "by default,",
            HorizontalOptions = LayoutOptions.Center
        },
        new Label
        {
            Text = "but horizontal placement",
            HorizontalOptions = LayoutOptions.Start
        },
        new Label
        {
            Text = "can be controlled with",
            HorizontalOptions = LayoutOptions.Center
        },
        new Label
        {
            Text = "the HorizontalOptions property.",
            HorizontalOptions = LayoutOptions.End
        },
        new Label
        {
            Text = "An Expand option allows one or more children " +
                   "to occupy the an area within the remaining " +
                   "space of the StackLayout after it's been sized " +
                   "to the height of its parent.",
            VerticalOptions = LayoutOptions.CenterAndExpand,
            HorizontalOptions = LayoutOptions.End
        },
        new StackLayout
        {
            Spacing = 0,
            Orientation = StackOrientation.Horizontal,
            Children = 
            {
                new Label
                {
                    Text = "Stacking",
                },
                new Label
                {
                    Text = "can also be",
                    HorizontalOptions = LayoutOptions.CenterAndExpand
                },
                new Label
                {
                    Text = "horizontal.",
                },
            }
        }
    }
};
]]></code>
                </example>
                <para>
                    <img href="StackLayout.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.StackLayout" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Orientation</term>
                        <description>
                            <para>
                                <c>Horizontal</c> or <c>Vertical</c>. The default is <c>Vertical</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>Spacing</term>
                        <description>
                            <para>An integer or decimal.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.StackLayout">
            <summary>Initializes a new instance of the StackLayout class.</summary>
            <remarks>
                <para>
              The following example shows the initialization of a new StackLayout and setting its orientation and children.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
var stackLayout = new StackLayout {
  Orientation = StackOrientation.Horizontal,
  Children = {
    firstChild,
    secondChild,
    thirdChild
  }
};
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.StackLayout.InvalidateMeasure">
            <summary>Invalidates the layout.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.StackLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the width of the child region bounding box.</param>
            <param name="height">A value representing the height of the child region bounding box.</param>
            <summary>Positions and sizes the children of a StackLayout.</summary>
            <remarks>Implementors wishing to change the default behavior of a StackLayout should override this method. It is suggested to still call the base method and modify its calculated results.</remarks>
        </member>
        <member name="M:Xamarin.Forms.StackLayout.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the StackLayout to use.</param>
            <param name="heightConstraint">The available height for the StackLayout to use.</param>
            <summary>This method is called during the measure pass of a layout cycle to get the desired size of the StackLayout.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains the desired size of the StackLayout.</returns>
            <remarks>The results of this method will be a sum of all the desired sizes of its children along the orientation axis, and the maximum along the non-orientation axis.</remarks>
        </member>
        <member name="P:Xamarin.Forms.StackLayout.Orientation">
            <summary>Gets or sets the value which indicates the direction which child elements are positioned.</summary>
            <value>A <see cref="T:Xamarin.Forms.StackOrientation" /> which indicates the direction children layouts flow. The default value is Vertical.</value>
            <remarks>Setting the Orientation of a StackLayout triggers a layout cycle if the stack is already inside of a parent layout. To prevent wasted layout cycles, set the orientation prior to adding the StackLayout to a parent.</remarks>
        </member>
        <member name="F:Xamarin.Forms.StackLayout.OrientationProperty">
            <summary>Identifies the Orientation bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.StackLayout.Spacing">
            <summary>Gets or sets a value which indicates the amount of space between each child element.</summary>
            <value>A value in device pixels which indicates the amount of space between each element. The default value is 6.0.</value>
            <remarks>
                <para>
            Setting this value triggers a layout cycle if the StackLayout is already in a parent Layout.
          </para>
                <para>
              The following example sets the Spacing on construction of a StackLayout.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
var stackLayout = new StackLayout {
  Spacing = 10
};
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.StackLayout.SpacingProperty">
            <summary>Identifies the Spacing bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.StackOrientation">
            <summary>The orientations the a StackLayout can have.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.StackOrientation.Horizontal">
            <summary>StackLayout should be horizontally oriented.</summary>
        </member>
        <member name="F:Xamarin.Forms.StackOrientation.Vertical">
            <summary>StackLayout should be vertically oriented.</summary>
        </member>
        <member name="T:Xamarin.Forms.Stepper">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that inputs a discrete value, constrained to a range.</summary>
            <remarks>
                <para>The following example shows a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[using System;
            using System;
            using Xamarin.Forms;

            namespace FormsGallery
            {
                class StepperDemoPage : ContentPage
                {
                    Label label;

                    public StepperDemoPage()
                    {
                        Label header = new Label
                        {
                            Text = "Stepper",
                            FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                            HorizontalOptions = LayoutOptions.Center
                        };

                        Stepper stepper = new Stepper
                        {
                            Value = 5,
                            Minimum = 0,
                            Maximum = 10,
                            Increment = 0.1,
                            HorizontalOptions = LayoutOptions.Center,
                            VerticalOptions = LayoutOptions.CenterAndExpand
                        };
                        stepper.ValueChanged += OnStepperValueChanged;

                        label = new Label
                        {
                            Text = String.Format("Stepper value is {0:F1}", stepper.Value),
                            FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                            HorizontalOptions = LayoutOptions.Center,
                            VerticalOptions = LayoutOptions.CenterAndExpand
                        };

                        // Accomodate iPhone status bar.
                        this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

                        // Build the page.
                        this.Content = new StackLayout
                        {
                            Children =
                            {
                                header,
                                stepper,
                                label
                            }
                            };
                    }

                    void OnStepperValueChanged(object sender, ValueChangedEventArgs e)
                    {
                        label.Text = String.Format("Stepper value is {0:F1}", e.NewValue);
                    }
                }
            }]]></code>
                </example>
                <para>
                    <img href="Stepper.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Stepper" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Increment</term>
                        <description>
                            <para>An integer or decimal literal.</para>
                        </description>
                    </item>
                    <item>
                        <term>Maximum</term>
                        <description>
                            <para>An integer or decimal literal.</para>
                        </description>
                    </item>
                    <item>
                        <term>Minimum</term>
                        <description>
                            <para>An integer or decimal literal. If this value is nonnegative, it must appear lexically below <c>Maximum</c>, so that validation can succeed.</para>
                        </description>
                    </item>
                    <item>
                        <term>Value</term>
                        <description>
                            <para>An integer or decimal literal that represents a number that is in the range [<c>Minimum</c>,<c>Maximum</c>].</para>
                        </description>
                    </item>
                    <item>
                        <term>ValueChanged</term>
                        <description>The name of an event handler. Note that this tag must appear below <c>Value</c>.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Stepper">
            <summary>Initializes a new instance of the Stepper class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Stepper(System.Double,System.Double,System.Double,System.Double)">
            <param name="min">The minimum selectable value.</param>
            <param name="max">The maximum selectable value.</param>
            <param name="val">The current selected value.</param>
            <param name="increment">The increment by which Value is increased or decreased.</param>
            <summary>Initializes a new instance of the Stepper class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Stepper.Increment">
            <summary>Gets or sets the increment by which Value is increased or decreased. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Stepper.IncrementProperty">
            <summary>Identifies the Increment bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Stepper.Maximum">
            <summary>Gets or sets the maximum selectable value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Stepper.MaximumProperty">
            <summary>Identifies the Maximum bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Stepper.Minimum">
            <summary>Gets or sets the minimum selectabel value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Stepper.MinimumProperty">
            <summary>Identifies the Minimum bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Stepper.Value">
            <summary>Gets or sets the current value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Stepper.ValueChanged">
            <summary>Raised when the <see cref="P:Xamarin.Forms.Stepper.Value" /> property changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Stepper.ValueProperty">
            <summary>Identifies the Value bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.StreamImageSource">
            <summary>
                <see cref="T:Xamarin.Forms.ImageSource" /> that loads an image from a <see cref="T:System.IO.Stream" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.StreamImageSource">
            <summary>Creates a new <see cref="T:Xamarin.Forms.StreamImageSource" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.StreamImageSource.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Method that is called when the property that is specified by <paramref name="propertyName" /> is changed..</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.StreamImageSource.Stream">
            <summary>Gets or sets the delegate responsible for returning a <see cref="T:System.IO.Stream" /> for the Image.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.StreamImageSource.StreamProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.StreamImageSource.Stream" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Style">
            <summary>Class that contains triggers, setters, and behaviors that completely or partially define the appearance and behavior of a class of visual elements.</summary>
            <remarks>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Style" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>BasedOn</term>
                        <description>
                            <para>A <c>StaticResource</c> markup extension that names the style on which this style is based.</para>
                        </description>
                    </item>
                    <item>
                        <term>BaseResourceKey</term>
                        <description>
                            <para>A resource dictionary key that names a dynamic base style.</para>
                        </description>
                    </item>
                    <item>
                        <term>Behaviors</term>
                        <description>
                            <para>Markup for the behaviors that are associated with the style.</para>
                        </description>
                    </item>
                    <item>
                        <term>Setters</term>
                        <description>
                            <para>A list of setters containing <c>Property</c> and <c>Value</c> elements or attributes.</para>
                        </description>
                    </item>
                    <item>
                        <term>TargetType</term>
                        <description>
                            <para>The name of the type that the style is intended for.</para>
                        </description>
                    </item>
                    <item>
                        <term>Triggers</term>
                        <description>
                            <para>A list of triggers.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Style(System.Type)">
            <param name="targetType">To be added.</param>
            <summary>Intitializes a new <see cref="T:Xamarin.Forms.Style" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.ApplyToDerivedTypes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.BasedOn">
            <summary>The <see cref="T:Xamarin.Forms.Style" /> on which this <see cref="T:Xamarin.Forms.Style" /> is based.</summary>
            <value>To be added.</value>
            <remarks>The <see cref="T:Xamarin.Forms.Style" /> supports a mechanism in XAML that is similar to inheritance in C#.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.BaseResourceKey">
            <summary>Gets or sets the key that identifies the <see cref="T:Xamarin.Forms.Style" /> on which this <see cref="T:Xamarin.Forms.Style" /> is based.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.Behaviors">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.Behavior" /> objects that belong to this <see cref="T:Xamarin.Forms.Style" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.CanCascade">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.Class">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.Setters">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.Setter" /> objects that belong to this <see cref="T:Xamarin.Forms.Style" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.TargetType">
            <summary>Gets the type of object that this style can describe. See Remarks.</summary>
            <value>To be added.</value>
            <remarks>
                <p>Developers should be aware that implicit styles are only applied to the specific type that is described by <see cref="P:Xamarin.Forms.Style.TargetType" />, and not to types that inherit from it.</p>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Style.Triggers">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.Trigger" /> objects that belong to this <see cref="T:Xamarin.Forms.Style" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Switch">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that provides a toggled value.</summary>
            <remarks>
                <para>The following example describes a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class SwitchDemoPage : ContentPage
    {
        Label label;

        public SwitchDemoPage()
        {
            Label header = new Label
            {
                Text = "Switch",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            Switch switcher = new Switch
            {
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };
            switcher.Toggled += switcher_Toggled;

            label = new Label
            {
                Text = "Switch is now False",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center,
                VerticalOptions = LayoutOptions.CenterAndExpand
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children =
                {
                    header,
                    switcher,
                    label
                }
            };
        }

        void switcher_Toggled(object sender, ToggledEventArgs e)
        {
            label.Text = String.Format("Switch is now {0}", e.Value);
        }
    }
}]]></code>
                </example>
                <para>
                    <img href="Switch.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.Switch" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>IsToggled</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether the switch has been toggled.</para>
                        </description>
                    </item>
                    <item>
                        <term>Toggled</term>
                        <description>
                            <para>The name of an event handler. Note that this tag must appear below <c>IsToggled</c>.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Switch">
            <summary>Creates a new <see cref="T:Xamarin.Forms.Switch" /> element with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Switch.IsToggled">
            <summary>Gets or sets a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.Switch" /> element is toggled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Switch.IsToggledProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.Switch.IsToggled" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Switch.Toggled">
            <summary>Event that is raised when this <see cref="T:Xamarin.Forms.Switch" /> is toggled.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SwitchCell">
            <summary>A <see cref="T:Xamarin.Forms.Cell" /> with a label and an on/off switch.</summary>
            <remarks>
                <para>The following example shows a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class SwitchCellDemoPage : ContentPage
    {
        public SwitchCellDemoPage()
        {
            Label header = new Label
            {
                Text = "SwitchCell",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            TableView tableView = new TableView
            {
                Intent = TableIntent.Form,
                Root = new TableRoot
                {
                    new TableSection
                    {
                        new SwitchCell
                        {
                            Text = "SwitchCell:"
                        }
                    }
                }
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children =
                {
                    header,
                    tableView
                }
            };
        }
    }
}]]></code>
                </example>
                <para>
                    <img href="SwitchCell.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.SwitchCell" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>On</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether the switch cell is in the "on" position.</para>
                        </description>
                    </item>
                    <item>
                        <term>OnChanged</term>
                        <description>
                            <para>The name of an event handler. Note that this tag must appear below <c>On</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>Text</term>
                        <description>
                            <para>Text that represents the title of the switch cell.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.SwitchCell">
            <summary>Initializes a new instance of the SwitchCell class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SwitchCell.On">
            <summary>Gets or sets the state of the switch. This is a bindable property.</summary>
            <value>Default is <see langword="false" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.SwitchCell.OnChanged">
            <summary>Triggered when the switch has changed value.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SwitchCell.OnProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.SwitchCell.On" /> bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SwitchCell.Text">
            <summary>Gets or sets the text displayed next to the switch. This is a bindable property.</summary>
            <value />
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SwitchCell.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TabbedPage">
            <summary>
                <see cref="T:Xamarin.Forms.MultiPage`1" /> that displays an array of tabs across the top of the screen, each of which loads content onto the screen.</summary>
            <remarks>
                <para>The user interface of a tabbed page consists of a list of tabs and a larger detail area. On iOS, the list of tabs appears at the bottom of the screen, and the detail area is above. On Android and Windows phones, the tabs appear across the top of the screen. The user can scroll the collection of tabs that are across the top of the screen if that collection is too large to fit on one screen.</para>
                <para>App developers can create tabbed pages in either of two ways. First, application developers can assign a list of objects of a single class, or its subclasses, to the <see cref="P:Xamarin.Forms.MultiPage.ItemsSource" /> property and assign a <see cref="T:Xamarin.Forms.DataTemplate" /> to the <see cref="P:Xamarin.Forms.MultiPage{T}.ItemTemplate" /> property to return pages for objects of the least derived type. Second, app developers can add a succession of <see cref="T:Xamarin.Forms.Page" /> objects to the <see cref="P:Xamarin.Forms.MultiPage{T}.Children" /> property. Both methods are shown in the code examples below.</para>
                <example>
                    <para>The following example code, adapted for brevity from the FormsGallery sample that can be found on the <format type="text/html"><a href="http://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">Sample Applications</a></format> page, shows how to display data of a specific type by assigning a <see cref="T:Xamarin.Forms.DataTemplate" /> to the <see cref="P:Xamarin.Forms.MultiPage{T}.ItemTemplate" /> property. Note how <c>NamedColorPage</c> gets its color by binding its <see cref="F:Xamarin.Forms.BoxView.ColorProperty" /> field.</para>
                    <code lang="C#"><![CDATA[
using System;
using Xamarin.Forms;

namespace MinimalTabbed
{
    class TabbedPageDemoPage : TabbedPage
    {
        public TabbedPageDemoPage ()
        {
            this.Title = "TabbedPage";

            this.ItemsSource = new NamedColor[] {
                new NamedColor ("Red", Color.Red),
                new NamedColor ("Yellow", Color.Yellow),
                new NamedColor ("Green", Color.Green),
                new NamedColor ("Aqua", Color.Aqua),
                new NamedColor ("Blue", Color.Blue),
                new NamedColor ("Purple", Color.Purple)
            };

            this.ItemTemplate = new DataTemplate (() => { 
                return new NamedColorPage (); 
            });
        }
    }

    // Data type:
    class NamedColor
    {
        public NamedColor (string name, Color color)
        {
            this.Name = name;
            this.Color = color;
        }

        public string Name { private set; get; }

        public Color Color { private set; get; }

        public override string ToString ()
        {
            return Name;
        }
    }

    // Format page
    class NamedColorPage : ContentPage
    {
        public NamedColorPage ()
        {
            // This binding is necessary to label the tabs in
            // the TabbedPage.
            this.SetBinding (ContentPage.TitleProperty, "Name");
            // BoxView to show the color.
            BoxView boxView = new BoxView {
                WidthRequest = 100,
                HeightRequest = 100,
                HorizontalOptions = LayoutOptions.Center
            };
            boxView.SetBinding (BoxView.ColorProperty, "Color");

            // Build the page
            this.Content = boxView;
        }
    }
}


]]></code>
                </example>
                <example>
                    <para>The example below creates a tabbed view with two <see cref="T:Xamarin.Forms.ContentPage" /> instances.</para>
                    <code lang="C#"><![CDATA[
class TabbedPageDemoPage2 : TabbedPage
{
    public TabbedPageDemoPage2 ()
    {
        this.Title = "TabbedPage";
        this.Children.Add (new ContentPage 
            {
                Title = "Blue",
                Content = new BoxView
                {
                    Color = Color.Blue,
                    HeightRequest = 100f,
                    VerticalOptions = LayoutOptions.Center
                },
            }
        );
        this.Children.Add (new ContentPage {
            Title = "Blue and Red",
            Content = new StackLayout {
                Children = {
                    new BoxView { Color = Color.Blue },
                    new BoxView { Color = Color.Red}
                }
            }
        });
    }
}
      ]]></code>
                </example>
                <para>
                    <img href="TabbedPage.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TabbedPage">
            <summary>Creates a new <see cref="T:Xamarin.Forms.TabbedPage" /> element with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TabbedPage.BarBackgroundColor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TabbedPage.BarBackgroundColorProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TabbedPage.BarTextColor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TabbedPage.BarTextColorProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TabbedPage.CreateDefault(System.Object)">
            <param name="item">An object for which to create a default page.</param>
            <summary>Creates a default page, suitable for display in <c>this</c><see cref="T:Xamarin.Forms.TabbedPage" /> page, for an object.</summary>
            <returns>A page that is titled with the string value of <paramref name="item" />.</returns>
            <remarks>This returns a new <see cref="T:Xamarin.Forms.Page" /> object that has its <see cref="P:Xamarin.Forms.Page.Title" /> property set to the value of <see cref="M:Object.ToString" /> when called on <paramref name="item" />.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TabbedPage.OnParentSet">
            <summary>Called when the parent is set.</summary>
            <remarks>This method iterates up the <see cref="P:Xamarin.Forms.Page.Parent" /> hierarchy and writes a message to the debug listeners if it detects a <see cref="T:Xamarin.Forms.NavigationPage" />. Application developers are advised that adding a <see cref="T:Xamarin.Forms.TabbedPage" /> to a <see cref="T:Xamarin.Forms.NavigationPage" /> may produce undesirable results.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableIntent">
            <summary>TableIntent provides hints to the renderer about how a table will be used.</summary>
            <remarks>Using table intents will not effect the behavior of a table, and will only modify their visual appearance on screen, depending on the platform. Not all intents are unique on all platforms, however it is advisable to pick the intent which most closely represents your use case.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Data">
            <summary>A table intended to contain an arbitrary number of similar data entries.</summary>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Form">
            <summary>A table which is used to contain information that would normally be contained in a form.</summary>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Menu">
            <summary>A table intended to be used as a menu for selections.</summary>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Settings">
            <summary>A table containing a set of switches, toggles, or other modifiable configuration settings.</summary>
        </member>
        <member name="T:Xamarin.Forms.TableRoot">
            <summary>A <see cref="T:Xamarin.Forms.TableSection" /> that contains either a table section or the entire table.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableRoot">
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.TableRoot" /> class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableRoot(System.String)">
            <param name="title">The title of the table.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.TableRoot" /> class with a title.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableSection">
            <summary>A logical and visible section of a <see cref="T:Xamarin.Forms.TableView" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSection">
            <summary>Creates a new <see cref="T:Xamarin.Forms.TableSection" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSection(System.String)">
            <param name="title">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.TableSection" /> with the title <paramref name="title" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableSectionBase">
            <summary>Abstract base class defining a table section.</summary>
            <remarks>
                <para>
                    <img href="TableSectionBase.Hierarchy.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following property for the <see cref="T:Xamarin.Forms.TableSectionBase" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>Title</term>
                        <description>
                            <para>A title for the section.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase">
            <summary>Creates a new <see cref="T:Xamarin.Forms.TableSectionBase" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase(System.String)">
            <param name="title">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.TableSectionBase" /> object with the specified <paramref name="title" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase.Title">
            <summary>Gets or sets the title.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TableSectionBase.TitleProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.TableSectionBase.Title" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableSectionBase`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>
            Table section that contains instances of type T that are rendered by Xamarin.Forms.</summary>
            <remarks>
                <para>
            Sections are used to group cells in the screen and they are the
            only valid direct child of the <see cref="T:Xamarin.Forms.TableRoot" />.    Sections can contain
            any of the standard <see cref="T:Xamarin.Forms.Cell" />s, including new <see cref="T:Xamarin.Forms.TableRoot" />s.
            </para>
                <para>
                    <see cref="T:Xamarin.Forms.TableRoot" />s embedded in a section are used to navigate to a new
            deeper level.
            </para>
                <para>
            You can assign a header and a footer either as strings (Header and Footer)
            properties, or as Views to be shown (HeaderView and FooterView).   Internally
            this uses the same storage, so you can only show one or the other.
      </para>
                <para>Subtypes of <see cref="T:Xamarin.Forms.TableSectionBase`1" /> are <see cref="T:Xamarin.Forms.TableSection" /> and <see cref="T:Xamarin.Forms.TableRoot" />, as shown in the following diagram:</para>
                <para>
                    <img href="TableSection.Hierarchy.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase`1">
            <summary>
            Constructs a new <see cref="T:Xamarin.Forms.TableSection`1" /> instance with an empty title.
            </summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase`1(System.String)">
            <param name="title">To be added.</param>
            <summary>
            Constructs a new <see cref="T:Xamarin.Forms.TableSection`1" /> instance with the specified <paramref name="title" />.
            </summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Add(System.Collections.Generic.IEnumerable{T})">
            <param name="items">The items to add.</param>
            <summary>Adds a list of items to this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Add(T)">
            <param name="item">The item to add.</param>
            <summary>Adds an item to this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Clear">
            <summary>Removes all items in this <see cref="T:Xamarin.Forms.TableSectionBase`1" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.TableSectionBase`1.CollectionChanged">
            <summary>Event that is raised when one or more items is added to or removed from this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Contains(T)">
            <param name="item">The object for which to determine whether or not this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object has a reference.</param>
            <summary>Returns a Boolean value that indicates whether or not this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> has a reference to a particular object.</summary>
            <returns>
                <see langword="true" /> if this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object contains a reference to <paramref name="item" />. Otherwise, <see langword="false" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.CopyTo(T[],System.Int32)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>Copies the elements of the current collection to an <see cref="T:System.Array" />, starting at the specified index.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase`1.Count">
            <summary>Gets the number of items in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <value>The number of items in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the items in this  <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.IndexOf(T)">
            <param name="item">The instance for which to find its index.</param>
            <summary>Returns the index of the first occurrence of <paramref name="item" /> in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <returns>The index of the first occurrence of <paramref name="item" /> in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Insert(System.Int32,T)">
            <param name="index">The position at which to insert <paramref name="item" />.</param>
            <param name="item">The item to insert.</param>
            <summary>Inserts an item into this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object at the specified position.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase`1.Item(System.Int32)">
            <param name="index">The location of the item to return.</param>
            <summary>Returns the item that is stored at the location in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object that is specified by <paramref name="index" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.OnBindingContextChanged">
            <summary>Calls the <see cref="M:Xamarin.Forms.BindableObject.SetInheritedBindingContext" /> method, passing the new binding context, on each of the items in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Remove(T)">
            <param name="item">To be added.</param>
            <summary>Removes a specified item from this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <returns>
                <see langword="true" />, if item was removed from the current collection; <see langword="false" /> if item was not found in the current collection..</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.RemoveAt(System.Int32)">
            <param name="index">The position in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object from which to remove an item.</param>
            <summary>Removes a specified item from this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object at the position that is specified by <paramref name="index" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>Returns <see langword="false" />; The collection of objects in this can be changed.</summary>
            <value>
                <see langword="false" />; The collection of objects in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object can be changed.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection of objects in this <see cref="T:Xamarin.Forms.TableSectionBase`1" /> object.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that holds rows of <see cref="T:Xamarin.Forms.Cell" /> elements.</summary>
            <remarks>
                <para>A <see cref="T:Xamarin.Forms.TableView" /> has a <see cref="T:Xamarin.Forms.TableRoot" /> as its <see cref="P:Xamarin.Forms.TableView.Root" /> property. The <see cref="T:Xamarin.Forms.TableView.TableRoot" /> is a type of <see cref="T:Xamarin.Forms.TableSection" />. </para>
                <para>The following example shows a basic table with two sections.</para>
                <example>
                    <code lang="C#"><![CDATA[
public class App : Application
{
    public App()
    {
        MainPage = new ContentPage {
            Content = new TableView {
                Intent = TableIntent.Form,
                Root = new TableRoot ("Table Title") {
                    new TableSection ("Section 1 Title") {
                        new TextCell {
                            Text = "TextCell Text",
                            Detail = "TextCell Detail"
                        },
                        new EntryCell {
                            Label = "EntryCell:",
                            Placeholder = "default keyboard",
                            Keyboard = Keyboard.Default
                        }
                    },
                    new TableSection ("Section 2 Title") {
                        new EntryCell {
                            Label = "Another EntryCell:",
                            Placeholder = "phone keyboard",
                            Keyboard = Keyboard.Telephone
                        },
                        new SwitchCell {
                            Text = "SwitchCell:"
                        }
                    }
                }
            }
        }; 
    }
    // OnStart, OnSleep, OnResume overrides omitted...
}          
          ]]></code>
                </example>
                <para>
                    <img href="TableView.TripleScreenShot.png" />
                </para>
                <para>XAML for Xamarin.Forms supports the following properties for the <see cref="T:Xamarin.Forms.TableView" /> class:</para>
                <list type="table">
                    <listheader>
                        <term>Property</term>
                        <description>Value</description>
                    </listheader>
                    <item>
                        <term>HasUnevenRows</term>
                        <description>
                            <para>
                                <c>true</c> or <c>false</c>, to indicate whether rows in the table view will specify their own height.</para>
                        </description>
                    </item>
                    <item>
                        <term>Intent</term>
                        <description>
                            <para>
                                <c>Data</c>, <c>Form</c>, <c>Menu</c>, or <c>Settings</c>.</para>
                        </description>
                    </item>
                    <item>
                        <term>RowHeight</term>
                        <description>
                            <para>
                                <c>Horizontal</c> or <c>Vertical</c>, to indicate the scroll direction.</para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TableView">
            <summary>Initializes a new <see cref="T:Xamarin.Forms.TableView" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableView(Xamarin.Forms.TableRoot)">
            <param name="root">To be added.</param>
            <summary>Initializes a new <see cref="T:Xamarin.Forms.TableView" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.HasUnevenRows">
            <summary>Gets or sets a value that indicates whether the rows that are contained in this <see cref="T:Xamarin.Forms.TableView" /> can have uneven rows.</summary>
            <value>To be added.</value>
            <remarks>
                <para>When the <see cref="P:Xamarin.Forms.TableView.HasUnevenRows" /> property is <see langword="true" />, application developers can set the <see cref="P:Xamarin.Forms.Cell.Height" /> properties to control the height of <see cref="T:Xamarin.Forms.Cell" /> items in the table. When the <see cref="P:Xamarin.Forms.TableView.HasUnevenRows" /> property is <see langword="true" />, the <see cref="P:Xamarin.Forms.TableView.RowHeight" /> property is ignored. When the <see cref="P:Xamarin.Forms.TableView.HasUnevenRows" /> property is <see langword="false" />, app developers can set the <see cref="P:Xamarin.Forms.TableView.RowHeight" /> property to set the height of all Cells, and their individual <see cref="P:Xamarin.Forms.Cell.Height" /> properties are ignored.</para>
                <block subset="none" type="note">
                    <para>Developers must specify row heights on the iOS platform, even when <see cref="P:Xamarin.Forms.TableView.HasUnevenRows" /> is <see langword="true" />.</para>
                </block>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.TableView.HasUnevenRowsProperty">
            <summary>Backing store for the HasUnevenRows property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.Intent">
            <summary>Gets or sets the intent of the table.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableView.OnBindingContextChanged">
            <summary>Method that is called when the binding context changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableView.OnModelChanged">
            <summary>Method that is called when the model changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableView.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Method that is called when a size request is made.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.Root">
            <summary>Gets or sets the root of the table.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.RowHeight">
            <summary>An integer that describes the height of the items in the list. This is ignored if HasUnevenRows is true.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TableView.RowHeightProperty">
            <summary>Backing store for the row height property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TapGestureRecognizer">
            <summary>Provides tap gesture recognition and events.</summary>
            <remarks>Can be used to recognize single and multiple tap gestures.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TapGestureRecognizer">
            <summary>Initializes a new instance of a TapGestureRecognizer object.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TapGestureRecognizer(System.Action{Xamarin.Forms.View,System.Object})">
            <param name="tappedCallback">An action whose first argument is the View the recognizer is associated with and whose second argument is the callback parameter.</param>
            <summary>Initializes a new instance of a TapGestureRecognizer object with a parameterized callback.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TapGestureRecognizer(System.Action{Xamarin.Forms.View})">
            <param name="tappedCallback">An action whose first argument is the View the recognizer is associated with.</param>
            <summary>Initializes a new instance of a TapGestureRecognizer object with a callback.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.Command">
            <summary>The Command to invoke when the gesture has been triggered by the user. This is a bindable property.</summary>
            <value>To be added.</value>
            <remarks>The object passed to the Command will be the contents of <see cref="P:Xamarin.Forms.TapGestureRecognizer.CommandParameter" /></remarks>
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.CommandParameter">
            <summary>An object to be passed to the TappedCallback. This is a bindable property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.CommandParameterProperty">
            <summary>Identifies the CommandParameter bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.CommandProperty">
            <summary>Identifies the Command bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.NumberOfTapsRequired">
            <summary>The number of taps required to trigger the callback. This is a bindable property.</summary>
            <value>The number of taps to recognize. The default value is 1.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.NumberOfTapsRequiredProperty">
            <summary>Identifies the NumberOfTapsRequired bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.TapGestureRecognizer.Tapped">
            <summary>Event that is raised when the user taps.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.TappedCallback">
            <summary>The action to invoke when the gesture has been triggered by the user. This is a bindable property.</summary>
            <value>An action that will be invoked.</value>
            <remarks>The object passed to the callback will be the contents of <see cref="P:Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameter" />.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameter">
            <summary>An object to be passed to the TappedCallback. This is a bindable property.</summary>
            <value>An object.</value>
            <remarks>The primary use case for this property is Xaml bindings.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameterProperty">
            <summary>Identifies the TappedCallbackParameter bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.TappedCallbackProperty">
            <summary>Identifies the TappedCallback bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.TappedEventArgs">
            <summary>Arguments for the <see cref="T:Xamarin.Forms.TappedEvent" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TappedEventArgs(System.Object)">
            <param name="parameter">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.TappedEventArgs" /> object with the supplied parameter.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TappedEventArgs.Parameter">
            <summary>Gets the parameter object for this <see cref="T:Xamarin.Forms.TappedEventArgs" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TargetIdiom">
            <summary>Indicates the type of device Forms is working on.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Desktop">
            <summary>Indicates that Forms is running on a UWP app on Windows 10.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Phone">
            <summary>Indicates that the width of the iPhone, iPod Touch, Windows Phone, or Android device on which Forms is running is narrower than 600 dips.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Tablet">
            <summary>Indicates that the width of the iPad, Windows 8.1, or Android device on which Forms is running is wider than 600 dips.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Unsupported">
            <summary>(Unused) Indicates that Forms is running on an unsupported device.</summary>
        </member>
        <member name="T:Xamarin.Forms.TargetPlatform">
            <summary>Indicates the kind of OS Forms is currently working on.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.Android">
            <summary>Indicates that Forms is running on a Google Android OS.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.iOS">
            <summary>Indicates that Forms is running on an Apple iOS OS.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.Other">
            <summary>(Unused) Indicates that Forms is running on an undefined platform.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.Windows">
            <summary>Indicates that forms is running on the Windows platform.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.WinPhone">
            <summary>Indicates that Forms is running on a Microsoft WinPhone OS.</summary>
        </member>
        <member name="T:Xamarin.Forms.TemplateBinding">
            <summary>Binds a template property to the parent of the view that owns a <see cref="T:Xamarin.Forms.ControlTemplate" />.</summary>
            <remarks>
                <para>Control templates provide reusable styling and functionality for common UI elements in an application. They do this by providing a common set of properties that bind to the parents of the View that owns the View to which the control template is bound.</para>
                <example>
                    <para>Application developers can assign these properties through XAML, as in the following example: </para>
                    <code lang="XAML"><![CDATA[
<ControlTemplate x:Key="LoginTemplate">
  <StackLayout VerticalOptions="CenterAndExpand" Spacing="20" Padding="20">
    <Entry Text="{TemplateBinding Username}" Placeholder="Username" />
    <Entry Text="{TemplateBinding Password}" Placeholder="Password" />
    <Button Command="{TemplateBinding Command}" Text="Click Here To Log In" />
  </StackLayout>
</ControlTemplate>]]></code>
                    <para>Additionally, application developers can use the <see cref="T:Xamarin.Forms.TemplateExtensions.SetBinding" /> static method to set template bindings in code.</para>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TemplateBinding">
            <summary>Creates an empty template binding.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TemplateBinding(System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String)">
            <param name="path">A string that identifies the property to which to bind.</param>
            <param name="mode">The binding mode.</param>
            <param name="converter">A type converter to use to convert strings into instances of the bound property type.</param>
            <param name="converterParameter">A parameter to pass to the converter.</param>
            <param name="stringFormat">A format string to use for displaying property values.</param>
            <summary>Creates a new TemplateBinding with the specified values. Must be non-empty and non-null.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TemplateBinding.Converter">
            <summary>Gets or sets the type converter to use to convert strings into instances of the bound property type.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TemplateBinding.ConverterParameter">
            <summary>Gets or sets a format string to use for displaying property values.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TemplateBinding.Path">
            <summary>Gets or sets a string that identifies the property to which to bind.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TemplatedPage">
            <summary>A page that displays full-screen content with a control template, and the base class for <see cref="T:Xamarin.Forms.ContentPage" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TemplatedPage">
            <summary>Creates a new empty templated page.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TemplatedPage.ControlTemplate">
            <summary>Gets or sets the control template that is used to display content.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TemplatedPage.ControlTemplateProperty">
            <summary>Backing store for the <see cref="T:Xamarin.Forms.TemplatedPage.ControlTemplate" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TemplatedView">
            <summary>A view that displays content with a control template, and the base class for <see cref="T:Xamarin.Forms.ContentView" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TemplatedView">
            <summary>Creates a new empty templated view.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TemplatedView.ControlTemplate">
            <summary>Gets or sets the control template that is used to display content.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TemplatedView.ControlTemplateProperty">
            <summary>Backing store for the <see cref="T:Xamarin.Forms.TemplatedView.ControlTemplate" /> property..</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TemplatedView.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">The X coordinate of the upper left corner of the bounding rectangle.</param>
            <param name="y">The Y coordinate of the upper left corner of the bounding rectangle.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <summary>Positions and sizes the children of the templated view within the rectangle defined by <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" />T.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TemplatedView.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The width constraint that was passed with the request.</param>
            <param name="heightConstraint">The height constraint that was passed with the request.</param>
            <summary>Method that is called when the layout updates.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TemplateExtensions">
            <summary>Extension class for DataTemplate, providing a string-based shortcut method for defining a Binding.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TemplateExtensions.SetBinding(Xamarin.Forms.DataTemplate,Xamarin.Forms.BindableProperty,System.String)">
            <param name="self">To be added.</param>
            <param name="targetProperty">To be added.</param>
            <param name="path">To be added.</param>
            <summary>Binds the <paramref name="self" /> object's <paramref name="targetProperty" /> to a new <see cref="T:Xamarin.Forms.Binding" /> instance that was created with <paramref name="path" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TextAlignment">
            <summary>Enumerates values that control text alignment.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TextAlignment.Center">
            <summary>Indicates that text will be aligned in the middle of either horizontally or vertically aligned text.</summary>
        </member>
        <member name="F:Xamarin.Forms.TextAlignment.End">
            <summary>Indicates that text will be aligned to the right or bottom of horizontally or vertically aligned text, respectively.</summary>
        </member>
        <member name="F:Xamarin.Forms.TextAlignment.Start">
            <summary>Indicates that text will be aligned to the left or top of horizontally or vertically aligned text, respectively.</summary>
        </member>
        <member name="T:Xamarin.Forms.TextCell">
            <summary>
              A <see cref="T:Xamarin.Forms.Cell" /> with primary <see cref="P:Xamarin.Forms.TextCell.Text" />  and <see cref="P:Xamarin.Forms.TextCell.Detail" /> text.
            </summary>
            <remarks>
                <para>The following example shows a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[
public class App : Application
{
    public App()
    {
        MainPage = new ContentPage {
            Content = new TableView {
                Intent = TableIntent.Form,
                Root = new TableRoot ("Table Title") {
                    new TableSection ("Section 1 Title") {
                        new TextCell {
                            Text = "TextCell Text",
                            Detail = "TextCell Detail"
                        },
                        new EntryCell {
                            Label = "EntryCell:",
                            Placeholder = "default keyboard",
                            Keyboard = Keyboard.Default
                        }
                    },
                    new TableSection ("Section 2 Title") {
                        new EntryCell {
                            Label = "Another EntryCell:",
                            Placeholder = "phone keyboard",
                            Keyboard = Keyboard.Telephone
                        },
                        new SwitchCell {
                            Text = "SwitchCell:"
                        }
                    }
                }
            }
        }; 
    }
    // OnStart, OnSleep, OnResume overrides omitted...
}]]></code>
                </example>
                <para>
                    <img href="TextCell.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TextCell">
            <summary>Initializes a new instance of the TextCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.Command">
            <summary>Gets or sets the ICommand to be executed when the TextCell is tapped. This is a bindable property.</summary>
            <value />
            <remarks>Setting the Command property has a side effect of changing the Enabled property depending on ICommand.CanExecute.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextCell.CommandParameter">
            <summary>Gets or sets the parameter passed when invoking the Command. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.CommandParameterProperty">
            <summary>Identifies the CommandParameter bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.CommandProperty">
            <summary>Identifies the Command bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.Detail">
            <summary>Gets or sets the secondary text to be displayed in the TextCell. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.DetailColor">
            <summary>Gets or sets the color to render the secondary text. This is a bindable property.</summary>
            <value>The color of the text. Color.Default is the default color value.</value>
            <remarks>Not all platforms may support transparent text rendering. Using Color.Default will result in the system theme color being used.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TextCell.DetailColorProperty">
            <summary>Identifies the DetailColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.DetailProperty">
            <summary>Gets or sets the secondary text to be displayed. This is a bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.TextCell.OnTapped">
            <summary>Invoked whenever the Cell is Tapped.</summary>
            <remarks>Overriden for TextCell.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextCell.Text">
            <summary>Gets or sets the primary text to be displayed. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.TextColor">
            <summary>Gets or sets the color to render the primary text. This is a bindable property.</summary>
            <value>The color of the text.</value>
            <remarks>Not all platforms may support transparent text rendering. Using Color.Default will result in the system theme color being used. Color.Default is the default color value.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TextCell.TextColorProperty">
            <summary>Identifies the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.TextChangedEventArgs">
            <summary>Event arguments for <c>TextChanged</c> events. Provides old and new text values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TextChangedEventArgs(System.String,System.String)">
            <param name="oldTextValue">To be added.</param>
            <param name="newTextValue">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.TextChangedEventArgs" /> with <paramref name="oldTextValue" /> and <paramref name="newTextValue" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextChangedEventArgs.NewTextValue">
            <summary>Gets the new text value.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextChangedEventArgs.OldTextValue">
            <summary>Gets the old text value.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Thickness">
            <summary>Struct defining thickness around the edges of a <see cref="T:Xamarin.Forms.Rectangle" /> using doubles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Thickness(System.Double)">
            <param name="uniformSize">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Thickness" /> object that represents a uniform thickness of size <paramref name="uniformSize" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Thickness(System.Double,System.Double)">
            <param name="horizontalSize">To be added.</param>
            <param name="verticalSize">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Thickness" /> object that has a horizontal thickness of <paramref name="horizontalSize" /> and a vertical thickness of <paramref name="verticalSize" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Thickness(System.Double,System.Double,System.Double,System.Double)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Thickness" /> object with thicknesses defined by <paramref name="left" />, <paramref name="top" />, <paramref name="right" />, and <paramref name="bottom" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Bottom">
            <summary>The thickness of the bottom of a rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.Equals(System.Object)">
            <param name="obj">A <see cref="T:Xamarin.Forms.Thickness" /> to be compared.</param>
            <summary>Whether the <paramref name="obj" /> is a <see cref="T:Xamarin.Forms.Thickness" /> with equivalent values.</summary>
            <returns>
                <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:Xamarin.Forms.Thickness" /> and has equivalent values..</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.GetHashCode">
            <summary>A has value for this <see cref="T:Xamarin.Forms.Thickness" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.HorizontalThickness">
            <summary>The sum of <see cref="P:Xamarin.Forms.Thickness.Left" /> and <see cref="P:Xamarin.Forms.Thickness.Right" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Left">
            <summary>The thickness of the left side of a rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Equality(Xamarin.Forms.Thickness,Xamarin.Forms.Thickness)">
            <param name="left">A <see cref="T:Xamarin.Forms.Thickness" /> to be compared.</param>
            <param name="right">A <see cref="T:Xamarin.Forms.Thickness" /> to be compared.</param>
            <summary>Whether two <see cref="T:Xamarin.Forms.Thickness" />es have identical values.</summary>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> have identical values for <see cref="P:Xamarin.Forms.Thickness.Left" />,<see cref="P:Xamarin.Forms.Thickness.Right" />, <see cref="P:Xamarin.Forms.Thickness.Top" />, and <see cref="P:Xamarin.Forms.Thickness.Bottom" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Implicit(System.Double)~Xamarin.Forms.Thickness">
            <param name="uniformSize">The value for the uniform Thickness.</param>
            <summary>Implicit cast operator from <see cref="T:System.Double" />.</summary>
            <returns>A Thickness with an uniform size.</returns>
            <remarks>
                <para>Application developers should bear in mind that <see cref="P:Xamarin.Forms.Thickness.HorizontalThickness" /> and <see cref="P:Xamarin.Forms.Thickness.VerticalThickness" /> are the sums of their components, so a <see cref="T:Xamarin.Forms.Thickness" /> created from a <paramref name="uniformSize" /> of, for instance, 1.0, will have <see cref="P:Xamarin.Forms.Thickness.HorizontalThickness" /> of 2.0.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Implicit(Xamarin.Forms.Size)~Xamarin.Forms.Thickness">
            <param name="size">A <see cref="T:Xamarin.Forms.Size" /> to convert to a <see cref="T:Xamarin.Forms.Thickness" /></param>
            <summary>Converts a <see cref="T:Xamarin.Forms.Size" /> into a <see cref="T:Xamarin.Forms.Thickness" />.</summary>
            <returns>To be added.</returns>
            <remarks>
                <para>The <see cref="T:Xamarin.Forms.Thickness" />'s <see cref="P:Xamarin.Forms.Thickness.Left" /> and <see cref="P:Xamarin.Forms.Thickness.Right" /> are both set equal to the <paramref name="size" />'s <see cref="P:Xamarin.Forms.Size.Width" /> and the  <see cref="T:Xamarin.Forms.Thickness" />'s <see cref="P:Xamarin.Forms.Thickness.Top" /> and <see cref="P:Xamarin.Forms.Thickness.Bottom" /> are both set equal to the <paramref name="size" />'s <see cref="P:Xamarin.Forms.Size.Height" />.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Inequality(Xamarin.Forms.Thickness,Xamarin.Forms.Thickness)">
            <param name="left">A <see cref="T:Xamarin.Forms.Thickness" /> to be compared.</param>
            <param name="right">A <see cref="T:Xamarin.Forms.Thickness" /> to be compared.</param>
            <summary>Whether the values of two <see cref="T:Xamarin.Forms.Thickness" />'s have at least one difference.</summary>
            <returns>
                <see langword="true" /> if any of the <see cref="P:Xamarin.Forms.Thickness.Left" />,<see cref="P:Xamarin.Forms.Thickness.Right" />, <see cref="P:Xamarin.Forms.Thickness.Top" />, and <see cref="P:Xamarin.Forms.Thickness.Bottom" /> values differ between <paramref name="left" /> and <paramref name="right" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Right">
            <summary>The thickness of the right side of a rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Top">
            <summary>The thickness of the top of a rectangle.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.VerticalThickness">
            <summary>The sum of <see cref="P:Xamarin.Forms.Thickness.Top" /> and <see cref="P:Xamarin.Forms.Thickness.Bottom" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ThicknessTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from a string to a <see cref="T:Xamarin.Forms.Thickness" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ThicknessTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.ThicknessTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ThicknessTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.ThicknessTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.Thickness" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ThicknessTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.Thickness" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ThicknessTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a <see cref="T:Xamarin.Forms.Thickness" /> for a comma-separated list of doubles.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TimePicker">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that provides time picking.</summary>
            <remarks>
                <para>The visual representation of a TimePicker is very similar to the one of <see cref="T:Xamarin.Forms.Entry" />, except that a special control for picking a time appears in place of a keyboard.</para>
                <para>
    The following example shows declaration of a TimePicker with a default time set.
    </para>
                <example>
                    <code lang="C#"><![CDATA[
var beeroclock = new TimePicker () { Time = new TimeSpan (17,0,0) };
    ]]></code>
                </example>
                <para>
                    <img href="TimePicker.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TimePicker">
            <summary>Initializes a new TimePicker instance.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TimePicker.Format">
            <summary>The format of the time to display to the user. This is a bindable property.</summary>
            <value>A valid time format string.</value>
            <remarks>Format string is the same is passed to DateTime.ToString (string format).</remarks>
        </member>
        <member name="F:Xamarin.Forms.TimePicker.FormatProperty">
            <summary>Identifies the Format bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TimePicker.TextColor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TimePicker.TextColorProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TimePicker.Time">
            <summary>Gets or sets the displayed time. This is a bindable property.</summary>
            <value>The <see cref="T:System.TimeSpan" /> displayed in the TimePicker.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TimePicker.TimeProperty">
            <summary>Identifies the Time bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ToggledEventArgs">
            <summary>Event arguments for <see cref="E:Xamarin.Forms.Switch.Toggled" /> and <see cref="E:Xamarin.Forms.SwitchCell.OnChanged" /> events.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ToggledEventArgs(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.ToggledEventArgs" /> that indicates that the toggle control was toggled to <paramref name="value" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToggledEventArgs.Value">
            <summary>Gets the Boolean value to which the toggle control was toggled.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ToolbarItem">
            <summary>An item in a toolbar or displayed on a <see cref="T:Xamarin.Forms.Page" />.</summary>
            <remarks>
                <para>Any changes made to the properties of the toolbar item after it has been added will be ignored.</para>
                <block type="note">Windows Phone ApplicationBarButtons and MenuItems always display an associated text. Therefore, when developing for Windows Phone, application devs should provide a value for the <see cref="P:Xamarin.Forms.ToolbarItem.Text" /> property. Otherwise, the file name of the icon image will be dixplayed as the text of the <see cref="T:Xamarin.Forms.ToolbarItem" />. (For example, the user might see "menu.png" in the user interface.)</block>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ToolbarItem">
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.ToolbarItem" /> class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ToolbarItem(System.String,System.String,System.Action,Xamarin.Forms.ToolbarItemOrder,System.Int32)">
            <param name="name">To be added.</param>
            <param name="icon">To be added.</param>
            <param name="activated">To be added.</param>
            <param name="order">To be added.</param>
            <param name="priority">To be added.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.ToolbarItem" /> class.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.ToolbarItem.Activated">
            <summary>Raised when the <see cref="T:Xamarin.Forms.ToolbarItem" /> is touched or clicked.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Command">
            <summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> to be invoked on activation.</summary>
            <value>The <see cref="T:System.Windows.Input.ICommand" /> to be invoked on activation.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.CommandParameter">
            <summary>Gets or sets the parameter to pass to the <see cref="T:System.Windows.Input.ICommand" /> that is invoked on activation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItem.CommandParameterProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ToolBarItem.ComandParameter" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItem.CommandProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.ToolBarItem.Comand" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Icon">
            <summary>Gets or sets a string that identifies the image that is displayed on this <see cref="T:Xamarin.Forms.ToolbarItem" /> element.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Name">
            <summary>Gets or sets the name of the <see cref="T:Xamarin.Forms.ToolbarItem" />.</summary>
            <value>The name of the toolbar item..</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Order">
            <summary>Gets or sets a value that indicates on which of on the primary, secondary, or default toolbar surfaces to display this <see cref="T:Xamarin.Forms.ToolbarItem" /> element.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Priority">
            <summary>Gets or sets the priority of this <see cref="T:Xamarin.Forms.ToolbarItem" /> element.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Xamarin#Forms#IElement#Parent">
            <summary>Gets or sets the toolbar to which this <see cref="T:Xamarin.Forms.ToolbarItem" /> element belongs.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Xamarin#Forms#IElement#XamlParent">
            <summary>Gets or sets a weak reference to the parent of this <see cref="T:Xamarin.Forms.ToolbarItem" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ToolbarItemOrder">
            <summary>Enumeration specifying whether the <see cref="T:Xamarin.Forms.ToolbarItem" /> appears on the primary toolbar surface or secondary.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItemOrder.Default">
            <summary>Use the default choice for the toolbar item.</summary>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItemOrder.Primary">
            <summary>Place the toolbar item on the primary toolbar surface.</summary>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItemOrder.Secondary">
            <summary>Place the toolbar item on the secondary toolbar surface.</summary>
        </member>
        <member name="T:Xamarin.Forms.Trigger">
            <summary>Class that represents a property condition and an action that is performed when the condition is met.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Trigger(System.Type)">
            <param name="targetType">To be added.</param>
            <summary>Initializes a new <see cref="T:Xamarin.Forms.Trigger" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Trigger.Property">
            <summary>Gets or sets the property whose value will be compared to <see cref="P:Xamarin.Forms.Trigger.Value" /> to determine when to invoke the setters.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Trigger.Setters">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.Setter" /> objects that will be applied when the property that is named by <see cref="P:Xamarin.Forms.Trigger.Property" /> becomes equal to <see cref="P:Xamarin.Forms.Trigger.Value" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Trigger.Value">
            <summary>Gets or sets the value of the property, named by the <see cref="P:Xamarin.Forms.Trigger.Property" /> property, that will cause the setters to be applied.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Trigger.Xamarin#Forms#Xaml#IValueProvider#ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>This property supports XAML infrastructure and is not intended to be directly used by application developers.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TriggerAction">
            <summary>A base class for user-defined actions that are performed when a trigger condition is met.</summary>
            <remarks>Application developers should use <see cref="T:Xamarin.Forms.TriggerAction`1" />, instead.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TriggerAction(System.Type)">
            <param name="associatedType">The type of the objects with which this <see cref="T:Xamarin.Forms.TriggerAction" /> can be associated.</param>
            <summary>Creates a new instance of the TriggerAction class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TriggerAction.AssociatedType">
            <summary>Gets the type of the objects with which this <see cref="T:Xamarin.Forms.TriggerAction" /> can be associated.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TriggerAction.Invoke(System.Object)">
            <param name="sender">To be added.</param>
            <summary>Application developers override this method to provide the behavior that is triggered.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TriggerAction`1">
            <typeparam name="T">The type of which the <see cref="P:Xamarin.Forms.TriggerAction`1.AttachedObject" /> property must be an instance.</typeparam>
            <summary>A generic base class for user-defined actions that are performed when a trigger condition is met.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TriggerAction`1">
            <summary>Creates a new instance of the <see cref="T:Xamarin.Forms.TriggerAction`1" /> class.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.TriggerAction`1.Invoke(System.Object)">
            <param name="sender">To be added.</param>
            <summary>Application developers override this method to provide the action that is performed when the trigger condition is met.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TriggerAction`1.Invoke(T)">
            <param name="sender">To be added.</param>
            <summary>Application developers override this method to provide the action that is performed when the trigger condition is met.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TriggerBase">
            <summary>Base class for classes that contain a condition and a list of actions to perform when the condition is met.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TriggerBase.EnterActions">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.TirggerAction" /> objects that will be invoked when the trigger condition is met. Ignored for the <see cref="T:Xamarin.Forms.EventTrigger" /> class.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TriggerBase.ExitActions">
            <summary>Gets the list of <see cref="T:Xamarin.Forms.TirggerAction" /> objects that will be invoked after the trigger condition is no longer met. Ignored for the <see cref="T:Xamarin.Forms.EventTrigger" /> class.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TriggerBase.IsSealed">
            <summary>Gets a value that indicates whether or not the trigger is sealed.</summary>
            <value>To be added.</value>
            <remarks>A trigger becomes sealed when its <see cref="M:Xamarin.Forms.IAttachedObject.AttachTo" /> method is called. Once it is sealed, its <see cref="P:Xamarin.Forms.TriggerBase.EnterActions" /> and <see cref="P:Xamarin.Forms.TriggerBase.ExitActions" /> lists become readonly.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TriggerBase.TargetType">
            <summary>The type of object to which this <see cref="T:Xamarin.Forms.TriggerBase" /> object can be attached.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TriggerBase.Xamarin#Forms#IAttachedObject#AttachTo(Xamarin.Forms.BindableObject)">
            <param name="bindable">To be added.</param>
            <summary>Attempts to attach to <paramref name="bindable" />. If successful, calls the <see cref="M:Xamarin.Forms.TriggerBase.OnAttachedTo" /> method.</summary>
            <remarks>This method throws an exception if <paramref name="bindable" /> is not an instance of <see cref="P:Xamarin.Forms.TriggerBase.TargetType" />. In that case, the <see cref="M:Xamarin.Forms.TriggerBase.OnAttachedTo" /> method is not called.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TriggerBase.Xamarin#Forms#IAttachedObject#DetachFrom(Xamarin.Forms.BindableObject)">
            <param name="bindable">To be added.</param>
            <summary>Attempts to detach from <paramref name="bindable" />. If successful, calls <see cref="M:Xamarin.Forms.TriggerBase.OnDetachedFrom" />..</summary>
            <remarks>This method throws an exception if <paramref name="bindable" /> is <see langword="null" />. In that case, the <see cref="M:Xamarin.Forms.TriggerBase.OnDetachedFrom" /> method is not called.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TypeConverter">
            <summary>Abstract base class whose subclasses can convert values between different types.</summary>
            <remarks>
                <para>The following diagram shows subclasses of <see cref="T:Xamarin.Forms.TypeConverter" />.</para>
                <para>
                    <img href="TypeConverter.Hierarchy.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.TypeConverter" /> object.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>When implemented in a derived class, returns a Boolean value that indicates whether or not the derived type converter can convert <paramref name="sourceType" /> to its target type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverter.ConvertFrom(System.Object)">
            <param name="o">To be added.</param>
            <summary>Calls <see cref="M:Xamarin.Forms.TypeConverter.ConvertFrom(System.Globalization.CultureInfo, object)" /> with the current culture information and <paramref name="o" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="o">To be added.</param>
            <summary>When implemented in a derived class, converts an object that is a version of <paramref name="value" /> and that can be cast to the target type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>When overriden in a derived class, converts XAML extension syntax into instances of various <see cref="N:Xamarin.Forms" /> types.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TypeConverterAttribute">
            <summary>Attribute that specifies the type of <see cref="T:Xamarin.Forms.TypeConverter" /> used by its target.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverterAttribute">
            <summary>Creates a new <see cref="T:Xamarin.Forms.TypeConverterAttribute" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverterAttribute(System.String)">
            <param name="typeName">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.TypeConverterAttribute" /> object that specifies that the class it decorates converts values to the <paramref name="typeName" /> type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverterAttribute(System.Type)">
            <param name="type">To be added.</param>
            <summary>reates a new <see cref="T:Xamarin.Forms.TypeConverterAttribute" /> object that specifies that the class it decorates converts values to <paramref name="type" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TypeConverterAttribute.ConverterTypeName">
            <summary>The name of the type to which the class decorated with this attribute can convert values.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TypeConverterAttribute.Default">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverterAttribute" /> that contains no information about the types to which the class that it decorates can convert values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverterAttribute.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>Returns true if <paramref name="obj" /> is a <see cref="T:Xamarin.Forms.TypeConverterAttribute" /> and has the same <see cref="P:Xamarin.Forms.TypeConverterAttribute.ConverterTypeName" /> value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverterAttribute.GetHashCode">
            <summary>Returns a value that is used for efficient storage and lookup of this <see cref="T:Xamarin.Forms.TypeConverterAttribute" /> object.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TypeTypeConverter">
            <summary>Class that takes a string representation of a <see cref="T:System.Type" /> and returns a corresponding <see cref="T:System.Type" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.TypeTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns <see langword="true" /> if the converter can create and return a <see cref="T:System.Type" /> for items of the specified source type. Otherwise, <see langword="false" />.</summary>
            <returns>
                <see langword="true" /> if the converter can create and return a <see cref="T:System.Type" /> for items of the specified source type. Otherwise, <see langword="false" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Creates and returns a <see cref="T:System.Type" /> for the specified <paramref name="value" /> and <paramref name="culture" />.</summary>
            <returns>A <see cref="T:System.Type" /> for the specified <paramref name="value" /> and <paramref name="culture" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a type for a valid type name.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeTypeConverter.Xamarin#Forms#IExtendedTypeConverter#ConvertFrom(System.Globalization.CultureInfo,System.Object,System.IServiceProvider)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>For internal use only.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeTypeConverter.Xamarin#Forms#IExtendedTypeConverter#ConvertFromInvariantString(System.String,System.IServiceProvider)">
            <param name="value">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>For internal use only.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UnsolvableConstraintsException">
            <summary>Exception indicating that the <see cref="T:Xamarin.Forms.Constraint" />s specified cannot be simultaneously satisfied.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UnsolvableConstraintsException(System.String)">
            <param name="message">A description for this exception.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.UnsolvableConstraintsException" /> object with the <paramref name="message" /> explanatory message.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UriImageSource">
            <summary>An ImageSource that loads an image from a URI, caching the result.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UriImageSource">
            <summary>Creates a new <see cref="T:Xamarin.Forms.UriImageSource" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UriImageSource.CacheValidity">
            <summary>Gets or sets a <see cref="T:System.TimeSpan" /> structure that indicates the length of time after which the image cache becomes invalid.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UriImageSource.CachingEnabled">
            <summary>Gets or sets a Boolean value that indicates whether caching is enabled on this <see cref="T:Xamarin.Forms.UriImageSource" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UriImageSource.Uri">
            <summary>Gets or sets the URI for the image to get.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.UriImageSource.UriProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.UriImageSource.Uri" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UriTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from a string or <see cref="T:System.Uri" /> to a <see cref="T:System.Uri" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UriTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.UriTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.UriTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.UriTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:System.Uri" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.UriTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:System.Uri" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.UriTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a <see cref="T:System.Uri" /> object for a string representation of a URI.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UrlWebViewSource">
            <summary>A WebViewSource bound to a URL.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UrlWebViewSource">
            <summary>Creates a new <see cref="T:Xamarin.Forms.UrlWebViewSource" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UrlWebViewSource.Url">
            <summary>Gets or sets the URL for this <see cref="T:Xamarin.Forms.UrlWebViewSource" /> object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.UrlWebViewSource.UrlProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.UrlWebViewSource.Url" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ValueChangedEventArgs">
            <summary>Event arguments for <c>ValueChanged</c> events. Provides both old and new values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ValueChangedEventArgs(System.Double,System.Double)">
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.ValueChangedEventArgs" /> event with <paramref name="oldValue" /> and <paramref name="newValue" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ValueChangedEventArgs.NewValue">
            <summary>Gets the new value.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ValueChangedEventArgs.OldValue">
            <summary>Gets the old value.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Vec2">
            <summary>Struct defining X and Y double values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Vec2(System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>Creates a new <see cref="T:Xamarin.Forms.Vec2" /> that is defined by <paramref name="x" /> and <paramref name="y" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Vec2.X">
            <summary>The horizontal coordinate.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Vec2.Y">
            <summary>The vertical coordinate.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.View">
            <summary>A visual element that is used to place layouts and controls on the screen.</summary>
            <remarks>
                <para>The <see cref="T:Xamarin.Forms.View" /> class is a base class for the <see cref="T:Xamarin.Forms.Layout" /> class, and most of the controls that application developers will use. Nearly all UI elements that an application developer will use are derived from <see cref="T:Xamarin.Forms.View" /> class. Because the <see cref="T:Xamarin.Forms.View" /> class ultimately inherits from <see cref="T:Xamarin.Forms.BindableObject" /> class, application developers can use the Model-View-ViewModel architecture, as well as XAML, to develop portable user interfaces. The remarks in the <see cref="T:Xamarin.Forms.BindableObject" /> topic provide a discussion of MVVM and bound properties.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.View">
            <summary>Initializes a new instance of the View class.</summary>
            <remarks>It is unlikely that an application developer would want to create a new View instance on their own.</remarks>
        </member>
        <member name="P:Xamarin.Forms.View.GestureRecognizers">
            <summary>The collection of gesture recognizers associated with this view.</summary>
            <value>A List of <see cref="T:Xamarin.Forms.IGestureRecognizer" />.</value>
            <remarks>
                <para>
            Adding items to this collection will associate gesture events with this element. This is not nessesary for elements which natively support input, such as a Button.
          </para>
                <para>
              This example creates a tap gesture recognizer and associates it with an image. When the image is double tapped, it will become semi-transparent.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  var image = new Image {Source = "image.png"};
  var gestureRecognizer = new TapGestureRecognizer {
    TappedCallback = o => image.Opacity = 0.5,
    NumberOfTapsRequired = 2
  };
  image.GestureRecognizers.Add (gestureRecognizer);
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.View.HorizontalOptions">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.LayoutOptions" /> that define how the element gets laid in a layout cycle. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.LayoutOptions" /> which defines how to lay out the element. Default value is <see cref="F:Xamarin.Forms.LayoutOptions.Fill" /> unless otherwise documented.</value>
            <remarks>
                <para>
            Assigning the HorizontalOptions modifies how the element is laid out when there is excess space available along the X axis from the parent layout. Additionally it specifies if the element should consume leftover space in the X axis from the parent layout. If multiple children of a layout are set to expand, the extra space is distributed proportionally.
          </para>
                <para>
              This example creates four views and adds them to a stack, each laying out in a different manner.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  private View CreateButtons ()
  {
    var button1 = new Button {Text = "LeftAligned", HorizontalOptions=LayoutOptions.Start};
    var button2 = new Button {Text = "CenterAligned", HorizontalOptions=LayoutOptions.Center};
    var button3 = new Button {Text = "EndAligned", HorizontalOptions=LayoutOptions.End};
    var button4 = new Button {Text = "Fill", HorizontalOptions=LayoutOptions.Fill};

    StackLayout stack = new StackLayout {
      Children = {
        button1,
        button2,
        button3,
        button4
      }
    };

    return stack;
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.View.HorizontalOptionsProperty">
            <summary>Identifies the HorizontalOptions bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.View.Margin">
            <summary>Gets or sets the margin for the view.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.View.MarginProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.View.Margin" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.View.OnBindingContextChanged">
            <summary>Invoked whenever the binding context of the <see cref="T:Xamarin.Forms.View" /> changes. Override this method to add class handling for this event.</summary>
            <remarks>
                <para>Overriders must call the base method.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.View.VerticalOptions">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.LayoutOptions" /> that define how the element gets laid in a layout cycle. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.LayoutOptions" /> which defines how to lay out the element. Default value is <see cref="F:Xamarin.Forms.LayoutOptions.Fill" /> unless otherwise documented.</value>
            <remarks>
                <para>
            Assigning the VerticalOptions modifies how the element is laid out when there is excess space available along the Y axis from the parent layout. Additionally it specifies if the element should consume leftover space in the Y axis from the parent layout. If multiple children of a layout are set to expand, the extra space is distributed proportionally.
          </para>
                <para>
              This example creates four views and adds them to a stack, each laying out in a different manner.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  private View CreateButtons ()
  {
    var button1 = new Button {Text = "TopAligned", VerticalOptions=LayoutOptions.Start};
    var button2 = new Button {Text = "CenterAligned", VerticalOptions=LayoutOptions.Center};
    var button3 = new Button {Text = "BottomAligned", VerticalOptions=LayoutOptions.End};
    var button4 = new Button {Text = "Fill", VerticalOptions=LayoutOptions.Fill};

    StackLayout stack = new StackLayout {
      Orientation = StackOrientation.Horizontal,
      Children = {
        button1,
        button2,
        button3,
        button4
      }
    };

    return stack;
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.View.VerticalOptionsProperty">
            <summary>Identifies the VerticalOptions bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ViewCell">
            <summary>A <see cref="T:Xamarin.Forms.Cell" /> containing a developer-defined <see cref="T:Xamarin.Forms.View" />.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ViewCell">
            <summary>Initializes a new instance of the ViewCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ViewCell.View">
            <summary>Gets or sets the View representing the content of the ViewCell.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ViewExtensions">
            <summary>Extension methods for <see cref="T:Xamarin.Forms.View" />s, providing animatable scaling, rotation, and layout functions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.CancelAnimations(Xamarin.Forms.VisualElement)">
            <param name="view">To be added.</param>
            <summary>Aborts the TranslateTo, LayoutTo, RotateTo, ScaleTo, and FadeTo animations on <paramref name="view" /> element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.FadeTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="opacity">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Returns a task that performs the fade that is described by the <paramref name="opacity" />, <paramref name="length" />, and <paramref name="easing" /> parameters.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.LayoutTo(Xamarin.Forms.VisualElement,Xamarin.Forms.Rectangle,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="bounds">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Returns a task that eases the bounds of the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by the <paramref name="view" /> to the rectangle that is specified by the <paramref name="bounds" /> parameter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RelRotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="drotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Rotates the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by <paramref name="view" /> from its current rotation by <paramref name="drotation" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RelScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="dscale">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Returns a task that scales the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by <paramref name="view" /> from its current scale to <paramref name="dscale" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Returns a task that performs the rotation that is described by the <paramref name="rotation" />, <paramref name="length" />, and <paramref name="easing" /> parameters..</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RotateXTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Returns a task that skews the Y axis by <paramref name="opacity" />, taking time <paramref name="length" /> and using <paramref name="easing" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RotateYTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Returns a task that skews the X axis by <paramref name="opacity" />, taking time <paramref name="length" /> and using <paramref name="easing" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.ScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="scale">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Returns a task that scales the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by <paramref name="view" /> to the absolute scale factor <paramref name="scale" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.TranslateTo(Xamarin.Forms.VisualElement,System.Double,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">The view to tanslate.</param>
            <param name="x">The x component of the final translation vector.</param>
            <param name="y">The y component of the final translation vector.</param>
            <param name="length">The duration of the animation in milliseconds.</param>
            <param name="easing">The easing of the animation.</param>
            <summary>Animates an elements TranslationX and TranslationY properties from their current values to the new values.</summary>
            <returns>To be added.</returns>
            <remarks>Translate to is particular useful for animations because it is applied post-layout. Translation animations will not conflict with managed layouts and thus are ideal for doing slide in/out style animations.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ViewState">
            <summary>Deprecated. Do not use.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ViewState.Default">
            <summary>Deprecated. Do not use.</summary>
        </member>
        <member name="F:Xamarin.Forms.ViewState.Prelight">
            <summary>Deprecated. Do not use.</summary>
        </member>
        <member name="F:Xamarin.Forms.ViewState.Pressed">
            <summary>Deprecated. Do not use..</summary>
        </member>
        <member name="T:Xamarin.Forms.VisualElement">
            <summary>A <see cref="T:Xamarin.Forms.Element" /> that occupies an area on the screen, has a visual appearance, and can obtain touch input.</summary>
            <remarks>
                <para>The base class for most Xamarin.Forms on-screen elements. Provides most properties, events, and methods for presenting an item on screen.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.AnchorX">
            <summary>Gets or sets the X component of the center point for any transform, relative to the bounds of the element. This is a bindable property.</summary>
            <value>The value that declares the X component of the transform. The default value is 0.5.</value>
            <remarks>To be added.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.AnchorY" />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.AnchorXProperty">
            <summary>Identifies the AnchorX bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.AnchorY">
            <summary>Gets or sets the Y component of the center point for any transform, relative to the bounds of the element. This is a bindable property.</summary>
            <value>The value that declares the Y component of the transform. The default value is 0.5.</value>
            <remarks>To be added.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.AnchorX" />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.AnchorYProperty">
            <summary>Identifies the AnchorY bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.BackgroundColor">
            <summary>Gets or sets the color which will fill the background of a VisualElement. This is a bindable property.</summary>
            <value>The color that is used to fill the background of a VisualElement. The default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.BackgroundColorProperty">
            <summary>Identifies the BackgroundColor bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.BatchBegin">
            <summary>Signals the start of a batch of changes to the elements properties.</summary>
            <remarks>Application authors will not generally need to batch updates manually as the animation framework will do this for them.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.BatchCommit">
            <summary>Signals the end of a batch of commands to the element and that those commands should now be committed.</summary>
            <remarks>This method merely ensures that updates sent during the batch have been committed. It does not ensure that they were not committed before calling this.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Behaviors">
            <summary>Gets the list of Behavior associated to this element. This is a bindable propery.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.BehaviorsProperty">
            <summary>Identifies the Behaviors bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Bounds">
            <summary>Gets the bounds of the element.</summary>
            <value>The bounds of an element, in device-independent units.</value>
            <remarks>Bounds is assigned during the Layout cycle by a call to <see cref="M:Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle)" />.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.WidthRequest" />
            <altmember cref="P:Xamarin.Forms.VisualElement.HeightRequest" />
        </member>
        <member name="E:Xamarin.Forms.VisualElement.ChildrenReordered">
            <summary>Occurs when the Children of a VisualElement have been re-ordered.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Focus">
            <summary>Attemps to set focus to this element.</summary>
            <returns>
                <see langword="true" /> if the keyboard focus was set to this element; <see langword="false" /> if the call to this method did not force a focus change.</returns>
            <remarks>Element must be able to receive focus for this to work. Calling Focus on offscreen or unrealized elements has undefined behavior.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.Focused">
            <summary>Occurs when the element receives focus.</summary>
            <remarks>Focused event is raised whenever the VisualElement receives focus. This event is not bubbled through the Forms stack and is received directly from the native control. This event is emitted by the IsFocusedProperty setter.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.IsFocused" />
            <altmember cref="M:Xamarin.Forms.VisualElement.Focus()" />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.GetSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width that a parent element can allocated to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <param name="heightConstraint">The available height that a parent element can allocated to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <summary>Returns the <see cref="T:Xamarin.Forms.SizeRequest" /> of the element. Calling this method begins the measure pass of a layout cycle.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains a requested size and a minimum size.</returns>
            <remarks>Calling GetSizeRequest causes a measure pass to occur for the subtree of elements it is called on. It is ideal to only call GetSizeRequest when needed as excessive calls can negatively impact the performance of your app. Overriding GetSizeRequest should only be done if you want to ignore Width/HeightRequest. More likely a subclass would wish to override <see cref="M:Xamarin.Forms.VisualElement.OnSizeRequest (double, double)" />.</remarks>
            <altmember cref="M:Xamarin.Forms.OnSizeRequest (double, double)" />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Height">
            <summary>Gets the current rendered height of this element. This is a read-only bindable property.</summary>
            <value>The renderered height of this element.</value>
            <remarks>The height of an element is set during the Layout phase.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.HeightProperty">
            <summary>Identifies the Height bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.HeightRequest">
            <summary>Gets or sets the desired height override of this element.</summary>
            <value>The height this element desires to be.</value>
            <remarks>HeightRequest does not immediately change the Bounds of a VisualElement, however setting the HeightRequest will change the result of calls to GetSizeRequest, which will in turn modify the final size the element receives during a layout cycle.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.HeightRequestProperty">
            <summary>Backing store for the HeightRequest property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.InputTransparent">
            <summary>Gets or sets a value indicating whether this element should be involved in the user interaction cycle. This is a bindable property.</summary>
            <value>
                <see langword="false" /> if the element should receive input; <see langword="true" /> if element should not receive input and should, instead, pass inputs to the element below. Default is <see langword="false" />.</value>
            <remarks>Setting InputTransparent is not the same as setting IsEnabled to false. Setting InputTransparent only disables inputs and instead causes them to be passed to the VisualElement below the element. Usually this is the parent of the element.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.IsEnabled" />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.InputTransparentProperty">
            <summary>Identifies the InputTransparent bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.InvalidateMeasure">
            <summary>Method that is called to invalidate the layout of this <see cref="T:Xamarin.Forms.VisualElement" />. Raises the <see cref="E:Xamarin.Forms.VisualElement.MeasureInvalidated" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.IsEnabled">
            <summary>Gets or sets a value indicating whether this element is enabled in the user interface. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />. The default value is <see langword="true" /></value>
            <remarks>
                <para>
            Elements that are not enabled do not participate in hit detection, and therefore will not receive focus or emit input events.
          </para>
                <para>
              The following example shows a handler on a button which will then set IsEnabled to false on another button.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  public partial class ButtonDisableExample {
    void BuildButtons ()
    {
      Button button1 = new Button {Text = "New button"};
      Button button2 = new Button {Text = "Disabled on click"};
      button1.Activated += (o, e) => button2.IsEnabled = false;
    }
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.IsEnabledProperty">
            <summary>Identifies the IsEnabled bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.IsFocused">
            <summary>Gets a value indicating whether this element is focused currently. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element is focused; otherwise, <see langword="false" />.</value>
            <remarks>
                <para>
            Applications may have multiple focuses depending on the implementation of the underlying toolkit. Menus and modals in particular may leave multiple items with focus.
          </para>
                <para>
              The following example shows conditionally setting a background color based on the focus state.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  void UpdateBackground ()
  {
    if (myElement.IsFocused)
      myElement.BackgroundColor = Color.Red;
    else
      myElement.BackgroundColor = Color.Blue;
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.IsFocusedProperty">
            <summary>Identifies the IsFocused bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.IsVisible">
            <summary>Gets or sets a value that determines whether this elements should be part of the visual tree or not. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element should be rendered; otherwise, <see langword="false" />. Default value is <see langword="true" />.</value>
            <remarks>
                <para>Setting IsVisible to false will remove the element from the visual tree. The element will no longer take up space in layouts or be eligle to receive any kind of input event.</para>
                <para>
              The following example shows a stack where the middle element is toggled when a button is activated.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  partial class LabelToggle {
    Label label;

    void Build ()
    {
      var firstView = new Button {Text = "Tap Me"};
      label = new Label {Text = "I can be toggled"};
      var thirdView = new Image {Source = "image.png"};

      firstView.Activated += OnButtonActivated;

      Content = new StackLayout {
        Children {
          firstView,
          label,
          thirdView
        }
      };
    }

    void OnButtonActivated (object sender, EventArgs args)
    {
      label.IsVisible = !label.IsVisible;
    }
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.IsVisibleProperty">
            <summary>Identifies the IsVisible bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle)">
            <param name="bounds">The new bounds of the element.</param>
            <summary>Updates the bounds of the element during the layout cycle.</summary>
            <remarks>Calling Layout will trigger a layout cycle for the sub-tree of this element.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Measure(System.Double,System.Double,Xamarin.Forms.MeasureFlags)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>Measures a visual element for layout operations.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.MeasureInvalidated">
            <summary>Event that is raised when the layout of a visual element is invalidated.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.MinimumHeightRequest">
            <summary>Gets or sets a value which overrides the minimum height the element will request during layout.</summary>
            <value>The minimum height the element requires. Default value is -1.</value>
            <remarks>
                <para>
            MinimumHeightRequest is used to override the results of a call to <see cref="M:Xamarin.Forms.VisualElement.GetSizeRequest (double, double)" /> by setting the minimum height property. This causes overflow handling to shrink this element to its minimum height before elements who do not have a minimum size set.
          </para>
                <para>
              The following example sets the MinimumHeightRequest to enable an image to shrink below it's normal size.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  void Build (string veryLongString)
  {
    var label = new Label {Text = veryLongString};
    var image = new Image {Source = "image500x500.png"};

    image.MinimumHeightRequest = 20;
    Content = new StackLayout {
      Children {
        label,
        image
      }
    };
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.MinimumHeightRequestProperty">
            <summary>Backing store for the MinimumHeightRequest property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.MinimumWidthRequest">
            <summary>Gets or sets a value which overrides the minimum width the element will request during layout.</summary>
            <value>The minimum width the element requires. Default value is -1.</value>
            <remarks>
                <para>
            MinimumWidthRequest is used to override the results of a call to <see cref="M:Xamarin.Forms.VisualElement.GetSizeRequest (double, double)" /> by setting the minimum width property. This causes overflow handling to shrink this element to its minimum width before elements who do not have a minimum size set.
          </para>
                <para>
              The following example sets the MinimumWidthRequest to enable an image to shrink below it's normal size.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  void Build (string veryLongString)
  {
    var label = new Label {Text = veryLongString};
    var image = new Image {Source = "image500x500.png"};

    image.MinimumWidthRequest = 20;
    Content = new StackLayout {
      Orientation = StackOrientation.Horizontal,
      Children {
        label,
        image
      }
    };
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.MinimumWidthRequestProperty">
            <summary>Backing store for the MinimumWidthRequest property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Navigation">
            <summary>Gets the context aware navigation interface for the element.</summary>
            <value>An <see cref="T:Xamarin.Forms.INavigation" /> that allows for navigation using the ancestral navigation implementor.</value>
            <remarks>
                <para>
            Use the Navigation property to perform navigation from any element. If the element has not yet been added to a tree which contains a navigation implementor, the actions are queued up until it is.
          </para>
                <para>
            The following example navigates to a new page created in the callback of a buttons <see cref="E:Xamarin.Forms.VisualElement.Activated" /> event.</para>
                <example>
                    <code lang="C#"><![CDATA[
  partial class NavigationTest {
    void BuildContent 
    {
      Button button = new Button {Text = "Tap to Navigate"};
      button.Activated += OnButtonActivated;
    }

    void OnButtonActivated (object sender, EventArgs args)
    {
      Button button = (Button) sender;
      Page newPage = new ContentPage {
        Content = new Label {Text = "Hello New Page"}
      };

      button.Navigation.Push (newPage);
    }
  }
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.NavigationProperty">
            <summary>Identifies the Navigation bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">To be added.</param>
            <summary>Application developers can override this method to respond when a child is added.</summary>
            <remarks>Application developers who override this method must call base.OnChildAdded before performing any other actions in their override.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element)">
            <param name="child">To be added.</param>
            <summary>Application developers can override this method to respond when a child is removed.</summary>
            <remarks>Application developers who override this method must call base.OnChildRemoved before performing any other actions in their override.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnChildrenReordered">
            <summary>Invoked whenever the <see cref="E:Xamarin.Forms.VisualElement.ChildrenReordered" /> event is about to be emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnMeasure(System.Double,System.Double)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Method that is called when a layout measurement happens.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnParentSet">
            <summary>Invoked whenever the Parent of an element is set. Implement this method in order to add behavior when the element is added to a parent.</summary>
            <remarks>It is required to call the base implementation.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double,System.Double)">
            <param name="width">The new width of the element.</param>
            <param name="height">The new height of the element.</param>
            <summary>This method is called when the size of the element is set during a layout cycle. This method is called directly before the <see cref="E:Xamarin.Forms.VisualElement.SizeChanged" /> event is emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method. Most layouts will want to implement this method in order to layout their children during a layout cycle.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the element to use.</param>
            <param name="heightConstraint">The available height for the element to use.</param>
            <summary>This method is called during the measure pass of a layout cycle to get the desired size of an element.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest&gt;" /> which contains the desired size of the element.</returns>
            <remarks>The results of this method will be (-1, -1) if the element has not yet been realized with a platform specific backing control. Overriding this method does not require a call to the base class so long as a valid SizeRequest is returned.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Opacity">
            <summary>Gets or sets the opacity value applied to the element when it is rendered. This is a bindable property.</summary>
            <value>The opacity value. Default opacity is 1.0. Values will be clamped between 0 and 1 on set.</value>
            <remarks>
                <para>
            The opacity value has no effect unless IsVisible is <see langword="true" />. Opacity is inherited down the element hierarchy. If a parent has 0.5 opacity, and a child has 0.5 opacity, the child will render with an effective 0.25 opacity. Setting opacity to 0 has undefined behavior with input elements.
          </para>
                <para>
              The following example sets the opacity of a layout to 0.5 and the opacity of one of its children to 0.5, making the child 25% opaque.
              </para>
                <example>
                    <code lang="C#"><![CDATA[
  StackLayout stack = new StackLayout ();
  Button button1 = new Button {Text="A Button"};
  Button button2 = new Button {Text="Another Button"};

  stack.Children.Add (button1);
  stack.Children.Add (button2);

  // The stack and everything in it will become 50% opaque
  stack.Opacity = 0.5;

  // button1 will become 25% opaque while the stack and button2 remane 50% opaque
  button1.Opacity = 0.5;
              ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.OpacityProperty">
            <summary>Identifies the Opacity bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Resources">
            <summary>Gets or sets the local resource dictionary.</summary>
            <value>The current resource dictionary, where resources are stored by key.</value>
            <remarks>
                <para>In XAML, resource dictionaries are filled with key/value pairs that are specified in XML and consequently created at run time. The keys in the resource dictionary are specified with the <c>x:Key</c> attribute of the XML tag for the type to create. An object of that type is created, and is initialized with the property and field values that are specified either by additional attributes or by nested tags, both of which, when present are simply string representations of the property or field names. The object is then inserted into the <see cref="T:Xamarin.Forms.ResourceDictionary" /> for the enclosing type at runtime.</para>
                <example>
                    <para>For example, the XAML below, taken from  the <format type="text/html"><a href="http://developer.xamarin.com/guides/cross-platform/xamarin-forms/xaml-for-xamarin-forms/">XAML for Xamarin.Forms</a></format> series, creates a resource dictionary that contains <see cref="T:Xamarin.Forms.LayoutOptions" /> object constants that can be used for any <see cref="T:Xamarin.Forms.Layout" /> objects that are added to the surrounding <see cref="T:Xamarin.Forms.ContentPage" />:</para>
                    <code><![CDATA[
<ContentPage.Resources>
    <ResourceDictionary>
        <LayoutOptions x:Key="horzOptions"
                     Alignment="Center" />

        <LayoutOptions x:Key="vertOptions"
                     Alignment="Center"
                     Expands="True" />
    </ResourceDictionary>
</ContentPage.Resources>
]]></code>
                    <para>Note that the above snippet is only valid when nested within a <c>&lt;ContentPage&gt;...&lt;/ContentPage&gt;</c> tag pair. Within that pair, the app developer can use both of the <c>horzOptions</c> and <c>vertOptions</c> keys to specify values for properties of type <see cref="T:Xamarin.Forms.LayoutOptions" /> by using the <c>"{...}"</c> static resource syntax. The short example below, also taken from  the <format type="text/html"><a href="http://developer.xamarin.com/guides/cross-platform/xamarin-forms/xaml-for-xamarin-forms/">XAML for Xamarin.Forms</a></format> series, illustrates this syntax:</para>
                    <code><![CDATA[
<Button Text="Do this!"
        HorizontalOptions="{StaticResource horzOptions}"
        VerticalOptions="{StaticResource vertOptions}"
        BorderWidth="3"
        Rotation="-15"
        TextColor="Red"
        Font="Large" />]]></code>
                    <para>Resource dictionaries and their associated XML provide the application developer with a convenient method to reuse code inside the XAML compile-time and run-time engines.</para>
                </example>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Rotation">
            <summary>Gets or sets the rotation about the Z-axis (affine rotation) when the element is rendered.</summary>
            <value>The rotation about the Z-axis in degrees.</value>
            <remarks>Rotation is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.RotationProperty">
            <summary>Identifies the Rotation bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.RotationX">
            <summary>Gets or sets the rotation about the X-axis (perspective rotation) when the element is rendered.</summary>
            <value>The rotation about the X-axis in degrees.</value>
            <remarks>RotationX is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.RotationXProperty">
            <summary>Identifies the RotationX bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.RotationY">
            <summary>Gets or sets the rotation about the Y-axis (perspective rotation) when the element is rendered.</summary>
            <value>The rotation about the Y-axis in degrees.</value>
            <remarks>RotationY is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.RotationYProperty">
            <summary>Identifies the RotationY bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Scale">
            <summary>Gets or sets the scale factor applied to the element.</summary>
            <value>The scale factor of the element. Default value is 1.0.</value>
            <remarks>Scale is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.ScaleProperty">
            <summary>Identifies the Scale bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.SizeAllocated(System.Double,System.Double)">
            <param name="width">The newly allocated width.</param>
            <param name="height">The newly allocated height.</param>
            <summary>SizeAllocated is called during a layout cycle to signal the start of a sub-tree layout.</summary>
            <remarks>Calling SizeAllocated will start a new layout cycle on the children of the element. Excessive calls to SizeAllocated may cause performance problems.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.SizeChanged">
            <summary>Occurs when either the Width or the Height properties change value on this element.</summary>
            <remarks>Classes should implement <see cref="M:Xamarin.Forms.VisualElement.OnSizeAllocated (double, double)" /> if they wish to respond to size change events directly.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Style">
            <summary>Gets or sets the style that defines how this visual element is displayed.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.StyleClass">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.StyleProperty">
            <summary>Backing store for the Style property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.TranslationX">
            <summary>Gets or sets the X translation delta of the element.</summary>
            <value>The amount to translate the element.</value>
            <remarks>Translation is applied post layout. It is particularly good for applying animations. Translating an element outside the bounds of its parent container may prevent inputs from working.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.TranslationXProperty">
            <summary>Identifies the TranslationX bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.TranslationY">
            <summary>Gets or sets the Y translation delta of the element.</summary>
            <value>The amount to translate the element.</value>
            <remarks>Translation is applied post layout. It is particularly good for applying animations. Translating an element outside the bounds of its parent container may prevent inputs from working.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.TranslationYProperty">
            <summary>Identifies the TranslationY bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Triggers">
            <summary>Gets the list of Trigger associated to this element. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.TriggersProperty">
            <summary>Identifies the Triggers bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Unfocus">
            <summary>Unsets focus to this element.</summary>
            <remarks>Element must already have focus for this to have any effect.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.Unfocused">
            <summary>Occurs when the element loses focus.</summary>
            <remarks>Unfocused event is raised whenever the VisualElement loses focus. This event is not bubbled through the Forms stack and is received directly from the native control. This event is emitted by the IsFocusedProperty setter.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Width">
            <summary>Gets the current rendered width of this element. This is a read-only bindable property.</summary>
            <value>The renderered width of this element.</value>
            <remarks>The width of an element is set during the Layout phase.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.WidthProperty">
            <summary>Identifies the Width bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.WidthRequest">
            <summary>Gets or sets the desired width override of this element.</summary>
            <value>The width this element desires to be.</value>
            <remarks>WidthRequest does not immediately change the Bounds of a VisualElement, however setting the WidthRequest will change the result of calls to GetSizeRequest, which will in turn modify the final size the element receives during a layout cycle.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.WidthRequestProperty">
            <summary>Backing store for the WidthRequest property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.X">
            <summary>Gets the current X position of this element. This is a read-only bindable property.</summary>
            <value>The X position of this element relative to its parents bounds.</value>
            <remarks>The x value of an element is set during the Layout phase.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Xamarin#Forms#IVisualElementController#NativeSizeChanged">
            <summary>Invalidates the measure when the native size of the element changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.XProperty">
            <summary>Identifies the X bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Y">
            <summary>Gets the current Y position of this element. This is a read-only bindable property.</summary>
            <value>The Y position of this element relative to its parents bounds.</value>
            <remarks>The y value of an element is set during the Layout phase.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.YProperty">
            <summary>Identifies the Y bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.WebNavigatedEventArgs">
            <summary>Class that contains arguments for the event that is raised after web navigation completes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebNavigatedEventArgs(Xamarin.Forms.WebNavigationEvent,Xamarin.Forms.WebViewSource,System.String,Xamarin.Forms.WebNavigationResult)">
            <param name="navigationEvent">To be added.</param>
            <param name="source">To be added.</param>
            <param name="url">To be added.</param>
            <param name="result">To be added.</param>
            <summary>Initializes a new <see cref="E:Xamarin.Forms.WebNavigatedEventArgs" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebNavigatedEventArgs.Result">
            <summary>Gets a value that describes the result of the navigation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.WebNavigatingEventArgs">
            <summary>Class that contains arguments for the event that is raised after web navigation begins.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebNavigatingEventArgs(Xamarin.Forms.WebNavigationEvent,Xamarin.Forms.WebViewSource,System.String)">
            <param name="navigationEvent">To be added.</param>
            <param name="source">To be added.</param>
            <param name="url">To be added.</param>
            <summary>Initializes a new <see cref="E:Xamarin.Forms.WebNavigatingEventArgs" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebNavigatingEventArgs.Cancel">
            <summary>Gets or sets a value that indicates whether or not to cancel the navigation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.WebNavigationEvent">
            <summary>Contains values that indicate why a navigation event was raised.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationEvent.Back">
            <summary>Indicates that the navigation resulted from the user going back to a previous page in the navigation history.</summary>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationEvent.Forward">
            <summary>Indicates that the navigation resulted from the user going forward to a later page in the navigation history.</summary>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationEvent.NewPage">
            <summary>Indicates that the navigation was to a preiously unvisited page, according to the navigation history.</summary>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationEvent.Refresh">
            <summary>Indicates that the navigation resulted from a page refresh.</summary>
        </member>
        <member name="T:Xamarin.Forms.WebNavigationEventArgs">
            <summary>TClass that contains arguments for the event that is when web navigation begins.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebNavigationEventArgs(Xamarin.Forms.WebNavigationEvent,Xamarin.Forms.WebViewSource,System.String)">
            <param name="navigationEvent">To be added.</param>
            <param name="source">To be added.</param>
            <param name="url">To be added.</param>
            <summary>Initializes a new <see cref="T:Xamarin.Forms.WebNavigationEventArgs" /> instance.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebNavigationEventArgs.NavigationEvent">
            <summary>Gets the navigation event that was raised.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebNavigationEventArgs.Source">
            <summary>Gets the element that performed the navigation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebNavigationEventArgs.Url">
            <summary>The destination of the navigation.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.WebNavigationResult">
            <summary>Enumerates values that indicate the outcome of a web navigation.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationResult.Cancel">
            <summary>The navigation was cancelled.</summary>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationResult.Failure">
            <summary>The navigation failed.</summary>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationResult.Success">
            <summary>The navigation succeeded.</summary>
        </member>
        <member name="F:Xamarin.Forms.WebNavigationResult.Timeout">
            <summary>The navigation timed out.</summary>
        </member>
        <member name="T:Xamarin.Forms.WebView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that presents HTML content.</summary>
            <remarks>
                <para>The following example shows a basic use.</para>
                <example>
                    <code lang="C#"><![CDATA[using System;
using Xamarin.Forms;

namespace FormsGallery
{
    class WebViewDemoPage : ContentPage
    {
        public WebViewDemoPage()
        {
            Label header = new Label
            {
                Text = "WebView",
                FontSize = Device.GetNamedSize (NamedSize.Large, typeof(Label)),
                HorizontalOptions = LayoutOptions.Center
            };

            WebView webView = new WebView
            {
                Source = new UrlWebViewSource
                {
                    Url = "http://blog.xamarin.com/",
                },
                VerticalOptions = LayoutOptions.FillAndExpand
            };

            // Accomodate iPhone status bar.
            this.Padding = new Thickness(10, Device.OnPlatform(20, 0, 0), 10, 5);

            // Build the page.
            this.Content = new StackLayout
            {
                Children =
                {
                    header,
                    webView
                }
            };
        }
    }
}]]></code>
                </example>
                <para>
                    <img href="WebView.TripleScreenShot.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.WebView">
            <summary>Creates a new <see cref="T:Xamarin.Forms.WebView" /> element with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebView.CanGoBack">
            <summary>Gets a value that indicates whether the user can navigate to previous pages.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.WebView.CanGoBackProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.WebView.CanGoBack" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebView.CanGoForward">
            <summary>Gets a value that indicates whether the user can navigate forward.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.WebView.CanGoForwardProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.WebView.CanGoForward" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.Eval(System.String)">
            <param name="script">A script to evaluate.</param>
            <summary>Evaluates the script that is specified by <paramref name="script" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.GoBack">
            <summary>Navigates to the previous page.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.GoForward">
            <summary>Navigates to the next page in the list of visited pages.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.WebView.Navigated">
            <summary>Event that is raised after navigation completes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.WebView.Navigating">
            <summary>Event that is raised when navigation starts.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.OnBindingContextChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>Method that is called when <see cref="P:Xamarin.Forms.WebView.Source" /> is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.OnSourceChanged(System.Object,System.EventArgs)">
            <param name="sender">To be added.</param>
            <param name="e">To be added.</param>
            <summary>Method that is called when the view source that is specified by the <paramref name="sender" /> parameter is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebView.Source">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.WebViewSource" /> object that represents the location that this <see cref="T:Xamarin.Forms.WebView" /> object displays.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.WebView.SourceProperty">
            <summary>Backing store for the <see cref="P:Xamarin.Forms.WebView.Source" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.WebViewSource">
            <summary>Abstract class whose subclasses provide the data for a <see cref="T:Xamarin.Forms.WebView" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebViewSource">
            <summary>Creates a new <see cref="T:Xamarin.Forms.WebViewSource" /> object with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSource.OnSourceChanged">
            <summary>Method that is called when the source is changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSource.op_Implicit(System.String)~Xamarin.Forms.WebViewSource">
            <param name="url">To be added.</param>
            <summary>Casts a string that contains a URL to a <see cref="T:Xamarin.Forms.WebViewSource" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSource.op_Implicit(System.Uri)~Xamarin.Forms.WebViewSource">
            <param name="url">To be added.</param>
            <summary>Casts a <see cref="T:System.Uri" /> object to a <see cref="T:Xamarin.Forms.WebViewSource" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.WebViewSourceTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts a string to a <see cref="T:Xamarin.Forms.UrlWebViewSource" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebViewSourceTypeConverter">
            <summary>Creates a new <see cref="T:Xamarin.Forms.WebViewSourceTypeConverter" /> with default values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSourceTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>Returns a Boolean value that indicates whether this <see cref="T:Xamarin.Forms.WebViewSourceTypeConverter" /> can convert the <paramref name="sourceType" /> to a <see cref="T:Xamarin.Forms.WebViewSource" /> instance.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSourceTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Converts <paramref name="value" /> into a <see cref="T:Xamarin.Forms.WebViewSource" /> by using the specified <paramref name="culture" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSourceTypeConverter.ConvertFromInvariantString(System.String)">
            <param name="value">To be added.</param>
            <summary>Returns a web view source for the URL that is contained in <paramref name="value" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Internals.DynamicResource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Internals.DynamicResource(System.String)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Internals.DynamicResource.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Internals.IDataTemplate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Internals.IDataTemplate.LoadTemplate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Internals.IDynamicResourceHandler">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.IDynamicResourceHandler.SetDynamicResource(Xamarin.Forms.BindableProperty,System.String)">
            <param name="property">To be added.</param>
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Internals.INameScope">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.INameScope.FindByName(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.INameScope.RegisterName(System.String,System.Object)">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.INameScope.RegisterName(System.String,System.Object,System.Xml.IXmlLineInfo)">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <param name="xmlLineInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.INameScope.UnregisterName(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Internals.NameScope">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Internals.NameScope">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.NameScope.GetNameScope(Xamarin.Forms.BindableObject)">
            <param name="bindable">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Internals.NameScope.NameScopeProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.NameScope.SetNameScope(Xamarin.Forms.BindableObject,Xamarin.Forms.Internals.INameScope)">
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.NameScope.Xamarin#Forms#Internals#INameScope#FindByName(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.NameScope.Xamarin#Forms#Internals#INameScope#RegisterName(System.String,System.Object)">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.NameScope.Xamarin#Forms#Internals#INameScope#RegisterName(System.String,System.Object,System.Xml.IXmlLineInfo)">
            <param name="name">To be added.</param>
            <param name="scopedElement">To be added.</param>
            <param name="xmlLineInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Internals.NameScope.Xamarin#Forms#Internals#INameScope#UnregisterName(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IMarkupExtension">
            <summary>Defines the interface for Xamarin.Forms XAML markup extensions.</summary>
            <remarks>
                <para>
      Types implementing this interface can be used as custom XAML markup extension.
    </para>
                <example>
        The following example shows declaration of a custom markup extension.
              <code lang="C#"><![CDATA[
public class ColorMarkup : IMarkupExtension
{
  public int R { get; set; }
  public int G { get; set; }
  public int B { get; set; }

  public object ProvideValue (IServiceProvider serviceProvider)
  {
    return Color.FromRgb (R, G, B);
  }
}               
              ]]></code></example>
                <example>
        The markup extension can be used directly in XAML
        <code lang="XAML"><![CDATA[
&lt;Label TextColor="{localns:ColorMarkup R=100, G=80, B=60}"/&gt;
        ]]></code></example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>Returns the object created from the markup extension.</summary>
            <returns>The object</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Xaml.IMarkupExtension`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IMarkupExtension`1.ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IProvideValueTarget">
            <summary>Interface that defines a target and property to which a value is provided.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.IProvideValueTarget.TargetObject">
            <summary>Gets the target object.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.IProvideValueTarget.TargetProperty">
            <summary>Gets an object that identifies the target property.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IRootObjectProvider">
            <summary>Internal use only.</summary>
            <remarks>This interface may be removed or made private in the future.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.IRootObjectProvider.RootObject">
            <summary>Internal use only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IValueProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IValueProvider.ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IXamlTypeResolver">
            <summary>Interface defining the ability to resolve a qualified type name into a Type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IXamlTypeResolver.Resolve(System.String)">
            <param name="qualifiedTypeName">To be added.</param>
            <summary>Returns the resolved type.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IXamlTypeResolver.Resolve(System.String,System.IServiceProvider)">
            <param name="qualifiedTypeName">To be added.</param>
            <param name="serviceProvider">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IXamlTypeResolver.TryResolve(System.String,System.Type@)">
            <param name="qualifiedTypeName">To be added.</param>
            <param name="type">To be added.</param>
            <summary>Tries to resolve a type name, putting the type value in <paramref name="type" />, and returns a Boolean value that indicates whether the operation succeeded.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IXmlLineInfoProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.IXmlLineInfoProvider.XmlLineInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.XamlParseException">
            <summary>Exception that is thrown when the XAML parser encounters an error.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Xaml.XamlParseException(System.String,System.Xml.IXmlLineInfo)">
            <param name="message">To be added.</param>
            <param name="xmlInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.XamlParseException.XmlInfo">
            <summary>Information about the condition that caused the exception to be thrown.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.XmlLineInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Xaml.XmlLineInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Xaml.XmlLineInfo(System.Int32,System.Int32)">
            <param name="linenumber">To be added.</param>
            <param name="lineposition">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.XmlLineInfo.HasLineInfo">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.XmlLineInfo.LineNumber">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.XmlLineInfo.LinePosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
    </members>
</doc>
