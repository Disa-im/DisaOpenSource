<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.AsyncEx.Enlightenment</name>
    </assembly>
    <members>
        <member name="F:Nito.AsyncEx.Internal.PlatformEnlightenment.AsyncEnlightenment.DenyChildAttach">
            <summary>
            The <c>TaskCreationOptions.DenyChildAttach</c> value, if it exists; otherwise, <c>0</c>.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.Internal.PlatformEnlightenment.ExceptionEnlightenment.CaptureAndThrow">
            <summary>
            A delegate that will call <c>ExceptionDispatchInfo.Capture</c> followed by <c>ExceptionDispatchInfo.Throw</c>, or <c>null</c> if the <c>ExceptionDispatchInfo</c> type does not exist.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.Internal.PlatformEnlightenment.ExceptionEnlightenment.PrepForRemoting">
            <summary>
            A delegate that will call <c>Exception.PrepForRemoting</c>, or <c>null</c> if the method does not exist. This member is always <c>null</c> if <see cref="F:Nito.AsyncEx.Internal.PlatformEnlightenment.ExceptionEnlightenment.CaptureAndThrow"/> is non-<c>null</c>.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.Internal.PlatformEnlightenment.ExceptionEnlightenment.TryAddStackTrace(System.Exception)">
            <summary>
            Attempts to add the original stack trace to the <see cref="P:System.Exception.Data"/> collection.
            </summary>
            <param name="exception">The exception. May not be <c>null</c>.</param>
        </member>
        <member name="T:Nito.AsyncEx.EnlightenmentVerification">
            <summary>
            Verifies platform enlightenment.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.EnlightenmentVerification.EnsureLoaded">
            <summary>
            Returns a value indicating whether the correct platform enlightenment provider has been loaded.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.Internal.PlatformEnlightenment.BlockingQueue`1._queue">
            <summary>
            The underlying queue.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.Internal.PlatformEnlightenment.BlockingQueue`1._nonEmpty">
            <summary>
            An event that is set whenever the queue is non-empty or if the queue is empty and done.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.Internal.PlatformEnlightenment.BlockingQueue`1._done">
            <summary>
            Whether we are done adding tasks to the queue.
            </summary>
        </member>
    </members>
</doc>
