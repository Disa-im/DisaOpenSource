<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamitey</name>
    </assembly>
    <members>
        <member name="T:Dynamitey.Dynamic">
            <summary>
            Main API
            </summary>
        </member>
        <member name="M:Dynamitey.Dynamic.CreateCallSite(System.Type,System.Runtime.CompilerServices.CallSiteBinder,Dynamitey.String_OR_InvokeMemberName,System.Type,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Creates a cached call site at runtime.
            </summary>
            <param name="delegateType">Type of the delegate.</param>
            <param name="binder">The CallSite binder.</param>
            <param name="name">Member Name</param>
            <param name="context">Permissions Context type</param>
            <param name="argNames">The arg names.</param>
            <param name="staticContext">if set to <c>true</c> [static context].</param>
            <param name="isEvent">if set to <c>true</c> [is event].</param>
            <returns>The CallSite</returns>
            <remarks>
            Advanced usage only for serious custom dynamic invocation.
            </remarks>
            <seealso cref="M:Dynamitey.Dynamic.CreateCallSite``1(System.Runtime.CompilerServices.CallSiteBinder,Dynamitey.String_OR_InvokeMemberName,System.Type,System.String[],System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Dynamitey.Dynamic.CreateCallSite``1(System.Runtime.CompilerServices.CallSiteBinder,Dynamitey.String_OR_InvokeMemberName,System.Type,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Creates the call site.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binder">The binder.</param>
            <param name="name">The name.</param>
            <param name="context">The context.</param>
            <param name="argNames">The arg names.</param>
            <param name="staticContext">if set to <c>true</c> [static context].</param>
            <param name="isEvent">if set to <c>true</c> [is event].</param>
            <returns></returns>
            /// 
            <example>
            Unit test that exhibits usage
            <code><![CDATA[
            string tResult = String.Empty;
            var tPoco = new MethOutPoco();
            var tBinder =
            Binder.InvokeMember(BinderFlags.None, "Func", null, GetType(),
            new[]
            {
            Info.Create(
            InfoFlags.None, null),
            Info.Create(
            InfoFlags.IsOut |
            InfoFlags.UseCompileTimeType, null)
            });
            var tSite = Impromptu.CreateCallSite<DynamicTryString>(tBinder);
            tSite.Target.Invoke(tSite, tPoco, out tResult);
            Assert.AreEqual("success", tResult);
            ]]></code>
            </example>
            <seealso cref="M:Dynamitey.Dynamic.CreateCallSite(System.Type,System.Runtime.CompilerServices.CallSiteBinder,Dynamitey.String_OR_InvokeMemberName,System.Type,System.String[],System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Dynamitey.Dynamic.Linq(System.Object)">
            <summary>
            Puts a dynamic linq proxy around the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeMember(System.Object,Dynamitey.String_OR_InvokeMemberName,System.Object[])">
             <summary>
             Dynamically Invokes a member method using the DLR
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name. Can be a string it will be implicitly converted</param>
             <param name="args">The args.</param>
             <returns> The result</returns>
             <example>   
             Unit test that exhibits usage:
             <code>
             <![CDATA[
                dynamic tExpando = new ExpandoObject();
                tExpando.Func = new Func<int, string>(it => it.ToString());
            
                var tValue = 1;
                var tOut = Impromptu.InvokeMember(tExpando, "Func", tValue);
            
                Assert.AreEqual(tValue.ToString(), tOut);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeBinaryOperator(System.Object,System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Invokes the binary operator.
            </summary>
            <param name="leftArg">The left arg.</param>
            <param name="op">The op.</param>
            <param name="rightArg">The right Arg.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeUnaryOpartor(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Invokes the unary opartor.
            </summary>
            <param name="arg">The arg.</param>
            <param name="op">The op.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the specified target using the DLR;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeGetIndex(System.Object,System.Object[])">
            <summary>
            Dynamically Invokes indexer using the DLR.
            </summary>
            <param name="target">The target.</param>
            <param name="indexes">The indexes.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeSetValueOnIndexes(System.Object,System.Object,System.Object[])">
            <summary>
            Convenience version of InvokeSetIndex that separates value and indexes.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value</param>
            <param name="indexes">The indexes </param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeSetIndex(System.Object,System.Object[])">
            <summary>
            Invokes setindex.
            </summary>
            <param name="target">The target.</param>
            <param name="indexesThenValue">The indexes then value.</param>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeMemberAction(System.Object,Dynamitey.String_OR_InvokeMemberName,System.Object[])">
             <summary>
             Dynamically Invokes a member method which returns void using the DLR
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name.</param>
             <param name="args">The args.</param>
             <example>
             Unit test that exhibits usage:
             <code>
             <![CDATA[
                var tTest = "Wrong";
                var tValue = "Correct";
            
                dynamic tExpando = new ExpandoObject();
                tExpando.Action = new Action<string>(it => tTest = it);
            
                Impromptu.InvokeMemberAction(tExpando, "Action", tValue);
            
                Assert.AreEqual(tValue, tTest);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeAction(System.Object,System.Object[])">
            <summary>
            Invokes the action using the DLR
            </summary>
            <param name="target">The target.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeSet(System.Object,System.String,System.Object)">
             <summary>
             Dynamically Invokes a set member using the DLR.
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name.</param>
             <param name="value">The value.</param>
             <example>
             Unit test that exhibits usage:
             <code>
             <![CDATA[
                dynamic tExpando = new ExpandoObject();
            
                var tSetValue = "1";
            
                Impromptu.InvokeSet(tExpando, "Test", tSetValue);
            
                Assert.AreEqual(tSetValue, tExpando.Test);
             ]]>
             </code>
             </example>
             <remarks>
             if you call a static property off a type with a static context the csharp dlr binder won't do it, so this method reverts to reflection
             </remarks>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeSetChain(System.Object,System.String,System.Object)">
            <summary>
            Invokes the set on the end of a property chain.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyChain">The property chain.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dynamitey.Dynamic.Curry(System.Object,System.Nullable{System.Int32})">
            <summary>
            Wraps a target to partial apply a method (or target if you can invoke target directly eg delegate).
            </summary>
            <param name="target">The target.</param>
            <param name="totalArgCount">The total arg count.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.Curry(System.Delegate)">
            <summary>
            Wraps a delegate to partially apply it.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeGet(System.Object,System.String)">
             <summary>
             Dynamically Invokes a get member using the DLR.
             </summary>
             <param name="target">The target.</param>
             <param name="name">The name.</param>
             <returns>The result.</returns>
             <example>
             Unit Test that describes usage
             <code>
             <![CDATA[
                var tSetValue = "1";
                var tAnon = new { Test = tSetValue };
            
                var tOut =Impromptu.InvokeGet(tAnon, "Test");
            
                Assert.AreEqual(tSetValue, tOut);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeGetChain(System.Object,System.String)">
            <summary>
            Invokes the getter property chain.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyChain">The property chain.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeIsEvent(System.Object,System.String)">
            <summary>
            Determines whether the specified name on target is event. This allows you to know whether to InvokeMemberAction
             add_{name} or a combo of {invokeget, +=, invokeset} and the corresponding remove_{name} 
            or a combon of {invokeget, -=, invokeset}
            </summary>
            <param name="target">The target.</param>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the specified target is event; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeAddAssignMember(System.Object,System.String,System.Object)">
            <summary>
            Invokes add assign with correct behavior for events.
            </summary>
            <param name="target">The target.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeSubtractAssignMember(System.Object,System.String,System.Object)">
            <summary>
            Invokes subtract assign with correct behavior for events.
            </summary>
            <param name="target">The target.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeConvert(System.Object,System.Type,System.Boolean)">
            <summary>
            Invokes  convert using the DLR.
            </summary>
            <param name="target">The target.</param>
            <param name="type">The type.</param>
            <param name="explicit">if set to <c>true</c> [explicit].</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.CoerceToDelegate(System.Object,System.Type)">
            <summary>
            Coerces any invokable to specificied delegate type.
            </summary>
            <param name="invokeableObject">The invokeable object.</param>
            <param name="delegateType">Type of the delegate.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.IsDBNull(System.Object)">
            <summary>
            Determines whether value is DBNull dynamically (Useful for PCL)
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [is DBNull]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.Dynamic.ApplyEquivalentType(Dynamitey.DynamicObjects.IEquivalentType,System.Type[])">
            <summary>
            Applies the equivalent type hint to dynamic object
            </summary>
            <param name="target">The target.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Dynamitey.Dynamic.ConvertAll``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Implicit or Explicit Converts the items of the specified enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="explict">if set to <c>true</c> [explict].</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.CoerceConvert(System.Object,System.Type)">
            <summary>
            Goes the extra mile to convert target to type.
            </summary>
            <param name="target">The target.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeConstructor(System.Type,System.Object[])">
            <summary>
            Invokes the constuctor.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.FastDynamicInvoke(System.Delegate,System.Object[])">
            <summary>
            FastDynamicInvoke extension method. Runs up to runs up to 20x faster than <see cref="M:System.Delegate.DynamicInvoke(System.Object[])"/> .
            </summary>
            <param name="del">The del.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.GenericDelegateType(System.Int32,System.Boolean)">
            <summary>
            Given a generic parameter count and whether it returns void or not gives type of Action or Func
            </summary>
            <param name="paramCount">The param count.</param>
            <param name="returnVoid">if set to <c>true</c> [return void].</param>
            <returns>Type of Action or Func</returns>
        </member>
        <member name="M:Dynamitey.Dynamic.GetMemberNames(System.Object,System.Boolean)">
            <summary>
            Gets the member names of properties. Not all IDynamicMetaObjectProvider have support for this.
            </summary>
            <param name="target">The target.</param>
            <param name="dynamicOnly">if set to <c>true</c> [dynamic only]. Won't add reflected properties</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Dynamic.InvokeCallSite(System.Runtime.CompilerServices.CallSite,System.Object,System.Object[])">
            <summary>
            Dynamically invokes a method determined by the CallSite binder and be given an appropriate delegate type
            </summary>
            <param name="callSite">The Callsite</param>
            <param name="target">The target.</param>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks>
            Advanced use only. Use this method for serious custom invocation, otherwise there are other convenience methods such as
            <see cref="M:Dynamitey.Dynamic.InvokeMember(System.Object,Dynamitey.String_OR_InvokeMemberName,System.Object[])"></see>, <see cref="M:Dynamitey.Dynamic.InvokeGet(System.Object,System.String)"></see>, <see cref="M:Dynamitey.Dynamic.InvokeSet(System.Object,System.String,System.Object)"></see> and <see cref="M:Dynamitey.Dynamic.InvokeMemberAction(System.Object,Dynamitey.String_OR_InvokeMemberName,System.Object[])"></see>
            </remarks>
        </member>
        <member name="P:Dynamitey.Dynamic.InvokeSetAll">
            <summary>
            Call Like method invokes set on target and a list of property/value. Invoke with dictionary, anonymous type or named arguments.
            </summary>
            <value>The invoke set all.</value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.FauxType">
            <summary>
            A Fake Type
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.FauxType.op_Implicit(System.Type)~Dynamitey.DynamicObjects.FauxType">
            <summary>
            Fauxes the type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.FauxType.GetMember(System.String)">
            <summary>
            Gets the members.
            </summary>
            <param name="binderName">Name of the binder.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.FauxType.GetContainedTypes">
            <summary>
            Gets the contained types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.FauxType.ContainsType(System.Type)">
            <summary>
            Determines whether the specified type contains the type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type contains type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.RealType">
            <summary>
            A Fake Type that represents a real type
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RealType.op_Implicit(Dynamitey.DynamicObjects.RealType)~System.Type">
            <summary>
            RealType implicitly conversts to an actualy Type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RealType.op_Implicit(System.Type)~Dynamitey.DynamicObjects.RealType">
            <summary>
            An actual Type implicitly conversts to a real type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="F:Dynamitey.DynamicObjects.RealType.TargetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RealType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.RealType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RealType.GetMember(System.String)">
            <summary>
            Gets the members.
            </summary>
            <param name="binderName">Name of the binder.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RealType.GetContainedTypes">
            <summary>
            Gets the contained types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.AggreType">
            <summary>
            A Fake Tupe that is an aggregate of other types
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.AggreType.MakeTypeAppendable(Dynamitey.DynamicObjects.IEquivalentType)">
            <summary>
            Makes the type appendable.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.AggreType.#ctor(Dynamitey.DynamicObjects.FauxType[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.AggreType"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.AggreType.GetInterfaceTypes">
            <summary>
            Gets the interface types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.AggreType.AddType(System.Type)">
            <summary>
            Adds the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.AggreType.AddType(Dynamitey.DynamicObjects.FauxType)">
            <summary>
            Adds the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.AggreType.GetMember(System.String)">
            <summary>
            Gets the members.
            </summary>
            <param name="binderName">Name of the binder.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.AggreType.GetContainedTypes">
            <summary>
            Gets the contained types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.Return`1">
            <summary>
            Fluent Class for writing inline lambdass
            </summary>
            <typeparam name="TR">The type of the R.</typeparam>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments(System.Func{`0})">
            <summary>
            Arguments
            </summary>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments(Dynamitey.ThisFunc{`0})">
            <summary>
            This and arguments.
            </summary>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``1(System.Func{``0,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``1(Dynamitey.ThisFunc{`0,``0})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``2(System.Func{``0,``1,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``2(Dynamitey.ThisFunc{`0,``0,``1})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``3(Dynamitey.ThisFunc{`0,``0,``1,``2})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``4(Dynamitey.ThisFunc{`0,``0,``1,``2,``3})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``5(System.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``5(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``6(System.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``6(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``7(System.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``7(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``8(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``9(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``10(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``11(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``12(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``13(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``14(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``15(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.Arguments``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0})">
            <summary>
            Arguments 
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <typeparam name="T16">The type of the Argument 16.</typeparam>
            <param name="del">The lambdas.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Return`1.ThisAndArguments``16(Dynamitey.ThisFunc{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            this and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <typeparam name="T16">The type of the Argument 16.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.ReturnVoid">
            <summary>
            Fluent class for writing inline lambdas that return void
            </summary>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments(System.Action)">
            <summary>
            Arguments
            </summary>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments(Dynamitey.ThisAction)">
            <summary>
            This and arguments.
            </summary>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``1(System.Action{``0})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``1(Dynamitey.ThisAction{``0})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``2(System.Action{``0,``1})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``2(Dynamitey.ThisAction{``0,``1})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``3(System.Action{``0,``1,``2})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``3(Dynamitey.ThisAction{``0,``1,``2})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``4(Dynamitey.ThisAction{``0,``1,``2,``3})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``5(Dynamitey.ThisAction{``0,``1,``2,``3,``4})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``6(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``7(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``8(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``9(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``10(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``11(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``12(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``13(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``14(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``15(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.Arguments``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Arguments
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <typeparam name="T16">The type of the Argument 16.</typeparam>
            <param name="del">The lambda.</param>
            <returns>The lambda.</returns>
        </member>
        <member name="M:Dynamitey.ReturnVoid.ThisAndArguments``16(Dynamitey.ThisAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            This and Arguments.
            </summary>
            <typeparam name="T1">The type of the Argument 1.</typeparam>
            <typeparam name="T2">The type of the Argument 2.</typeparam>
            <typeparam name="T3">The type of the Argument 3.</typeparam>
            <typeparam name="T4">The type of the Argument 4.</typeparam>
            <typeparam name="T5">The type of the Argument 5.</typeparam>
            <typeparam name="T6">The type of the Argument 6.</typeparam>
            <typeparam name="T7">The type of the Argument 7.</typeparam>
            <typeparam name="T8">The type of the Argument 8.</typeparam>
            <typeparam name="T9">The type of the Argument 9.</typeparam>
            <typeparam name="T10">The type of the Argument 10.</typeparam>
            <typeparam name="T11">The type of the Argument 11.</typeparam>
            <typeparam name="T12">The type of the Argument 12.</typeparam>
            <typeparam name="T13">The type of the Argument 13.</typeparam>
            <typeparam name="T14">The type of the Argument 14.</typeparam>
            <typeparam name="T15">The type of the Argument 15.</typeparam>
            <typeparam name="T16">The type of the Argument 16.</typeparam>
            <param name="del">The del.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.Internal.Curry">
            <summary>
            Internal Implementation of <see cref="M:Dynamitey.Dynamic.Curry(System.Object,System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="T:Dynamitey.IPartialApply">
            <summary>
            Partial Application Proxy
            </summary>
        </member>
        <member name="M:Dynamitey.Internal.Curry.op_BitwiseOr(System.Object,Dynamitey.Internal.Curry)">
            <summary>
            Pipe argument (left side) into curried function (right side)
            </summary>
            <param name="argument">The argument.</param>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Internal.Curry.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.
            </summary>
            <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param>
            <param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg" /> is equal to second.</param>
            <param name="result">The result of the binary operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.Internal.Curry.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.Internal.Curry.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/>[0] is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.Internal.Curry.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">Provides information about the invoke operation.</param>
            <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/>[0] is equal to 100.</param>
            <param name="result">The result of the object invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="T:Dynamitey.Internal.InvokeSetters">
            <summary>
            Internal class implmenation for <see cref="P:Dynamitey.Dynamic.InvokeSetAll"/>
            </summary>
        </member>
        <member name="M:Dynamitey.Internal.InvokeSetters.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">Provides information about the invoke operation.</param>
            <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/>[0] is equal to 100.</param>
            <param name="result">The result of the object invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="T:Dynamitey.InvokeArg">
            <summary>
            Use for Named arguments passed to InvokeMethods
            </summary>
        </member>
        <member name="M:Dynamitey.InvokeArg.op_Explicit(System.Collections.Generic.KeyValuePair{System.String,System.Object})~Dynamitey.InvokeArg">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to <see cref="T:Dynamitey.InvokeArg"/>.
            </summary>
            <param name="pair">The pair.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="F:Dynamitey.InvokeArg.Create">
            <summary>
            Create Function can set to variable to make cleaner syntax;
            </summary>
        </member>
        <member name="M:Dynamitey.InvokeArg.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.InvokeArg"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Dynamitey.InvokeArg.Name">
            <summary>
            Gets or sets the argument name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Dynamitey.InvokeArg.Value">
            <summary>
            Gets or sets the argument value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Dynamitey.InvokeArg`1">
            <summary>
            InvokeArg that makes it easier to Cast from any IDictionaryValue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamitey.InvokeArg`1.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.InvokeArg`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dynamitey.InvokeArg`1.op_Explicit(System.Collections.Generic.KeyValuePair{System.String,`0})~Dynamitey.InvokeArg{`0}">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to <see cref="T:Dynamitey.InvokeArg`1"/>.
            </summary>
            <param name="pair">The pair.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Dynamitey.StaticContext">
            <summary>
            Specific version of InvokeContext which declares a type to be used to invoke static methods.
            </summary>
        </member>
        <member name="T:Dynamitey.InvokeContext">
            <summary>
            Object that stores a context with a target for dynamic invocation
            </summary>
        </member>
        <member name="F:Dynamitey.InvokeContext.CreateContext">
            <summary>
            Create Function can set to variable to make cleaner syntax;
            </summary>
        </member>
        <member name="F:Dynamitey.InvokeContext.CreateStatic">
            <summary>
            Create Function can set to variable to make cleaner syntax;
            </summary>
        </member>
        <member name="F:Dynamitey.InvokeContext.CreateStaticWithContext">
            <summary>
            Create Function can set to variable to make cleaner syntax;
            </summary>
        </member>
        <member name="M:Dynamitey.InvokeContext.#ctor(System.Type,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.InvokeContext"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="staticContext">if set to <c>true</c> [static context].</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Dynamitey.InvokeContext.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.InvokeContext"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Dynamitey.InvokeContext.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Dynamitey.InvokeContext.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Dynamitey.InvokeContext.StaticContext">
            <summary>
            Gets or sets a value indicating whether [static context].
            </summary>
            <value><c>true</c> if [static context]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dynamitey.StaticContext.op_Explicit(System.Type)~Dynamitey.StaticContext">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Type"/> to <see cref="T:Dynamitey.StaticContext"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Dynamitey.StaticContext.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.StaticContext"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="T:Dynamitey.String_OR_InvokeMemberName">
            <summary>
            String or InvokeMemberName
            </summary>
        </member>
        <member name="M:Dynamitey.String_OR_InvokeMemberName.op_Implicit(System.String)~Dynamitey.String_OR_InvokeMemberName">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Dynamitey.String_OR_InvokeMemberName"/>.
            </summary>
            <param name="name">The name.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Dynamitey.String_OR_InvokeMemberName.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Dynamitey.String_OR_InvokeMemberName.GenericArgs">
            <summary>
            Gets the generic args.
            </summary>
            <value>The generic args.</value>
        </member>
        <member name="P:Dynamitey.String_OR_InvokeMemberName.IsSpecialName">
            <summary>
            Gets or sets a value indicating whether this member is special name.
            </summary>
            <value>
            	<c>true</c> if this instance is special name; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dynamitey.InvokeMemberName">
            <summary>
            Name of Member with associated Generic parameterss
            </summary>
        </member>
        <member name="F:Dynamitey.InvokeMemberName.Create">
            <summary>
            Create Function can set to variable to make cleaner syntax;
            </summary>
        </member>
        <member name="F:Dynamitey.InvokeMemberName.CreateSpecialName">
            <summary>
            Create Function can set to variable to make cleaner syntax;
            </summary>
        </member>
        <member name="M:Dynamitey.InvokeMemberName.op_Implicit(System.String)~Dynamitey.InvokeMemberName">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Dynamitey.InvokeMemberName"/>.
            </summary>
            <param name="name">The name.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Dynamitey.InvokeMemberName.#ctor(System.String,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.InvokeMemberName"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="genericArgs">The generic args.</param>
        </member>
        <member name="M:Dynamitey.InvokeMemberName.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.InvokeMemberName"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isSpecialName">if set to <c>true</c> [is special name].</param>
        </member>
        <member name="M:Dynamitey.InvokeMemberName.Equals(Dynamitey.InvokeMemberName)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.InvokeMemberName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.InvokeMemberName.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Dynamitey.Builder">
            <summary>
            Builds Objects with a Fluent Syntax
            </summary>
        </member>
        <member name="M:Dynamitey.Builder.New">
            <summary>
            New Builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Builder.New``1">
            <summary>
            New Builder
            </summary>
            <typeparam name="TObjectPrototype">The type of the object prototype.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.Build">
            <summary>
            Syntax for a quick new inline prototype object
            </summary>
        </member>
        <member name="P:Dynamitey.Build.NewObject">
            <summary>
            Gets the new object builder.
            </summary>
            <value>The new object.</value>
        </member>
        <member name="P:Dynamitey.Build.NewList">
            <summary>
            Gets the new list builder.
            </summary>
            <value>The new list.</value>
        </member>
        <member name="T:Dynamitey.Build`1">
            <summary>
            Syntax for a quick inline object property setup
            </summary>
            <typeparam name="TObjectPrototype">The type of the object prototype.</typeparam>
        </member>
        <member name="P:Dynamitey.Build`1.NewObject">
            <summary>
            Gets the new object builder.
            </summary>
            <value>The new.</value>
        </member>
        <member name="P:Dynamitey.Build`1.NewList">
            <summary>
            Gets the new list builder.
            </summary>
            <value>The new list.</value>
        </member>
        <member name="T:Dynamitey.Activate">
            <summary>
            Encapsulates an Activator
            </summary>
        </member>
        <member name="M:Dynamitey.Activate.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.Activate"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Dynamitey.Activate.#ctor(System.Type,System.Func{System.Object[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.Activate"/> class. With Factory Function
            </summary>
            <param name="type">The type.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Dynamitey.Activate.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dynamitey.Activate.Type">
            <summary>
            Gets or sets the constructor type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Dynamitey.Activate.Arguments">
            <summary>
            Gets or sets the constructor arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="T:Dynamitey.Activate`1">
            <summary>
            Encapsulates an Activator
            </summary>
            <typeparam name="TObjectPrototype">The type of the object prototype.</typeparam>
        </member>
        <member name="M:Dynamitey.Activate`1.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.Activate`1"/> class.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Dynamitey.Activate`1.#ctor(System.Func{System.Object[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.Activate`1"/> class. With Factory Function
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Dynamitey.Activate`1.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.CacheableInvocation">
            <summary>
            Cacheable representation of an invocation without the target or arguments  also by default only does public methods to make it easier to cache.
             /// </summary>
        </member>
        <member name="T:Dynamitey.Invocation">
            <summary>
            Storable representation of an invocation without the target
            </summary>
        </member>
        <member name="F:Dynamitey.Invocation.ExplicitConvertBinderName">
            <summary>
            Defacto Binder Name for Explicit Convert Op
            </summary>
        </member>
        <member name="F:Dynamitey.Invocation.ImplicitConvertBinderName">
            <summary>
            Defacto Binder Name for Implicit Convert Op
            </summary>
        </member>
        <member name="F:Dynamitey.Invocation.IndexBinderName">
            <summary>
            Defacto Binder Name for Indexer
            </summary>
        </member>
        <member name="F:Dynamitey.Invocation.ConstructorBinderName">
            <summary>
            Defacto Binder Name for Construvter
            </summary>
        </member>
        <member name="M:Dynamitey.Invocation.Create(Dynamitey.InvocationKind,Dynamitey.String_OR_InvokeMemberName,System.Object[])">
            <summary>
            Creates the invocation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="name">The name.</param>
            <param name="storedArgs">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Invocation.#ctor(Dynamitey.InvocationKind,Dynamitey.String_OR_InvokeMemberName,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.Invocation"/> class.
            </summary>
            <param name="kind">The kind.</param>
            <param name="name">The name.</param>
            <param name="storedArgs">The args.</param>
        </member>
        <member name="M:Dynamitey.Invocation.Equals(Dynamitey.Invocation)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Invocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.Invocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Dynamitey.Invocation.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the invocation on specified target with specific args.
            </summary>
            <param name="target">The target.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Invocation.InvokeWithStoredArgs(System.Object)">
            <summary>
            Invokes the invocation on specified target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="P:Dynamitey.Invocation.Kind">
            <summary>
            Gets or sets the kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Dynamitey.Invocation.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Dynamitey.Invocation.Args">
            <summary>
            Gets or sets the args.
            </summary>
            <value>The args.</value>
        </member>
        <member name="M:Dynamitey.CacheableInvocation.CreateConvert(System.Type,System.Boolean)">
            <summary>
            Creates the cacheable convert call.
            </summary>
            <param name="convertType">Type of the convert.</param>
            <param name="convertExplicit">if set to <c>true</c> [convert explict].</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.CacheableInvocation.CreateCall(Dynamitey.InvocationKind,Dynamitey.String_OR_InvokeMemberName,System.Dynamic.CallInfo,System.Object)">
            <summary>
            Creates the cacheable method or indexer or property call.
            </summary>
            <param name="kind">The kind.</param>
            <param name="name">The name.</param>
            <param name="callInfo">The callInfo.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.CacheableInvocation.#ctor(Dynamitey.InvocationKind,Dynamitey.String_OR_InvokeMemberName,System.Int32,System.String[],System.Object,System.Type,System.Boolean,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.CacheableInvocation"/> class.
            </summary>
            <param name="kind">The kind.</param>
            <param name="name">The name.</param>
            <param name="argCount">The arg count.</param>
            <param name="argNames">The arg names.</param>
            <param name="context">The context.</param>
            <param name="convertType">Type of the convert.</param>
            <param name="convertExplicit">if set to <c>true</c> [convert explict].</param>
            <param name="storedArgs">The stored args.</param>
        </member>
        <member name="M:Dynamitey.CacheableInvocation.Equals(Dynamitey.CacheableInvocation)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.CacheableInvocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.CacheableInvocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Dynamitey.CacheableInvocation.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the invocation on specified target with specific args.
            </summary>
            <param name="target">The target.</param>
            <param name="args">The args.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">CacheableInvocation can't change conversion type on invoke.;args</exception>
            <exception cref="T:System.InvalidOperationException">Unknown Invocation Kind: </exception>
        </member>
        <member name="T:Dynamitey.DynamicObjects.ExtensionToInstanceProxy">
            <summary>
            Proxy that can turn extension methods into instance methods 
            </summary>
        </member>
        <member name="T:Dynamitey.DynamicObjects.BaseForwarder">
            <summary>
            Proxies Calls allows subclasser to override do extra actions before or after base invocation
            </summary>
            <remarks>
            This may not be as efficient as other proxies that can work on just static objects or just dynamic objects...
            Consider this when using.
            </remarks>
        </member>
        <member name="T:Dynamitey.DynamicObjects.BaseObject">
            <summary>
            Dynamic Object that knows about the Impromtu Interface return types;
            Override Typical Dynamic Object methods, and use TypeForName to get the return type of an interface member.
            </summary>
        </member>
        <member name="T:Dynamitey.DynamicObjects.IEquivalentType">
            <summary>
            Can Represent an equivalent static type to help dynamically convert member output
            </summary>
        </member>
        <member name="P:Dynamitey.DynamicObjects.IEquivalentType.EquivalentType">
            <summary>
            Gets or sets the type of the equivalent.
            </summary>
            <value>
            The type of the equivalent.
            </value>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.BaseObject"/> class.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseObject.TryTypeForName(System.String,System.Type@)">
            <summary>
            Tries the name of the member to see if it has a type.
            </summary>
            <param name="binderName">Name of the binder.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.IForwarder">
            <summary>
            An proxy object
            </summary>
        </member>
        <member name="P:Dynamitey.DynamicObjects.IForwarder.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.BaseForwarder"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">Provides information about the invoke operation.</param>
            <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0]" /> is equal to 100.</param>
            <param name="result">The result of the object invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Tries the set member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Tries the index of the get.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Tries the index of the set.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.Equals(Dynamitey.DynamicObjects.BaseForwarder)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.BaseForwarder.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.BaseForwarder.CallTarget">
            <summary>
            Gets the call target.
            </summary>
            <value>The call target.</value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.BaseForwarder.AddRemoveMarker">
            <summary>
            Marks whether we are adding or removing the delegate
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.AddRemoveMarker.op_Addition(Dynamitey.DynamicObjects.BaseForwarder.AddRemoveMarker,System.Object)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseForwarder.AddRemoveMarker.op_Subtraction(Dynamitey.DynamicObjects.BaseForwarder.AddRemoveMarker,System.Object)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.BaseForwarder.AddRemoveMarker.Delegate">
            <summary>
            Gets or sets the delegate.
            </summary>
            <value>The delegate.</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.BaseForwarder.AddRemoveMarker.IsAdding">
            <summary>
            Gets or sets a value indicating whether this instance is adding.
            </summary>
            <value><c>true</c> if this instance is adding; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.#ctor(System.Object,System.Type,System.Type[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.ExtensionToInstanceProxy"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="extendedType">Type of the extended.</param>
            <param name="staticTypes">The static types.</param>
            <param name="instanceHints">The instance hints.</param>
            <exception cref="T:System.ArgumentException">Don't Nest ExtensionToInstance Objects</exception>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.InvokeStaticMethod(Dynamitey.String_OR_InvokeMemberName,System.Object[])">
            <summary>
            Invokes the static method.
            </summary>
            <param name="name">The name.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.CreateSelf(System.Object,System.Type,System.Type[],System.Type[])">
            <summary>
            Creates the self.
            </summary>
            <param name="target">The target.</param>
            <param name="extendedType">Type of the extended.</param>
            <param name="staticTypes">The static types.</param>
            <param name="instanceHints">The instance hints.</param>
            <returns></returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.InstanceHints">
            <summary>
            Gets the instance hints.
            </summary>
            <value>
            The instance hints.
            </value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker">
            <summary>
            Basic Invoker syntax for dynamic generics
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.Parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.OverloadTypes">
            <summary>
            The overload types
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.GenericParams">
            <summary>
            The generic params
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.GenericMethodParameters">
            <summary>
            The generic method parameters
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Tries the get member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.Invoker.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Tries the index of the get.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.OverloadInvoker">
            <summary>
            Overload Invoker
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ExtensionToInstanceProxy.OverloadInvoker.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Tries the index of the get.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.FluentRegex">
            <summary>
            Extension Methods for fluent Regex
            </summary>
        </member>
        <member name="M:Dynamitey.FluentRegex.FluentFilter(System.Collections.Generic.IEnumerable{System.String},System.Text.RegularExpressions.Regex)">
            <summary>
            Fluents the filter.
            </summary>
            <param name="list">The list.</param>
            <param name="regex">The regex.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.FluentRegex.Matches(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Matcheses the specified input string.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="regex">The regex.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.FluentRegex.Match(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Matches the specified input string.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="regex">The regex.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.FluentRegex.FluentMatch(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Fluents the match.
            </summary>
            <param name="regex">The regex.</param>
            <param name="inputString">The input string.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.FluentRegex.FluentMatches(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Fluents the matches.
            </summary>
            <param name="regex">The regex.</param>
            <param name="inputString">The input string.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.FluentStringLookup">
            <summary>
            Building block to use Method calls as dynamic lookups
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.FluentStringLookup.#ctor(System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.FluentStringLookup"/> class.
            </summary>
            <param name="lookup">The lookup.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.FluentStringLookup.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.FluentStringLookup.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.IImpromptuBuilder">
            <summary>
            Interface for simplistic builder options
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.List(System.Object[])">
            <summary>
            Creates a prototype list
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ListSetup(System.Object[])">
            <summary>
            Setup List or Array, takes either one <see cref="T:Dynamitey.Activate"/> or a list of constructor args that will use objects Type
            </summary>
            <param name="constructorArgs">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ListSetup``1">
            <summary>
            Setup List or Array if list has a default constrcutor
            </summary>
            <typeparam name="TList"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ListSetup(System.Func{System.Object[]})">
            <summary>
            Setup List or Array, takes either one <see cref="T:Dynamitey.Activate"/> or a list of constructor args that will use objects Type
            </summary>
            <param name="constructorArgsFactory">The constructor args factory.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ArraySetup``1">
            <summary>
            Setup List or Array if list has a default constrcutor
            </summary>
            <typeparam name="TList"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ArraySetup(System.Object[])">
            <summary>
            Alternative name for <see cref="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ListSetup(System.Object[])"/>
            </summary>
            <param name="constructorArgs">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ArraySetup(System.Func{System.Object[]})">
            <summary>
            Alternative name for <see cref="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ListSetup``1"/>
            </summary>
            <param name="constructorArgsFactory">The constructor args factory.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.Array(System.Object[])">
            <summary>
            Alternative name for <see cref="M:Dynamitey.DynamicObjects.IImpromptuBuilder.List(System.Object[])"/>
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ObjectSetup(System.Object[])">
            <summary>
            Sets up object builder
            </summary>
            <param name="constructorArgs">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.IImpromptuBuilder.ObjectSetup(System.Func{System.Object[]})">
            <summary>
            Sets up object builder
            </summary>
            <param name="constructorArgsFactory"></param>
            <returns></returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.IImpromptuBuilder.Object">
            <summary>
            Generates Object, use by calling with named arguments <code>builder.Object(Prop1:"test",Prop2:"test")</code>
            returns new object;
            </summary>
        </member>
        <member name="P:Dynamitey.DynamicObjects.IImpromptuBuilder.Setup">
            <summary>
            Setups up named builders 
            </summary>
            <value>The setup.</value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Builder`1">
            <summary>
            Builds Expando-Like Objects with an inline Syntax
            </summary>
            <typeparam name="TObjectProtoType">The type of the object proto type.</typeparam>
        </member>
        <member name="F:Dynamitey.DynamicObjects.Builder`1._buildType">
            <summary>
            Build factory storage
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Builder`1"/> class.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.List(System.Object[])">
            <summary>
            Creates a prototype list
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ListSetup(System.Object[])">
            <summary>
            Setup List or Array, takes either one <see cref="T:Dynamitey.Activate"/> or a list of constructor args that will use objects Type
            </summary>
            <param name="constructorArgs">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ListSetup``1">
            <summary>
            Setup List or Array if list has a default constrcutor
            </summary>
            <typeparam name="TList"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ListSetup(System.Func{System.Object[]})">
            <summary>
            Setup List or Array, takes either one <see cref="T:Dynamitey.Activate"/> or a list of constructor args that will use objects Type
            </summary>
            <param name="constructorArgsFactory">The constructor args factory.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ArraySetup``1">
            <summary>
            Setup List or Array if list has a default constrcutor
            </summary>
            <typeparam name="TList"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ArraySetup(System.Object[])">
            <summary>
            Alternative name for <see cref="M:Dynamitey.DynamicObjects.Builder`1.ListSetup(System.Object[])"/>
            </summary>
            <param name="constructorArgs">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ArraySetup(System.Func{System.Object[]})">
            <summary>
            Alternative name for <see cref="M:Dynamitey.DynamicObjects.Builder`1.ListSetup``1"/>
            </summary>
            <param name="constructorArgsFactory">The constructor args factory.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.Array(System.Object[])">
            <summary>
            Alternative name for <see cref="M:Dynamitey.DynamicObjects.Builder`1.List(System.Object[])"/>
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ObjectSetup(System.Object[])">
            <summary>
            Sets up object builder
            </summary>
            <param name="constructorArgs">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.ObjectSetup(System.Func{System.Object[]})">
            <summary>
            Sets up object builder
            </summary>
            <param name="constructorArgsFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Tries the set member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.Builder`1.Object">
            <summary>
            Creates a Prototype object.
            </summary>
            <value>The object.</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.Builder`1.Setup">
            <summary>
            Trapoline for setting up Builders
            </summary>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Builder`1.BuilderTrampoline">
            <summary>
             Trampoline for builder
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.BuilderTrampoline.#ctor(Dynamitey.DynamicObjects.Builder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Builder`1.BuilderTrampoline"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.BuilderTrampoline.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Builder`1.SetupTrampoline">
            <summary>
            Trampoline for setup builder
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.SetupTrampoline.#ctor(Dynamitey.DynamicObjects.Builder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Builder`1.SetupTrampoline"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Builder`1.SetupTrampoline.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Requires argument names for every argument</exception>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Dictionary">
            <summary>
            Similar to Expando Objects but handles null values when the property is defined with an impromptu interface
            </summary>
        </member>
        <member name="T:Dynamitey.DynamicObjects.BaseDictionary">
            <summary>
            Base class of Expando-Type objects
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.BaseDictionary._dictionary">
            <summary>
            Wrapped Dictionary
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Dictionary"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.SetProperty(System.String,System.Object)">
            <summary>
            Sets the property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.Equals(Dynamitey.DynamicObjects.Dictionary)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseDictionary.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.BaseDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.BaseDictionary.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.BaseDictionary.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="E:Dynamitey.DynamicObjects.BaseDictionary.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Dictionary"/> class.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Dictionary"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dictionary.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dictionary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Dynamitey.DynamicObjects.Dictionary.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.Dictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.ChainableDictionary">
            <summary>
            Adds extra synatx to intialize properties to match up with clay
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ChainableDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.ChainableDictionary"/> class.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ChainableDictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Dictionary"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.ChainableDictionary.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args" /> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Dummy">
            <summary>
            Dummy that just returns null or default for everything.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dummy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Dummy"/> class.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dummy.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dummy.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dummy.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dummy.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Tries the index of the get.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Dummy.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Tries the index of the set.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.BaseFactory">
            <summary>
            Base Class for making a fluent factory using an Impromptu Interface return type.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseFactory.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the default implementation for operations that get instance as defined by <see cref="M:Dynamitey.DynamicObjects.BaseFactory.GetInstanceForDynamicMember(System.String,System.Object[])"/>. Classes derived from the <see cref="T:ImpromptuInterface.ImpromptuObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseFactory.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/>[0] is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseFactory.CreateType(System.Type,System.Object[])">
            <summary>
            Constructs the type. Override for changing type intialization property changes.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseFactory.GetInstanceForDynamicMember(System.String,System.Object[])">
            <summary>
            Gets the instance for a dynamic member. Override for type constrcution behavoir changes based on property name.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.BaseSingleInstancesFactory">
            <summary>
            Base Class for making a singleton fluent factory using an Impromptu Interface return type.
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.BaseSingleInstancesFactory._hashFactoryTypes">
            <summary>
            Store Singletons
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.BaseSingleInstancesFactory._lockTable">
            <summary>
            Lock for accessing singletons
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.BaseSingleInstancesFactory.GetInstanceForDynamicMember(System.String,System.Object[])">
            <summary>
            Gets the instance for a dynamic member. Override for type constrcution behavoir changes based on property name.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Get">
            <summary>
            Dynamic Proxy that exposes any properties of objects, and can massage results based on interface
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Get.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Get"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Get.Create(System.Object)">
            <summary>
            Creates the proxy over the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Get.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Get.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Get.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Tries the index of the get.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.LateType">
            <summary>
            Late bind types from libraries not not at compile type
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LateType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.LateType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LateType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.LateType"/> class.
            </summary>
            <param name="typeName">Qualified Name of the type.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LateType.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.LateType"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="P:Dynamitey.DynamicObjects.LateType.new">
            <summary>
            Returns a late bound constructor
            </summary>
            <value>The late bound constructor</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.LateType.IsAvailable">
            <summary>
            Gets a value indicating whether this Type is available at runtime.
            </summary>
            <value>
            	<c>true</c> if this instance is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.LateType.CallTarget">
            <summary>
            Gets the call target.
            </summary>
            <value>
            The call target.
            </value>
            <exception cref="T:Dynamitey.DynamicObjects.LateType.MissingTypeException"></exception>
        </member>
        <member name="T:Dynamitey.DynamicObjects.LateType.MissingTypeException">
            <summary>
            Exception When The Late Type can not be found to bind.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LateType.MissingTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.LateType.MissingTypeException"/> class.
            </summary>
            <param name="typename">The typename.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LateType.MissingTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.LateType.MissingTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Dynamitey.DynamicObjects.LateType.ConstructorForward">
            <summary>
            Forward argument to constructor including named arguments
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LateType.ConstructorForward.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Lazy">
            <summary>
            Abstract base for the Generic class <see cref="T:Dynamitey.DynamicObjects.Lazy`1"/> with <see cref="M:Dynamitey.DynamicObjects.Lazy.Create``1(System.Func{``0})"/> fatory methods
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Lazy.Create``1(System.Func{``0})">
            <summary>
            Creates Lazy based on the specified valuefactory.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valueFactory">The value factory.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Lazy.Create``1(System.Lazy{``0})">
            <summary>
            Creates Lazy based on the specified target.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Lazy.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Lazy"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Lazy`1">
            <summary>
            Wraps a Lazy Type evalutaes on first method call
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Lazy`1.#ctor(System.Lazy{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Lazy`1"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Lazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Lazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Lazy`1.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.Lazy`1.CallTarget">
            <summary>
            Gets the call target.
            </summary>
            <value>
            The call target.
            </value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.List">
            <summary>
            Expando-Type List for dynamic objects
            </summary>
        </member>
        <member name="F:Dynamitey.DynamicObjects.List._list">
            <summary>
            Wrapped list
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.#ctor(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.List"/> class.
            </summary>
            <param name="contents">The contents.</param>
            <param name="members">The members.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.Add(System.Object)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.Contains(System.Object)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.IndexOf(System.Object)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.Remove(System.Object)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Called when [collection changed].
            </summary>
            <param name="action">The action.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.Equals(Dynamitey.DynamicObjects.List)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.GetRepresentedItem">
            <summary>
            Gets the represented item. USED fOR GetItemProperties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.List.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Dynamitey.DynamicObjects.List.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.List.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="E:Dynamitey.DynamicObjects.List.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Dynamitey.DynamicObjects.List.OverrideGettingItemMethodNames">
            <summary>
            Gets or sets the override getting item method names. USED for GetItemProperties
            </summary>
            <value>The override getting item method names.</value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.List.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>
            The sync root.
            </value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.List.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value>
            <c>true</c> if this instance is synchronized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamitey.DynamicObjects.List.IsFixedSize">
            <summary>
            Gets a value indicating whether this instance is fixed size.
            </summary>
            <value>
            <c>true</c> if this instance is fixed size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.IRegexMatch">
            <summary>
            A Regex Match Interface
            </summary>
        </member>
        <member name="P:Dynamitey.DynamicObjects.IRegexMatch.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Dynamitey.DynamicObjects.RegexMatch">
            <summary>
            A Dynamic Regex Match
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RegexMatch.#ctor(System.Text.RegularExpressions.Match,System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.RegexMatch"/> class.
            </summary>
            <param name="match">The match.</param>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RegexMatch.GetDynamicMemberNames">
            <summary>
            Gets the dynamic member names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RegexMatch.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Tries the get member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.RegexMatch.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.RegexMatch.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified value.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.RegexMatch.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified value.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Recorder">
            <summary>
            Proxy that Records Dynamic Invocations on an object
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Recorder"/> class.
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.Recorder"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.ReplayOn``1(``0)">
            <summary>
            Replays the recording on target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Tries the set member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Tries the invoke member.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Tries the index of the get.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Recorder.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Tries the index of the set.
            </summary>
            <param name="binder">The binder.</param>
            <param name="indexes">The indexes.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Dynamitey.DynamicObjects.Recorder.Recording">
            <summary>
            Gets or sets the recording.
            </summary>
            <value>The recording.</value>
        </member>
        <member name="T:Dynamitey.InvocationKind">
            <summary>
            Type of Invocation
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.NotSet">
            <summary>
            NotSet
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.Convert">
            <summary>
            Convert Implicit or Explicity
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.Get">
            <summary>
            Get Property
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.Set">
            <summary>
            Set Property
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.GetIndex">
            <summary>
            Get Indexer
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.SetIndex">
            <summary>
            Set Indexer
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.InvokeMember">
            <summary>
            Invoke Method the has return value
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.InvokeMemberAction">
            <summary>
            Invoke Method that returns void
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.InvokeMemberUnknown">
            <summary>
            Invoke Method that could return a value or void
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.Constructor">
            <summary>
            Invoke Constructor
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.AddAssign">
            <summary>
            Invoke +=
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.SubtractAssign">
            <summary>
            Invoke -=
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.IsEvent">
            <summary>
            Invoke Event Property Test
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.Invoke">
            <summary>
            Invoke Directly
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.InvokeAction">
            <summary>
            Invoke Directly DiscardResult
            </summary>
        </member>
        <member name="F:Dynamitey.InvocationKind.InvokeUnknown">
            <summary>
            Invoke Directly Return Value
            </summary>
        </member>
        <member name="T:Dynamitey.DynamicObjects.LinqInstanceProxy">
            <summary>
            Extension to Intance Proxy Configured for LINQ IEnumerable methods
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LinqInstanceProxy.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.DynamicObjects.LinqInstanceProxy"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LinqInstanceProxy.CreateSelf(System.Object,System.Type,System.Type[],System.Type[])">
            <summary>
            Creates the self.
            </summary>
            <param name="target">The target.</param>
            <param name="extendedType">Type of the extended.</param>
            <param name="staticTypes">The static types.</param>
            <param name="instanceHints">The instance hints.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.LinqInstanceProxy.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.DynamicObjects.Mimic">
            <summary>
            Class for TDD, used for mocking any dynamic object
            </summary>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="arg"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.DynamicObjects.Mimic.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
            <summary>
            Override on DynamicObject
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.PartialApply">
            <summary>
            Internal method for subsequent invocations of <see cref="M:Dynamitey.Dynamic.Curry(System.Object,System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:Dynamitey.PartialApply.op_BitwiseOr(System.Object,Dynamitey.PartialApply)">
            <summary>
            Pipes the argument into the function
            </summary>
            <param name="argument">The argument.</param>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.PartialApply.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.
            </summary>
            <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param>
            <param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg" /> is equal to second.</param>
            <param name="result">The result of the binary operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.PartialApply.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Dynamitey.PartialApply.#ctor(System.Object,System.Object[],System.String,System.Nullable{System.Int32},System.Nullable{Dynamitey.InvocationKind})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.PartialApply"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="args">The args.</param>
            <param name="memberName">Name of the member.</param>
            <param name="totalCount">The total count.</param>
            <param name="invocationKind">Kind of the invocation.</param>
        </member>
        <member name="M:Dynamitey.PartialApply.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">Provides information about the invoke operation.</param>
            <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args[0]"/> is equal to 100.</param>
            <param name="result">The result of the object invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="P:Dynamitey.PartialApply.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Dynamitey.PartialApply.MemberName">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:Dynamitey.PartialApply.Args">
            <summary>
            Gets the args.
            </summary>
            <value>The args.</value>
        </member>
        <member name="P:Dynamitey.PartialApply.TotalArgCount">
            <summary>
            Gets the total arg count.
            </summary>
            <value>The total arg count.</value>
        </member>
        <member name="P:Dynamitey.PartialApply.InvocationKind">
            <summary>
            Gets the kind of the invocation.
            </summary>
            <value>The kind of the invocation.</value>
        </member>
        <member name="M:Dynamitey.Internal.Optimization.BareBonesList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamitey.Internal.Optimization.BareBonesList`1"/> class.
            </summary>
            <param name="length">The max length that the list cannot grow beyound</param>
        </member>
        <member name="M:Dynamitey.Internal.Optimization.BareBonesList`1.GetEnumerator">
            <summary>
            Gets the enumerator. with bare bones this is good only once
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.Internal.Optimization.InvokeHelper.LazyBinder">
            <summary>
            LazyBinderType
            </summary>
        </member>
        <member name="T:Dynamitey.Internal.Optimization.Util">
            <summary>
            Utility Class
            </summary>
        </member>
        <member name="F:Dynamitey.Internal.Optimization.Util.IsMono">
            <summary>
            Is Current Runtime Mono?
            </summary>
        </member>
        <member name="M:Dynamitey.Internal.Optimization.Util.IsAnonymousType(System.Object)">
            <summary>
            Determines whether [is anonymous type] [the specified target].
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if [is anonymous type] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.Internal.Optimization.Util.NameArgsIfNecessary(System.Dynamic.CallInfo,System.Object[])">
            <summary>
            Names the args if necessary.
            </summary>
            <param name="callInfo">The call info.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Internal.Optimization.Util.GetTargetContext(System.Object,System.Type@,System.Boolean@)">
            <summary>
            Gets the target context.
            </summary>
            <param name="target">The target.</param>
            <param name="context">The context.</param>
            <param name="staticContext">if set to <c>true</c> [static context].</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Internal.Optimization.Util.FixContext(System.Type)">
            <summary>
            Fixes the context.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamitey.ThisAction">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`1">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`2">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`3">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`4">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`5">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`6">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`7">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`8">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`9">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`10">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`11">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`12">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`13">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`14">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`15">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisAction`16">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`1">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`2">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`3">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`4">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`5">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`6">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`7">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`8">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`9">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`10">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`11">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`12">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`13">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`14">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`15">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`16">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisFunc`17">
            <summary>
            Special Delegate used to make impromptu object methods first parameter is this.
            </summary>
        </member>
        <member name="T:Dynamitey.ThisDelegate">
            <summary>
            Extension method for Dealing with Special Delegate Type
            </summary>
        </member>
        <member name="M:Dynamitey.ThisDelegate.IsSpecialThisDelegate(System.Delegate)">
            <summary>
            Determines whether [is special this delegate] [the specified del].
            </summary>
            <param name="del">The del.</param>
            <returns>
            	<c>true</c> if [is special this delegate] [the specified del]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Dynamitey.Tupler">
            <summary>
            Dynamically Dealing with Tuples
            </summary>
        </member>
        <member name="M:Dynamitey.Tupler.Create(System.Object[])">
            <summary>
            Creates a Tuple with arg runtime types.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Tupler.ToTuple(System.Collections.IEnumerable)">
            <summary>
            Enumerable to tuple.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Tupler.First(System.Object)">
            <summary>
            Firsts item of the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Tupler.Second(System.Object)">
            <summary>
            Second item of the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Tupler.Last(System.Object)">
            <summary>
            Lasts item of the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Tupler.ToList(System.Object)">
            <summary>
            Convert to list.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamitey.Tupler.Index(System.Object,System.Int32)">
            <summary>
            Gets value at the index of the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">index must be greater than or equalto 0;index</exception>
        </member>
        <member name="M:Dynamitey.Tupler.IsTuple(System.Object)">
            <summary>
            Determines whether the specified target is a tuple.
            </summary>
            <param name="target">The target.</param>
            <returns>
              <c>true</c> if the specified target is tuple; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamitey.Tupler.Size(System.Object)">
            <summary>
            Gets the size of the tuple
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
    </members>
</doc>
