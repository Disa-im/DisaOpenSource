//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharpTL.Compiler {
    using Annotations;
    using System.Collections.Generic;
    using System.Linq;
    using System;
    
    
    public partial class SharpTLDefaultTemplate : SharpTLDefaultTemplateBase {
        
        
        #line 104 ""

        [UsedImplicitly] private TemplateVars _templateVars; 
        #line default
        #line hidden
        
        
        #line 105 ""

private void WriteTLObjects(IEnumerable<TLCombinator> constructors, IEnumerable<TLType> types, bool isMethodsArgs = false)
{
    List<TLType> typesList = types != null ? types.ToList() : null;
    foreach (TLCombinator constructor in constructors)
    {

        #line default
        #line hidden
        
        
        #line 112 ""

        this.Write("    [TLObject(0x");

        #line default
        #line hidden
        
        
        #line 112 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(constructor.Number.ToString("X8") ));

        #line default
        #line hidden
        
        
        #line 112 ""

        this.Write(")]\r\n    [ProtoContract]\r\n    public partial class ");

        #line default
        #line hidden
        
        
        #line 114 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(
    string.Format("{0}{1}", isMethodsArgs ? constructor.Name + "Args" : constructor.Name,
        (typesList != null && typesList.Contains(constructor.Type)) ? " : " + constructor.Type.Name : String.Empty)
    ));

        #line default
        #line hidden
        
        
        #line 117 ""

        this.Write("\r\n    {\r\n");

        #line default
        #line hidden
        
        
        #line 119 ""

        int i = 0;
        foreach (TLCombinatorParameter parameter in constructor.Parameters)
        {
            TLSerializationMode? serModeOverride = parameter.Type.SerializationModeOverride;

        #line default
        #line hidden
        
        
        #line 125 ""

        this.Write("\r\n");

        #line default
        #line hidden
        
        
        #line 126 ""

		if(!parameter.IsFlag)
		{

        #line default
        #line hidden
        
        
        #line 130 ""

        this.Write("\t\t\t[ProtoMember(");

        #line default
        #line hidden
        
        
        #line 130 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(++i ));

        #line default
        #line hidden
        
        
        #line 130 ""

        this.Write(")]\r\n        \t[TLProperty(");

        #line default
        #line hidden
        
        
        #line 131 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(i ));

        #line default
        #line hidden
        
        
        #line 131 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(serModeOverride.HasValue ? string.Format(", TLSerializationMode.{0}", serModeOverride.Value) : String.Empty ));

        #line default
        #line hidden
        
        
        #line 131 ""

        this.Write(")]\r\n        \tpublic ");

        #line default
        #line hidden
        
        
        #line 132 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type.Name ));

        #line default
        #line hidden
        
        
        #line 132 ""

        this.Write(" ");

        #line default
        #line hidden
        
        
        #line 132 ""

        this.Write(this.ToStringHelper.ToStringWithCulture( parameter.Name ));

        #line default
        #line hidden
        
        
        #line 132 ""

        this.Write(" { get; set; }\r\n");

        #line default
        #line hidden
        
        
        #line 133 ""

		}
		else
		{

        #line default
        #line hidden
        
        
        #line 138 ""

        this.Write("\t\t\t[ProtoMember(");

        #line default
        #line hidden
        
        
        #line 138 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(++i ));

        #line default
        #line hidden
        
        
        #line 138 ""

        this.Write(")]\r\n\t\t\t[TLProperty(");

        #line default
        #line hidden
        
        
        #line 139 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(i ));

        #line default
        #line hidden
        
        
        #line 139 ""

        this.Write(",");

        #line default
        #line hidden
        
        
        #line 139 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(parameter.FlagIndex));

        #line default
        #line hidden
        
        
        #line 139 ""

        this.Write(",true");

        #line default
        #line hidden
        
        
        #line 139 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(serModeOverride.HasValue ? string.Format(", TLSerializationMode.{0}", serModeOverride.Value) : String.Empty ));

        #line default
        #line hidden
        
        
        #line 139 ""

        this.Write(")]\r\n        \tpublic ");

        #line default
        #line hidden
        
        
        #line 140 ""

        this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type.Name ));

        #line default
        #line hidden
        
        
        #line 140 ""

        this.Write(" ");

        #line default
        #line hidden
        
        
        #line 140 ""

        this.Write(this.ToStringHelper.ToStringWithCulture( parameter.Name ));

        #line default
        #line hidden
        
        
        #line 140 ""

        this.Write(" { get; set; }\r\n");

        #line default
        #line hidden
        
        
        #line 141 ""

		}

        #line default
        #line hidden
        
        
        #line 144 ""

        this.Write("\r\n");

        #line default
        #line hidden
        
        
        #line 145 ""

        }

        #line default
        #line hidden
        
        
        #line 148 ""

        this.Write("    }\r\n\r\n");

        #line default
        #line hidden
        
        
        #line 150 ""

    }
}

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 5 ""
            this.Write("// ------------------------------------------------------------------------------" +
                    "\r\n// <auto-generated>\r\n//     This code was generated by the SharpTL compiler (h" +
                    "ttps://github.com/Taggersoft/SharpTL).\r\n//     Generated at ");
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now ));
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write(@"
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable 1591

#region R#

// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable CollectionNeverUpdated.Global
// ReSharper disable UnusedMemberInSuper.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable InconsistentNaming

#endregion

namespace ");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(_templateVars.Namespace ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("\r\n{\r\n    using SharpTL;\r\n    using System.Threading.Tasks;\r\n    using ProtoBuf;\r\n" +
                    "\r\n    // TL constructors.\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 38 ""

    // Writing constructors with common types.
    WriteTLObjects(_templateVars.Schema.Constructors, _templateVars.Schema.TypesBox.Where(t => t.HasConstructors && !t.IsBuiltIn));

    // Writing constructors without common types, because this is methods.
    // Hence method constructor is actually bunch of args to a method, which knows how to serialize itself.
    WriteTLObjects(_templateVars.Schema.Methods, null, true);

            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write("\r\n    // TL types.\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 49 ""

foreach (TLType type in from t in _templateVars.Schema.TypesBox where t.HasConstructors && !t.IsBuiltIn select t)
{

            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("    [TLType(");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Constructors.Select(constructor => string.Format("typeof({0})", constructor.Name)).Aggregate((s, s1) => s + ", " + s1)
    ));
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(")]\r\n    [ProtoContract]\r\n    ");
            
            #line default
            #line hidden
            
            #line 56 ""

    foreach (var constructor in type.Constructors)
    {
    
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write("    [ProtoInclude(");
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(_templateVars.tag++));
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(",");
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("typeof({0})", constructor.Name)));
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(")]\r\n    ");
            
            #line default
            #line hidden
            
            #line 61 ""

    }
    
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("    public partial interface ");
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name ));
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("\r\n    {\r\n    }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 68 ""

}

            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write("\r\n    /// <summary>\r\n    ///     TL methods.\r\n    /// </summary>\r\n    public inte" +
                    "rface I");
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(_templateVars.MethodsInterfaceName));
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write("Methods\r\n    {\r\n");
            
            #line default
            #line hidden
            
            #line 77 ""

    foreach (TLCombinator method in _templateVars.Schema.Methods)
    {

            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Type.Name ));
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name ));
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name ));
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write("Args args);\r\n");
            
            #line default
            #line hidden
            
            #line 82 ""

    }

            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write("    }\r\n\r\n    /// <summary>\r\n    ///     TL async methods.\r\n    /// </summary>\r\n  " +
                    "  public interface I");
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(_templateVars.MethodsInterfaceName));
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write("AsyncMethods\r\n    {\r\n");
            
            #line default
            #line hidden
            
            #line 92 ""

    foreach (TLCombinator method in _templateVars.Schema.Methods)
    {
        string returnType = method.Type.IsVoid ? "Task" : String.Format("Task<{0}>", method.Type.Name);

            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType ));
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name ));
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write("Async(");
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name ));
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write("Args args);\r\n");
            
            #line default
            #line hidden
            
            #line 98 ""

    }

            
            #line default
            #line hidden
            
            #line 101 ""
            this.Write("    }\r\n}\r\n#pragma warning restore 1591\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class SharpTLDefaultTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
